#!/usr/bin/perl
#
# Autogenerated from perl_tru using csv2tab.plTR
# do not edit this file, look for csv2tab.plTR and change this
# or you may loose all your changes and probably choose the wrong method.
# goto http://www.strux.net to find more information.
#
#  protos
sub usage;
sub main;
$opt_n = 0;
if (@ARGV == 1 and $ARGV[0] eq '-?') {
  usage();
}
# based on csv2tab.plTR , version : 1.0

sub usage
{
  print STDERR <<'EOU';
usage : csv2tab [Option] [<file> ...]
csv2tab reads all files given as argument and replaces real field-separators by tab
the input is supposed to be separated by ;

only sepaparators outside of quoted strings are treated (single or double-quote)
unless disabled multiple sequences of TabTab are translated to Tab Tab

If no file is specified the input is taken from stdin.
The output is written to stdout
OPTIONS:
  -n	do not put spaces between the tabs
  -version	show version information
EOU
  exit(1);
}

sub main
{
  if ( $ARGV[0] eq "-version" ) {
    print "Version :\n";
    print "  csv2tab.plTR	1.0\n";
    exit 0
  }
  #****************************************
  # tabify an csv-file
  #****************************************
  # an entry can either be
  #   bare	$quote == 0
  #   '-quoted	$quote&1 is set
  #   "-quoted	$quote&2 is set
  #****************************************
  use Getopt::Long;
  usage() if !GetOptions('n');
    # -n : do not put spaces between the tabs
  while (<>) {
    $quote=0;
    $result="";
    for ($i=0;$i<length;$i=$i+1) {
      $c=substr($_,$i,1);
      if ($c eq'"') {
        $quote^=2 unless $quote&1;
      } elsif ($c eq"'") {
        $quote^=1 unless $quote&2;
      } elsif ($c eq';') {
        $c="\t" unless $quote;
      }
      substr($result,$i,1) = $c;
    }
    if (!($opt_n)) {
      while ($result =~ s/\t\t/\t \t/g) {
      }
    }
    print "$result";
  }
}
main();
