if ! (has("perl"))
  finish
endif
perl <<EOT
package listVimSwapFiles;
#
# Autogenerated from perl_tru using listVimSwapFiles.plTR
# do not edit this file, look for listVimSwapFiles.plTR and change this
# or you may loose all your changes and probably choose the wrong method.
# goto http://www.strux.net to find more information.
#
#  protos
sub usage;
sub main;
sub fillSWP;
sub printSWP;
sub getSWPinfo($$);
# based on listVimSwapFiles.plTR , version : 4.0
#****************************************
# can be compiled into a standalone perl-script or into a vim-plugin (using perl_tru --vimPlug)
#****************************************

sub usage
{
  print STDERR <<'EOU';
usage : listVimSwapFiles

parses output of `vim -r` and presents it compacted 

the output could look like
  %home%naumann%scapes%perlTRscape%listVimSwapFiles%listVimSwapFiles.swp           YES     10484   runnning        ~naumann/scapes/perlTRscape/listVimSwapFiles/listVimSwapFiles
  %home%naumann%signature.swp                                                      YES     17423   dead            ~naumann/signature
  %home%naumann%scapes%perlTRscape%listVimSwapFiles%listVimSwapFiles.plTR.swp      NO      10484   runnning        ~naumann/scapes/perlTRscape/listVimSwapFiles/listVimSwapFiles.plTR
The fields meaning
  swapfilename
  modification status
  pid of vim
  status of vim
  filename in vim
Note:
  status "running" is also printed if vim is in the background

  -version	show version information
EOU
  exit(1);
}
#****************************************
# README for compiling as vim-plugin
#****************************************
# this is only useful together with LL.
# copy this file to ~/vim/plugin.
# 
# usage:
#   Assuming you have
#     :set directory=/vimswp//
#   then an entry in ~/LL.dirsettings could look like:
#     /vimswp$
#       P	%:%T%x
#       Xi	P fillSWP()
#       Xf	P return getSWPinfo($d,$F)
#       
#   start LL and see the result
#     LL /vimswp
#     
#****************************************
#****************************************
# technical info
#****************************************
# global Data-Structure
#   %SWP{dir}{swapfile}[ modified , pid , runstatus , file ]
#     dir	the directory holding the swapfiles ( e.G /vimswp )
#     swapfiles	the name of vim's .swp-file
#     
#     modified	the modified-state of the buffer, either no or YES
#     pid	the pid of the vim having this file open
#     runstatus	either "running" or "dead"
#     file	the name of the file for which this swapfile is responsible
#****************************************
### 
#  print a tabified output of `vim -r`

sub main
{
  if ( $ARGV[0] eq "-version" ) {
    print "Version :\n";
    print "  listVimSwapFiles.plTR	4.0\n";
    exit 0
  }
  open(STDOUT,"|tabify.pl");                       # no harm if this fails, output will just not be tabified
  fillSWP();                                       # fill the Data-Structure %SWP
  printSWP();                                      # print %SWP
}
### 
#  refreshes %SWP according to `vim -r`

sub fillSWP
{
  my @RES = `vim -r 2>&1`;
  my ($found, $file,$modified,$pid,$runstatus );
  chop @RES;                                       # \n
  chop @RES;                                       # \r
  for (@RES) {
    #****************************************
    # skip all lines that are not relevant
    #****************************************
    # they might be produced by some plugins (such as CSApprox)
    #****************************************
    if ($_ eq "Swap files found:") {
      $found = 1;
      next;
    }
    if (!($found)) {
      next;
    }
    if (/^   In directory (.+):/) {
      ($dir = $1) =~ s(/*$)();
      if (-l $dir) {
        ($dir = readlink($dir)) =~ s(/*$)();
      }
    } elsif (/^\s*\d+\.\s+(.*)/) {
      $swpfile = $1;
    } elsif (/^\s*owned by: /) {
      next # irrelevant, it's mtime and uid of the swp-file;
    } elsif (/^\s*file name: (.*)/) {
      $file = $1;
    } elsif (/^\s*modified: (.*)/) {
      $modified = $1;
    } elsif (/^\s*user name: (.*)/) {
      next # irrelevant, it's username and hostname;
    } elsif (/^\s*process ID: (\d+)(.*)/) {
      $pid       = $1;
      if ($2) {
        if ($2 eq ' (still running)') {
          $runstatus = "runnning";
        } else {
          $runstatus = $2;
        }
      } else {
        $runstatus = "dead";
      }
      $SWP{$dir}{$swpfile} = [ $modified,$pid,$runstatus,$file ];
    }
  }
}
### 
#  print the entries in %SWP

sub printSWP
{
  for $dir (keys %SWP) {
    for $sf (keys %{$SWP{$dir}}) {
      VIM::Msg("$sf\t".getSWPinfo($dir,$sf)."\n");
    }
  }
}
### 
#  return string for entry(dir,swapfile) from %SWP

sub getSWPinfo($$)
{
  local ($dir,$swapfile) = @_;
  return join("\t",@{$SWP{$dir}{$swapfile}});
}
EOT
