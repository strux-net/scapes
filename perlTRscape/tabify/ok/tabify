#!/usr/bin/perl
#
# Autogenerated from perl_tru using tabify.plTR
# do not edit this file, look for tabify.plTR and change this
# or you may loose all your changes and probably choose the wrong method.
# goto http://www.strux.net to find more information.
#
#  protos
sub usage;
sub main;
sub printout;
sub maxsize;
sub recalcmaxsize;
$opt_t = 0;
$opt_l = 0;
$opt_m = '';
$opt_delim = '\t+';
$opt_c = 0;
if (@ARGV == 1 and $ARGV[0] eq '-?') {
  usage();
}
# based on tabify.plTR , version : 3.0

sub usage
{
  print STDERR <<'EOU';
usage : tabify [Options] [<file> ...]

tabify reads all files given as argument and aligns the tabs.
If no file is specified the input is taken from stdin.
The output
  is written to stdout
  is produced when the last line is seen.

OPTIONS:
  -t	textmode (only DOS) : output lines end with \\r
  -l	treat field after leading tab as second field
  -m:<maxsize>	max size for the fields
  -delim:<delimiter>	split on this
	default for <delimiter> is \t+
  -c:<columns>	columns to tabify, default all
  -version	show version information
EOU
  exit(1);
}

sub main
{
  if ( $ARGV[0] eq "-version" ) {
    print "Version :\n";
    print "  tabify.plTR	3.0\n";
    exit 0
  }
  use Getopt::Long;
  usage() if !GetOptions('c=s','delim=s','m=s','l','t');
    # -t : textmode (only DOS) : output lines end with \\r
    # -l : treat field after leading tab as second field
    # -m : max size for the fields
    # -delim : split on this
    # -c : columns to tabify, default all
    if ($opt_c) {
      if ($opt_c < 2) {
        print STDERR "value $opt_c for -c not useful. Value must be >= 2\n";
        exit;
      }
    }
  binmode(STDOUT) unless $opt_t;
  while (<>) {
    chomp;
    if (!($opt_l)) {
      while (s/^(\t*)\t/$1        /) {
        # convert leading tabs to spaces
      }
    }
    @a=split(/$opt_delim/,$_,$opt_c);              # one ore more tab(s) seperate(s) columns
    push @b,[@a];                                  # this stack is fifo (push/shift)
    maxsize;                                       # of the current columns and the already seen columns
  }
  printout;                                        # what is selected so far
}

sub printout
{
  recalcmaxsize;                                   # to have it tabaligned
  while ($a=shift @b) {
    # For each entry ...
    for ($i=0;$i<@$a;$i++) {
      # ... take each column ...
      print "@$a[$i]"."\t"x (($i<$#$a)*(abs($s[$i]-length(@$a[$i])-1)/8+1)); # ... print it out ...
    }
    print "\n";                                    # ... and end the whole line with a \n (or see -t)
  }
}

sub maxsize
{
  for ($i=0;$i<@a;$i++) {
    # For each column ...
    $l=length $a[$i];                              # ... take the length
    $s[$i] = $l if $l>$s[$i];                      # ... and use it if larger than any entry before
  }
}

sub recalcmaxsize
{
  # tabalign each column
  if ($opt_m) {
    for ($i=0;$i<@s;$i++) {
      $s[$i] = $opt_m if $s[$i] > $opt_m;
    }
  }
  for ($i=0;$i<@s;$i++) {
    $s[$i] = 8*(int ($s[$i]/8) + 1);
  }
}
main();
