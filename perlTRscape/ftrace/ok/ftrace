#!/usr/bin/perl
#
# Autogenerated from perl_tru using ftrace.plTR
# do not edit this file, look for ftrace.plTR and change this
# or you may loose all your changes and probably choose the wrong method.
# goto http://www.strux.net to find more information.
#
#  protos
sub usage;
sub main;
sub summary($);
sub iprint($$$);
sub pathCorrectat($*);
sub noquote;
sub xvfork;
sub xmkdir;
sub xrmdir;
sub xexecve;
sub asplit($);
sub xchmod;
sub xlinkat;
sub xsymlinkat;
sub xsymlink;
sub xlink;
sub xrename;
sub xfchdir;
sub xchdir;
sub xunlinkat;
sub xunlink;
sub xopenat;
sub xopen;
sub xwrite;
sub xdup;
sub xdup2;
sub xdup3;
sub xfcntl64;
sub xfcntl;
sub xclone;
sub xutimensat;
$opt_p = '';
$opt_fno = 0;
$opt_q = 0;
$opt_s = 0;
$opt_v = 0;
$opt_i = '/dev/';
$opt_f = '';
$opt_fd = '/unknown/';
$opt_oa = '';
$opt_o = '';
$opt_Pp = 0;
if (@ARGV == 1 and $ARGV[0] eq '-?') {
  usage();
}
# based on ftrace.plTR , version : 4.0

sub usage
{
  print STDERR <<'EOU';
usage : ftrace [options] [ -- strace-options ] [ command [ args ] ]

trace a process (and it's childs) and produces a tree-view summary.

Example :
  ftrace -p 33445
  ftrace apt-get install whatever

If the command contains options you need to stop the option-parsing of ftrace
  ftrace -- rsync -a /this /there

For -p to work you need
  either
    echo 0 > /proc/sys/kernel/yama/ptrace_scope
  or
    vi /etc/sysctl.d/10-ptrace.conf
Notes : 
  ftrace does not trace suid-programs (unless you are root).
    Even a (at first glance) harmless ping is such a candidate.
    consider this when tracing scripts.
  when attaching to a running process (with -p) there is a small time-window, where ftrace may get confused.
    ftrace has to figure out what the current cwd of the process to be attached is.
    then ftrace attaches to this process.
    If between these two steps the cwd of the process changes, then some (or all) paths may be wrong.
    You can interrupt ftrace any time. The traced Process will continue running unchanged and the gathered information will be output.
  You will most likely never need to set strace-options.
    ftrace will provide the needed options automatically
  It can also parse exiting trace-files
    the trace file should be produced with
      strace -q -f -ttt -o strace.out -- yourCommandHere
    run ftrace
      ftrace -f strace.out 
  The strux-tools contain a syntax-file for viewing the tree with vim.
    in a vim-buffer with the output of ftrace do
      :set ft=ftrace
Bugs : 
  Probably some
OPTIONS:
  -p:<pid>	a pid to trace
  -fno	file names only
  -q	quiet (don't print header)
  -s	give information about bytes written to stdout and stderr
  -v	verbose (tell the flags used for file actions)
  -i:<regexp>	do not report files matching the given regexp
	default for <regexp> is /dev/
  -f:<file>	do not trace anything but parse an existing strace-file
  -fd:<dir>	for -f tell in what dir the trace was created
	default for <dir> is /unknown/
  -oa:<file>	append output to the given file
  -o:<file>	write output to the given file
  -Pp	preprend the pid in the output
  -version	show version information
EOU
  exit(1);
}
use File::Temp(tempfile);
use Cwd;
#****************************************
# still missing
#   execveat
#   fexecve
#   fork
#   futimens
#   utime
#   utimes
#   
# if all fileaccesses should be traced there still is
#   access
#   stat, fstat, lstat, fstatat
# technical
#   Process{$pid}	{..}
#     Fd{n}		{..}
#     Files	[{..}]
#       name	filename or pid (for exec vfork and clone)
#       flags	a free text
#       ts	timestamp (only for exec)
#     cwd	STRING
#     endts	timestamp of +++ exited with +++
#     errcode	as seen by   +++ exited with +++
#****************************************

sub main
{
  if ( $ARGV[0] eq "-version" ) {
    print "Version :\n";
    print "  ftrace.plTR	4.0\n";
    exit 0
  }
  use Getopt::Long;
  usage() if !GetOptions('Pp','o=s','oa=s','fd=s','f=s','i=s','v','s','q','fno','p=s');
    # -p : a pid to trace
    if ($opt_p) {
      $pid2trace = "-p $opt_p";
    }
    # -fno : file names only
    if ($opt_fno) {
      $indent = -99999;
      $opt_q  = 1;
    }
    # -q : quiet (don't print header)
    if ($opt_q) {
      $indent = -2;                                # the first usage will add 2
    }
    # -s : give information about bytes written to stdout and stderr
    # -v : verbose (tell the flags used for file actions)
    # -i : do not report files matching the given regexp
    # -f : do not trace anything but parse an existing strace-file
    if ($opt_f) {
      $tracefile = $opt_f;
    }
    # -fd : for -f tell in what dir the trace was created
    # -oa : append output to the given file
    # -o : write output to the given file
    # -Pp : preprend the pid in the output
  $p_stdin  = $Process{"root"}{Fd}{0} = {};
  $p_stdout = $Process{"root"}{Fd}{1} = {};
  $p_stderr = $Process{"root"}{Fd}{2} = {};
  if ($opt_f) {
    $Process{"root"}{cwd} = $opt_fd;
  } else {
    $Process{"root"}{cwd} = getcwd;
  }
  $Process{"root"}{initialCwd} = $Process{"root"}{cwd};
  if (!(defined $tracefile)) {
    (undef, $tracefile) = tempfile( "/tmp/ftr_XXXX", OPEN => 0 );
    $starttime = localtime;
    if (open (Pstatus,"</proc/$$/status")) {
      $beeingTraced = ((split(/\t/,(grep {/TracerPid/} <Pstatus>)[0]))[1] != 0);
      close Pstatus;
    }
    if ($beeingTraced) {
      exec(@ARGV);                                 # silently run the command untraced if we are already beeing traced
    } else {
      map {
        s/(.*)/"$1"/;
      } @ARGV;
      system("strace -q -f -ttt -etrace=open,openat,unlink,unlinkat,chmod,write,chdir,fchdir,rename,execve,clone,rmdir,mkdir,symlink,symlinkat,linkat,link,dup,dup2,dup3,fcntl,fcntl64,vfork,utimensat -e signal=!chld -o $tracefile @ARGV $pid2trace");
    }
    if ($opt_p) {
      if (open (FP,"/proc/$opt_p/cmdline")) {
        map {
          s/\\/\\\\/g;
          s/"/\\"/g;
          if (/[ ']/) {
            s/.*/"$&"/;
          }
        } @CMDLINE = split(/\x00/,<FP>);
        close FP;
      }
      $Process{$opt_p}{cwd} = $Process{"root"}{cwd} = readlink("/proc/$opt_p/cwd");
      push @{$Process{"root"}{Files}}  ,{ name => $opt_p                , flags => "attached to $opt_p : @CMDLINE" };
      push @{$Process{$opt_p}  {Files}},{ name => $Process{"root"}{cwd} , flags => "assumed cwd" };
      $initDone = 1;
    }
  }
  if (open(FT,$tracefile)) {
    while (<FT>) {
      if (($pid,$ts,$retval)   = m/^(\d+) +(\d+\.\d+) \+\+\+ exited with (\d+)/) {
        $Process{$pid}{endts}   = $ts;
        $Process{$pid}{errcode} = $retval;
        next;
      }
      if (($pid,$ts,$fragment) = m/^(\d+) +(\d+\.\d+) +(.*) <unfinished \.\.\.>/) {
        push @{$Process{$pid}{Files}},{ fragment => $fragment };
        next;
      }
      if (($pid,$ts,$name,$rest) = m/^(\d+) +(\d+\.\d+) +<\.\.\. (.+?) resumed> (.*)/) {
        if (${$Process{$pid}{Files}}[-1]{fragment} =~ /^$name\(/) {
          $_="$pid $ts ${$Process{$pid}{Files}}[-1]{fragment}$rest\n";
        } else {
          #****************************************
          # we should not get here
          #****************************************
          print STDERR "ftrace mismatch\t$pid\t$name\t$rest\t${$Process{$pid}{Files}}[-1]{fragment}\n";
        }
        # fall through
      }
      if (($pid,$ts,$call,$args,$retval) = m/^(\d+) +(\d+\.\d+) +(.*?)\((.*)\) *= *(-?\d+)/) {
        if (!($initDone)) {
          $initDone = 1;
          push @{$Process{"root"}{Files}},{ name => $pid , flags => "pseudo"};
          $Process{$pid}{initialCwd} = $Process{$pid}{cwd} = $Process{"root"}{cwd};
          $Process{$pid}{Fd}  = $Process{"root"}{Fd};
        }
        while (1) {
          if ($retval != -1 and $call eq "open") { xopen() ; last };
          if ($retval != -1 and $call eq "openat") { xopenat() ; last };
          if ($retval != -1 and $call eq "write") { xwrite() ; last };
          if ($retval != -1 and $call eq "dup") { xdup() ; last };
          if ($retval != -1 and $call eq "dup2") { xdup2() ; last };
          if ($retval != -1 and $call eq "dup3") { xdup3() ; last };
          if ($retval != -1 and $call eq "fcntl") { xfcntl() ; last };
          if ($retval != -1 and $call eq "fcntl64") { xfcntl64() ; last };
          if ($retval != -1 and $call eq "clone") { xclone() ; last };
          if ($retval == 0  and $call eq "chmod") { xchmod() ; last };
          if ($retval == 0  and $call eq "unlink") { xunlink() ; last };
          if ($retval == 0  and $call eq "unlinkat") { xunlinkat() ; last };
          if ($retval == 0  and $call eq "chdir") { xchdir() ; last };
          if ($retval == 0  and $call eq "fchdir") { xfchdir() ; last };
          if ($retval == 0  and $call eq "rename") { xrename() ; last };
          if ($retval == 0  and $call eq "rmdir") { xrmdir() ; last };
          if ($retval == 0  and $call eq "mkdir") { xmkdir() ; last };
          if ($retval == 0  and $call eq "execve") { xexecve() ; last };
          if ($retval == 0  and $call eq "symlink") { xsymlink() ; last };
          if ($retval == 0  and $call eq "symlinkat") { xsymlinkat() ; last };
          if ($retval == 0  and $call eq "linkat") { xlinkat() ; last };
          if ($retval == 0  and $call eq "link") { xlink() ; last };
          if ($retval == 0  and $call eq "utimensat") { xutimensat() ; last };
          if ($retval != 0  and $call eq "vfork") { xvfork() ; last };
          last;
        }
      }
    }
  }
  #****************************************
  # piping through tabify must not be done prior to the system-call (strace)
  #****************************************
  # or else ^C will also cancel strace
  #****************************************
  if ($opt_o) {
    if (!(open (OUTFP,"|tabify -m 120 -l >$opt_o"))) {
      print STDERR "$0 : cannot open '$opt_o' for writing : $!\n";
      exit(1);
    }
    select OUTFP;
  }
  if ($opt_oa) {
    if (!(open (OUTFP,"|tabify -m 120 -l >>$opt_oa"))) {
      print STDERR "$0 : cannot open '$opt_oa' for writing : $!\n";
      exit(1);
    }
    select OUTFP;
  }
  if (!($opt_q)) {
    print "\nsummary : $starttime\n";
  }
  summary("root");
  if ($opt_s) {
    if ($c = $$p_stdout{bytecount}) {
      print "$c Bytes written to STDOUT\n";
    }
    if ($c = $$p_stderr{bytecount}) {
      print "$c Bytes written to STDERR\n";
    }
  }
}
END {
  if (!($opt_f)) {
    unlink($tracefile);
  }
}

sub summary($)
{
  local ($pid) = @_;
  local $pidstr;
  if ($opt_Pp) {
    $pidstr = "$pid\t";
  } else {
    $pidstr = "";
  }
  local $indent = $indent+2;
  #"xxx:$pid:$Process{$pid}{Files}[0]{name}:$Process{$pid}{Files}[0]{flags}:$Process{$pid}{initialCwd}:\n"
  @{$Process{$pid}{Files}} = grep { $$_{name}  !~ /$opt_i/ or $$_{flags} !~ /^O_/ } @{$Process{$pid}{Files}};
  @{$Process{$pid}{Files}} = grep $$_{flags} !~ /O_RDONLY/ ,@{$Process{$pid}{Files}};
  if ($Process{$pid}{Files}[0]{flags} and $Process{$pid}{Files}[0]{flags} !~ /pseudo|exec|fork|attached|assumed/) {
    print ($pidstr.(" "x($indent-2))."cloned\n");
  }
  for (@{$Process{$pid}{Files}}) {
    #"zzz:$pid $$_{name}:$$_{flags}\n"
    if ($$_{flags} =~ /attached/) {
      print ($pidstr.(" "x$indent)."$$_{flags}\n") unless $opt_fno;
      summary($$_{name});
    } elsif ($$_{flags} =~ /pseudo/) {
      summary($$_{name});
    } elsif ($$_{flags} =~ /clone/) {
      #print ($pidstr.(" "x$indent)."$$_{flags} to $$_{name}\n") unless $opt_fno
      summary($$_{name});
    } elsif ($$_{flags} =~ /fork/) {
      if ($Process{$$_{name}}{Files}[1]{flags} !~ /^exec/ and ! $opt_fno) {
        print ($pidstr.(" "x($indent-2))."forked w/o execve\n");
      }
      summary($$_{name});
    } elsif ($$_{flags} =~ /exec/) {
      $runtime = sprintf("%0.6f sec",$Process{$pid}{endts} - $$_{ts});
      print ($pidstr.(" "x($indent-2))."$$_{name}\texec in $Process{$pid}{initialCwd} ($$_{binary}) ran $runtime, returned $Process{$pid}{errcode}\n") unless $opt_fno;
    } else {
      if ($$_{flags} =~ m"O_APPEND") {
        iprint ($_,1,"appended");
      } elsif ($$_{flags} =~ m"O_CREAT|O_RDWR") {
        iprint ($_,1,"written");
      } elsif ($$_{flags} =~ m"O_TRUNC") {
        iprint ($_,1,"overwritten with");
      } elsif ($$_{flags} =~ m"chmod|removed|renamed|created|linked|assumed|touched") {
        iprint ($_,0,"$$_{flags}");
      } elsif ($$_{flags} =~ m"#.") {
        iprint ($_,0,"unassigned $$_{flags} $$_{bytecount} Bytes");
      }
    }
  }
}

sub iprint($$$)
{
  local ($file,$typ,$str) = @_;
  local $fname = $$file{name};
  if ($typ) {
    if ($$_{bytecount}) {
      $str.=" $$_{bytecount} Bytes in $$_{packetcount} packets";
    } else {
      $str="touched";
    }
    if ($opt_v) {
      $str.=" ($$file{flags})";
    }
  }
  print($pidstr.(" "x$indent)."$fname\t$str\n");
}

sub pathCorrectat($*)
{
  local ($dirfd,*fname) = @_;
  if ($dirfd eq "AT_FDCWD") {
    $refdir = $Process{$pid}{cwd};
  } else {
    $refdir = $Process{$pid}{Fd}{$dirfd}{name};
  }
  if (!($fname =~ m:^/:)) {
    $fname = "$refdir/$fname";
  }
  while ($fname =~ s:/\.?/:/:g) {
    # dir1/./dir2 -> dir1/dir2          dir1//dir2 -> dir/dir2
  }
  $fname =~ s:/\.$::;
}

sub noquote
{
  local $a;
  while ($a = shift) {
    if (ref($a) eq "ARRAY") {
      for (@$a) {
        noquote(\$_);
      }
    } else {
      $count = ($$a =~ tr/ \t//);                  # count the whitespace
      if (!($count)) {
        $$a =~ s/.//;
        $$a =~ s/.$//;
      }
    }
  }
}
### 
#  has no args

sub xvfork
{
  $Process{$retval}{initialCwd} = $Process{$retval}{cwd} = $Process{$pid}{cwd};
  $Process{$retval}{Fd}  = $Process{$pid}{Fd};
  push @{$Process{$pid}{Files}},{ name => $retval, flags => "fork"};
}

sub xmkdir
{
  local ($dir) = ($args =~ m/"(.*)"/);
  pathCorrectat("AT_FDCWD",\$dir);
  push @{$Process{$pid}{Files}},{ name => $dir , flags => "directory created"};
}

sub xrmdir
{
  local ($dir) = ($args =~ m/"(.*)"/);
  pathCorrectat("AT_FDCWD",\$dir);
  push @{$Process{$pid}{Files}},{ name => $dir , flags => "directory removed"};
}
### 
#  args looks like
#    "/bin/cp", ["cp", "a.rc", "xx"], [/* 67 vars */]
#  or on newer strace
#    "/bin/cp", ["cp", "a.rc", "xx"], 0xsomething [/* 67 vars */]

sub xexecve
{
  $args =~ s@\], ((0x[[:xdigit:]]+ )|(\[/\*)).*@@;
  $args =~ s:, \[:,:;
  ($binary,$command,$args) = split(/, */,$args,3);
  #"pre  : $args\n"
  noquote(\$binary,\$command);
  $args=asplit($args);
  #"post : $args\n"
  push @{$Process{$pid}{Files}},{ name => "$command $args", flags => "exec" , binary => $binary , ts => $ts };
}
### 
#  printf(asplit(q("a\"b", "kkkk", "ll ll", "m\6m", "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"..., "c'd")))
#    gives
#  "a\"b" kkkk "ll ll" "m\6m" "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"... "c'd"

sub asplit($)
{
  local ($_) = @_;
  s/"\.\.\./\x03"/g;                               # "...       -> ^C"
  s/.//;                                           # leading ...
  s/.$//;                                          # ... and trailing "
  local @A = split /", "/;
  map {
    if (s/\x03$/".../) {
      s/^/"/;
    } elsif (/[ '\\]/) {
      $_ = qq("$_");
    }
  } @A;
  return "@A";
}
### 
#  args look like
#    "vim", 0775

sub xchmod
{
  ($file,$newmode) = ($args =~ m/"(.*)", (\d+)/);
  pathCorrectat("AT_FDCWD",\$file);
  push @{$Process{$pid}{Files}},{ name => $file , flags => "chmod to $newmode"};
}
### 
#  args look like
#    AT_FDCWD, "from", AT_FDCWD, "to", 0
#  or
#    3, "from", AT_FDCWD, "to", 0

sub xlinkat
{
  ($from,$to) = ($args =~ m/"(.*)".*"(.*)"/);
  pathCorrectat("AT_FDCWD",\$from);pathCorrectat("AT_FDCWD",\$to);
  push @{$Process{$pid}{Files}},{ name => $to , flags => "hardlinked to $from"};
}
### 
#  args look like
#    AT_FDCWD, "from", AT_FDCWD, "to", 0
#  or
#    3, "from", AT_FDCWD, "to", 0

sub xsymlinkat
{
  ($from,$to) = ($args =~ m/"(.*)".*"(.*)"/);
  pathCorrectat("AT_FDCWD",\$from);pathCorrectat("AT_FDCWD",\$to);
  push @{$Process{$pid}{Files}},{ name => $to , flags => "symlinked from $from"};
}

sub xsymlink
{
  ($from,$to) = ($args =~ m/"(.*)".*"(.*)"/);
  pathCorrectat("AT_FDCWD",\$to);
  push @{$Process{$pid}{Files}},{ name => $to , flags => "symlinked from $from"};
}

sub xlink
{
  ($from,$to) = ($args =~ m/"(.*)".*"(.*)"/);
  pathCorrectat("AT_FDCWD",\$from);pathCorrectat("AT_FDCWD",\$to);
  push @{$Process{$pid}{Files}},{ name => $to , flags => "linked to $from"};
}

sub xrename
{
  ($from,$to) = ($args =~ m/"(.*)".*"(.*)"/);
  pathCorrectat("AT_FDCWD",\$from);pathCorrectat("AT_FDCWD",\$to);
  push @{$Process{$pid}{Files}},{ name => $to , flags => "renamed, was $from"};
}

sub xfchdir
{
  $Process{$pid}{cwd} = $Process{$pid}{Fd}{$args}{name};
}

sub xchdir
{
  local ($pwd) = ($args =~ m/"(.*)"/);
  pathCorrectat("AT_FDCWD",\$pwd);
  $Process{$pid}{cwd} = $pwd;
}
### 
#  args look like
#    4, "filename", AT_REMOVEDIR
#    AT_FDCWD, "filename", AT_REMOVEDIR

sub xunlinkat
{
  ($dirfd,$fname) = ($args =~ /^(.*?), "(.*?)"/);
  pathCorrectat($dirfd,\$fname);
  push @{$Process{$pid}{Files}},{ name => $fname , flags => "removed"};
}

sub xunlink
{
  ($fname) = ($args =~ m/"(.*)"/);
  pathCorrectat("AT_FDCWD",\$fname);
  push @{$Process{$pid}{Files}},{ name => $fname , flags => "removed"};
}
### 
#  args look like
#    4, "filename", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_DIRECTORY|O_NOFOLLOW
#    AT_FDCWD, "filename", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_DIRECTORY|O_NOFOLLOW

sub xopenat
{
  ($dirfd,$fname,$flags) = ($args =~ /^(.*?), "(.*?)", (.*)/);
  pathCorrectat($dirfd,\$fname);
  push @{$Process{$pid}{Files}},{ name => $fname , flags => $flags };
  $Process{$pid}{Fd}{$retval} = ${$Process{$pid}{Files}}[-1];
}

sub xopen
{
  ($fname,$flags) = ($args =~ m/"(.*)", (.*)/);
  pathCorrectat("AT_FDCWD",\$fname);
  push @{$Process{$pid}{Files}},{ name => $fname , flags => $flags };
  $Process{$pid}{Fd}{$retval} = ${$Process{$pid}{Files}}[-1];
}

sub xwrite
{
  ($channel) = ($args =~ m/(.*?),/);
  ${$Process{$pid}{Fd}{$channel}}{bytecount}+=$retval;
  ${$Process{$pid}{Fd}{$channel}}{packetcount}++;
}

sub xdup
{
  ($channel) = ($args =~ m/(.*?),/);
  $Process{$pid}{Fd}{$retval}  = $Process{$pid}{Fd}{$channel};
}

sub xdup2
{
  xdup();
}

sub xdup3
{
  xdup();
}

sub xfcntl64
{
  xfcntl();
}
### 
#  only the F_DUPFD are of interest
#  args look like
#    3, F_DUPFD, 3

sub xfcntl
{
  if (($channel) = ($args =~ m/^(.*?), F_DUPFD/)) {
    $Process{$pid}{Fd}{$retval}  = $Process{$pid}{Fd}{$channel};
  }
}
### 
#  complete line looks like
#    8193  clone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f4eb8dfa9d0) = 8194

sub xclone
{
  $Process{$retval}{initialCwd} = $Process{$retval}{cwd} = $Process{$pid}{cwd};
  $Process{$retval}{Fd}  = $Process{$pid}{Fd};
  push @{$Process{$pid}{Files}},{ name => $retval, flags => "clone"};
}
### 
#  args look like
#    AT_FDCWD, "xxyy/", [{1486012099, 769375883}, {1485429745, 0}], 0

sub xutimensat
{
  if (($dirfd,$fname) = ($args =~ /^(.*?), "(.*?)"/)) {
    pathCorrectat($dirfd,\$fname);
    push @{$Process{$pid}{Files}},{ name => $fname , flags => "touched" };
  }
}
main();
