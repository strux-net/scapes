"
" Autogenerated from vim_tru using QuickView.vimTR
" do not edit this file, look for QuickView.vimTR and change this
" or you may loose all your changes and probably choose the wrong method.
" goto http://www.strux.net to find more information.
"
" based on QuickView.vimTR , version : 3.0a
"usage for QuickView
"	Quick-View vim-commands.
"
"	Replaces current (or all) window(s) with the result of the function QvSettings and vice-versa.
"	Your original buffers are not touched at all.
"	The layout of your buffers is kept intact.
"
"	Tries to read the optional file QvSettings.vim in 'runtimepath'
"
"	The default QvSettings does:
"	    show buffer-local mappings
"	    show buffer-local settings
"	    show buffer-local variables
"
"	To make changes active in the running vim-session you can at any time do
"	  :ru QvSettings.vim
"
"	to install this plugin put this file into ~/.vim/plugin/
"	global n-mappings
"	<leader>Qv	quick view for vars and options of all windows
"	<leader>qv	quick view for vars and options of current winow
"
"---------------------------------------------
function <sid>Help_n_1()
  echohl WarningMsg
  echo 'quick view for vars and options of all windows (bound to <leader>Qv)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_2()
  echohl WarningMsg
  echo 'quick view for vars and options of current winow (bound to <leader>qv)'
  echohl None
  echo ''
endfunction
" the interface
    nnoremenu &Strux.&QuickView.Quickview&All<tab>\<leader>Qv :call QuickViewAll()<CR>
    nnoremenu &Strux.&QuickView.&Quickview<tab>\<leader>qv :call QuickView()<CR>
    nnoremap <silent> <leader>Qv :call QuickViewAll()<CR>
    nnoremap <silent> <leader>qv :call QuickView()<CR>
"-- 
"  toggle the QuickView of all windows
function!QuickViewAll() 
  if QvDirMissing()
    return
  endif
  let n=winnr()
  windo call QuickView()
  exe n . "wincmd w"
  redraw!
endfunc
"-- 
"  toggle the QuickView of current window
function!QuickView() 
  if QvDirMissing()
    return
  endif
  if exists('b:isQuickView')
    "****************************************
    " switch back to original file
    "****************************************
    exe "bu ".b:isQuickView
    bw #
  else
    "****************************************
    " switch to qv-file
    "****************************************
    let bufnr   = bufnr("%")
    let bufname = expand("%")
    let qvFile = s:qvDir."/".bufnr
    silent call ShowSettings(qvFile)
    " use :n, not :e so that a new buffer number is assigned (even if buffer is [No Name] and empty)
    exe "n ".qvFile
    " do not inherit the filetype
    set ft=
    let &l:stl='Quickview for : '.bufname
    let b:isQuickView = bufnr
  endif
endfunc
"-- 
"  call this function with 'silent' to suppress unwanted output
function!ShowSettings(qvFile) 
  exe "redir! > ".a:qvFile
  call QvSettings()
  redir END
endfunc
function!QvDirMissing() 
  if s:qvDirState == 0
    let s:qvDir  = tempname()
    if !(isdirectory(s:qvDir))
      silent! call mkdir(s:qvDir,"p",0700)
    endif
    if !(isdirectory(s:qvDir))
      echohl WarningMsg
      echo 'directory '.s:qvDir.' does not exist.'
      echohl None
      echo 'I already tried to create this directory without success'
      echo 'Solution : '
      echo '  create the directory yourself with permissions set so that the current user can read and write it'
      echo 'Find more help with :help QuickView'
      let s:qvDirState = 1
      " error
      return 1
    else
      let s:qvDirState = 2
      " good
      return 0
    endif
  elseif s:qvDirState == 1
    return 1
  else
    " good
    return 0
  endif
endfunc
"-- 
"  the results of the commands given here are shown in the Qv-View
function!QvSettings() 
  echo 'buffer-local mappings'
  map <buffer>
  echo ''
  echo 'buffer-local settings'
  setlocal
  echo ''
  echo 'buffer-local variables'
  let b:
endfunc
"-- 
"  try to source users QvSettings.vim
" 0 : not yet created,  1 : created w/o success, 2: successfully created
let s:qvDirState = 0
" users can override QvSettings by providing their own function
ru QvSettings.vim
autocmd VimLeavePre * call QvDirCleanUp()
"-- 
"  a unix-vim does not remove a temp-file if it is a directory.
"  Here I try to remove it with OS-tools.
"  
"  I'm not sure how vim behaves on other OSes.
"  So the following coding may need some additions.
"  e. G under Windows you may do something like
"    exe '!rmdir /S /Q '.s:n
"    
"  No big harm should occur anyway if the files remain.
function!QvDirCleanUp() 
  if s:qvDirState == 2
    if has('unix')
      exe '!rm -r '.s:qvDir
    endif
  endif
endfunc
