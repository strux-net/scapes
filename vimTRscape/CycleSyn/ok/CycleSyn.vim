"
" Autogenerated from vim_tru using CycleSyn.vimTR
" do not edit this file, look for CycleSyn.vimTR and change this
" or you may loose all your changes and probably choose the wrong method.
" goto http://www.strux.net to find more information.
"
" based on CycleSyn.vimTR , version : 4.0
"usage for CycleSyn.vim
"	cycle through different syntax-highlighting settings.
"
"	press \cs to cycle
"	or press 4\cs to jump directly to setting 4
"
"	the \ above indicates the leader, you can redefine it (:help leader)
"
"	To choose a completely different mapping, put the following into your ~/.vimrc
"	    nmap whatever :<c-u>call CycleSyn()<CR>
"	  in this case \cs remains untouched, it is not mapped here again.
"
"	the settings are
"	  1	syn off
"	  2	syn white
"	  3	syn showIndent		currently only in gui
"	  4	syn tabify
"	  5	syn &ft			the usual highlighting
"
"	To see the effect of the settings it's best to open the corresponding syntax file in a buffer
"	and cycle to the setting.
"
"	e.G to see what tabify means do
"	  :sp ~/.vim/syntax/tabify.vim
"	  and then type
"	    4\cs
"
"	to install this plugin put this file into ~/.vim/plugin/
"	You must also have the following 3 fines in ~/.vim/syntax/
"	  white.vim
"	  tabify.vim
"	  showIndent.vim
"	<leader>cs	Cycle through off white indent tabify filetype
"
"---------------------------------------------
if !hasmapto(":<c-u>call CycleSyn()<CR>",'n')
  " <leader>cs       -> Cycle through off white indent tabify filetype
  nmap <leader>cs :<c-u>call CycleSyn()<CR>
endif
function!CycleSyn() 
  if v:count
    let s:SynC = v:count
  endif
  if s:SynC==1
    set syn=off
    echo "1 : syn off"
    let s:SynC=2
  elseif s:SynC==2
    set syn=white
    echo "2 : syn white"
    let s:SynC=3
  elseif s:SynC==3
    if has("gui_running")
      set syn=showIndent
      echo "3 : syn showIndent"
    else
      echo "syn showIndent, only in gui for now"
    endif
    let s:SynC=4
  elseif s:SynC==4
    set syn=tabify
    echo "4 : syn tabify"
    let s:SynC=5
  elseif s:SynC==5
    :exe "se syntax=".&ft
    echo "5 : syn on (" . &ft .")"
    let s:SynC=1
  endif
endfunc
"	main
  let s:SynC=1
  syn on
