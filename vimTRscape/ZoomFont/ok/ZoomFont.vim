"
" Autogenerated from vim_tru using ZoomFont.vimTR
" do not edit this file, look for ZoomFont.vimTR and change this
" or you may loose all your changes and probably choose the wrong method.
" goto http://www.strux.net to find more information.
"
" based on ZoomFont.vimTR , version : 3.0
"usage for ZoomFont.vim
"	allows to quickly increase/decrease (rsp. switch) fonts.
"	You define a font-family like
"	  "Courier_New:h<size>:cANSI"	in a windows gui
"          "DejaVu Sans Mono <size>"	in a gtk2 gui (the default)
"	The <size> is as written (6 characters). It will be replaced with the new size.
"	For example a Windows users should have in their .vimrc a line like
"	  let g:strux_ZoomFont_family="Courier_New:h<size>:cANSI"
"	you can also set some fixed fonts for dedicated sizes like in
"	  let g:strux_ZoomFont_9="Century Schoolbook L Italic 9"
"	It does only work if a gui is running.
"
"	to install this plugin put this file into ~/.vim/plugin/
"	global n-mappings
"	<C-kPlus>	increase the font
"	<C-kMinus>	decrease the font
"
"	Configuration variables
"	  The following vars can be set in your .vimrc or in your environment.
"	  Settings in the environment have the highest precedence.
"
"	g:strux_ZoomFont_family : the font-family to be used per default	(defaults to "DejaVu Sans Mono <size>")
"	  (can be superseded with the environment-var $strux_ZoomFont_family)
"	g:strux_ZoomFont_initialNumber : the starting font size	(defaults to 9)
"	  (can be superseded with the environment-var $strux_ZoomFont_initialNumber)
"	g:strux_ZoomFont_max : the max font size	(defaults to 24)
"	  (can be superseded with the environment-var $strux_ZoomFont_max)
"
"---------------------------------------------
function <sid>Help_n_1()
  echohl WarningMsg
  echo 'increase the font (bound to <C-kPlus>)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_2()
  echohl WarningMsg
  echo 'decrease the font (bound to <C-kMinus>)'
  echohl None
  echo ''
endfunction
if !(has("gui_running"))
  finish
endif
" the font-family to be used per default
if exists("$strux_ZoomFont_family")
  let g:strux_ZoomFont_family=$strux_ZoomFont_family
endif
if !exists("g:strux_ZoomFont_family")
  let g:strux_ZoomFont_family="DejaVu Sans Mono <size>"
endif
" the starting font size
if exists("$strux_ZoomFont_initialNumber")
  let g:strux_ZoomFont_initialNumber=$strux_ZoomFont_initialNumber
endif
if !exists("g:strux_ZoomFont_initialNumber")
  let g:strux_ZoomFont_initialNumber=9
endif
" the max font size
if exists("$strux_ZoomFont_max")
  let g:strux_ZoomFont_max=$strux_ZoomFont_max
endif
if !exists("g:strux_ZoomFont_max")
  let g:strux_ZoomFont_max=24
endif
let s:size = g:strux_ZoomFont_initialNumber
" the interface
    nnoremenu &Strux.&ZoomFont.&In<tab>\<C-kPlus> :<c-u>call ZoomFont()<cr>
    nnoremenu &Strux.&ZoomFont.&Out<tab>\<C-kMinus> :<c-u>call UnZoomFont()<cr>
    nnoremap <silent> <C-kPlus> :<c-u>call ZoomFont()<cr>
    nnoremap <silent> <C-kMinus> :<c-u>call UnZoomFont()<cr>
function!ZoomFont() 
  let s:size+=1
  if (!v:count && !v:count1) || v:count
    let s:size=v:count
  endif
  if s:size > g:strux_ZoomFont_max
    let s:size=g:strux_ZoomFont_max
  endif
  call ZoomFontTo(s:size)
endfunc
function!UnZoomFont() 
  let s:size-=1
  if s:size < 1
    let s:size=1
  endif
  call ZoomFontTo(s:size)
endfunc
function!ZoomFontTo(size) 
  exe 'let l:isSet = (exists("g:strux_ZoomFont_'.a:size.'") && g:strux_ZoomFont_'.a:size.' != "")'
  if l:isSet
    exe 'let &guifont=g:strux_ZoomFont_'.a:size
  else
    let &guifont=substitute(g:strux_ZoomFont_family,'<size>',a:size,"")
  endif
  redraw!
  set guifont?
endfunc
