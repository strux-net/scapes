"
" Autogenerated from vim_tru using disp.vimTR
" do not edit this file, look for disp.vimTR and change this
" or you may loose all your changes and probably choose the wrong method.
" goto http://www.strux.net to find more information.
"
" based on disp.vimTR , version : 3.0
if !(has("perl"))
  finish
endif
if exists("loaded_disp")
  finish
else
  let loaded_disp=1
endif
au BufEnter /strux/* setl noswapfile
function!Sp(buffname) 
  if buflisted(a:buffname) && bufexists(a:buffname)
    let switchbuf=&switchbuf
    set switchbuf=useopen
    exe "silent sb ".a:buffname
    let &switchbuf=switchbuf
    " buffer was already open
    return 1
  else
    exe "silent sp ".a:buffname
    " buffer is newly created
    return 0
  endif
endfunc
"-- 
"  dispbuffers are supposed to live in a nonexisting directory
"  preferably in /strux/
"  this directory should not really exist
function!ActivateDispBuffer(buffname) 
  if Sp(a:buffname)
    " buffer was already open
    return 1
  else
    " Turn off the swapfile and set the buffer type so that it won't get written
    setlocal noswapfile
    setlocal buftype=nowrite
    " Don't wrap around long lines
    setlocal nowrap
    let &l:stl=substitute(a:buffname,"^/strux/","","").'%=F1 for Help'
    au BufLeave,CmdlineEnter <buffer> perl BufLeave_event()
    au BufEnter <buffer> perl BufEnter_event()
    " buffer is newly created
    return 0
  endif
endfunc
perl <<EOT
#  protos
sub disp($);
sub redisp;
sub dodisp;
sub BufLeave_event;
sub BufEnter_event;

sub disp($)
{
  local ($H_ref) = @_;
  if (!($$H_ref{bufname})) {
    $$H_ref{bufname} = "/strux/generic";
  }
  $disp::CH{$$H_ref{bufname}} = $H_ref;
  dodisp $H_ref;
}

sub redisp
{
  (my $success, $$disp::H{posInfo}) = VIM::Eval("string(winsaveview())");
  dodisp $disp::H;
}

sub dodisp
{
  #****************************************
  # In : A reference to a hash
  #   Array		=> Array of any stuff
  #   item_function	=> sub that is called for each Arrayline
  #   in_function	=> sub started before Array processing
  #   out_function	=> sub started after  Array processing
  #   linenr		=> number, where to put the cursor
  #   posInfo		=> additional info about cursor position
  #   bufname		=> name of vim-buffer
  #   tabify		=> int, if >0 output is to be tabified in the range tabify ... lastLine (needs tabify.vim)
  # Out : New view for the given Array
  #   1)	call in_function
  #   2)	For each line in Array call item_function
  #   3)	call out_function
  #   4)	position vim-cursor on line linenr regarding posInfo
  # During the view the following vars are made global for convenience
  #   $disp::H			current disp::H
  #   $disp::A			reference to the Array
  #   Esp. the xx_functions can make use of these
  # simple example.vim!
  #   Interface	/strux/files
  #     <CR>	use this file	:perl useThisFile<CR>
  #       Press enter to use file under cursor
  #   perl
  #     getFileList
  #       disp	/strux/files
  #         Array	[ split(/\n/,`ls -A ~`) ]
  #     useThisFile
  #       VIM::Msg("file is : ".@$disp::A[($curwin->Cursor())[0]-1])
  #   main
  #     perl getFileList()
  #****************************************
  ($disp::H) = @_;
  if ($$disp::H{linenr}) {
    if ($$disp::H{posInfo}) {
      $$disp::H{posInfo} =~ s/'lnum': (.+?),/'lnum': $$disp::H{linenr},/;
    } else {
      $$disp::H{posInfo} = "{'lnum': $$disp::H{linenr}, 'topline': 0}";
    }
    delete $$disp::H{linenr};
  } else {
    if (!($$disp::H{posInfo})) {
      $$disp::H{posInfo} = "{'lnum': 1, 'topline': 1}";
    }
  }
  $disp::A   = $$disp::H{Array};
  my $f    = $$disp::H{item_function};
  my $inf  = $$disp::H{in_function};
  my $outf = $$disp::H{out_function};
  if (!($$disp::H{bufname})) {
    $$disp::H{bufname} = "/strux/generic";
  }
  if (!(defined $f)) {
    $f=sub { @{@_[0]}[@_[1]] };
  }
  VIM::DoCommand(qq(call ActivateDispBuffer("$$disp::H{bufname}")));
  VIM::DoCommand("setlocal modifiable|silent! u|silent %d");
  &$inf if defined (&$inf);
  local $item=$curbuf->Count()-1;
  for (local $i=0;$i<@$disp::A;$i++) {
    if (defined (my $s=&$f($disp::A,$i))) {
      $curbuf->Append($item++,$s);
    }
  }
  &$outf if defined (&$outf);
  $curbuf->Delete($item+1);
  if ($$disp::H{tabify}) {
    if (!(defined(&tabify))) {
      eval q( sub tabify { VIM::Msg("tabify not installed - go and get it from www.strux.net","Error"); eval q(sub tabify {})});
    }
    tabify($$disp::H{tabify},0);
  }
  VIM::DoCommand("setlocal nomodifiable|setlocal nomodified");
  VIM::DoCommand("call winrestview($$disp::H{posInfo})");
}
#****************************************
# Reenable pd for debugging
#****************************************
# use like
#   :perl pd \%LL::Dirs
# pd
#   use Data::Dumper
#   my @tmp=split "\n",Dumper(@_)
#   disp { Array =>  \@tmp }
#****************************************

sub BufLeave_event
{
  (my $success, $disp::CH{$curbuf->Name()}{posInfo}) = VIM::Eval("string(winsaveview())");
}

sub BufEnter_event
{
  $disp::H = $disp::CH{$curbuf->Name()};
  $disp::A = $$disp::H{Array};
}
EOT
