"
" Autogenerated from vim_tru using session.vimTR
" do not edit this file, look for session.vimTR and change this
" or you may loose all your changes and probably choose the wrong method.
" goto http://www.strux.net to find more information.
"
" based on session.vimTR , version : 4.0
"usage for session.vim
"	maintain vim-sessions.
"	the sessions have names.
"	If guitablabel is not set, then it will be set so that is shows the tabnumber and the session-name.
"
"	It requires vim with +perl.
"
"	The sessions are saved in the directory ~/vimsessions.
"
"	You can create this directory from within vim with
"	  :!mkdir ~/vimsessions
"
"	to install this plugin put this file into ~/.vim/plugin/
"	commands
"		CreateSessionTab	Create a tab for a particular session
"	global n-mappings
"	<M-f>S	Save this session
"	<M-f>s	Load a new session
"	<M-f>r	Reload current session
"	<M-f>c	Close this session
"	<M-f>C	Close and save this session
"	<M-f>z	zoom/unzoom window
"	<M-f>Z	zoom window into a new tab
"	n-mappings for buffer /strux/sessions
"	<CR>	use this session
"	  Press enter to use file under cursor
"	<C-C>	cancel
"	i	enter the name
"
"---------------------------------------------
function <sid>Help_n_1()
  echohl WarningMsg
  echo 'Save this session (bound to <M-f>S)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_2()
  echohl WarningMsg
  echo 'Load a new session (bound to <M-f>s)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_3()
  echohl WarningMsg
  echo 'Reload current session (bound to <M-f>r)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_4()
  echohl WarningMsg
  echo 'Close this session (bound to <M-f>c)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_5()
  echohl WarningMsg
  echo 'Close and save this session (bound to <M-f>C)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_6()
  echohl WarningMsg
  echo 'zoom/unzoom window (bound to <M-f>z)'
  echohl None
  echo ''
endfunction
function <sid>Help_n_7()
  echohl WarningMsg
  echo 'zoom window into a new tab (bound to <M-f>Z)'
  echohl None
  echo ''
endfunction
function <sid>Help_n2f73747275782f73657373696f6e73_1()
  echohl WarningMsg
  echo 'use this session (bound to <CR>)'
  echohl None
  echo ''
  echo 'Press enter to use file under cursor'
endfunction
function <sid>Help_n2f73747275782f73657373696f6e73_2()
  echohl WarningMsg
  echo 'cancel (bound to <C-C>)'
  echohl None
  echo ''
endfunction
function <sid>Help_n2f73747275782f73657373696f6e73_3()
  echohl WarningMsg
  echo 'enter the name (bound to i)'
  echohl None
  echo ''
endfunction
if !(has("perl"))
  finish
endif
if &guitablabel == ''
  set guitablabel=%N\ %{exists('t:tn')?(t:tn):'not\ set'}
endif
"Create a tab for a particular session
com! -nargs=1 CreateSessionTab call CreateSessionTab('<args>')
" the interface
    nnoremenu &Strux.&Session.&Save<tab>\<M-f>S :call SaveSession()<CR>
    nnoremenu &Strux.&Session.&Load<tab>\<M-f>s :call OpenSession()<CR>
    nnoremenu &Strux.&Session.&Reload<tab>\<M-f>r :exe "silent so ". expand('~').'/vimsessions/'.t:tn<CR>
    nnoremenu &Strux.&Session.&Close<tab>\<M-f>c :tabc<CR>
    nnoremenu &Strux.&Session.Close\ and\ S&ave<tab>\<M-f>C :if !SaveSession()\|tabc\|endif<CR>
    nnoremenu &Strux.&Session.&Zoom<tab>\<M-f>z :call ZoomSession()<CR>
    nnoremenu &Strux.&Session.Z&oom\ into\ new\ tab<tab>\<M-f>Z :call NewTabForCurrentBuffer()<cr>
    nnoremap <silent> <M-f>S :call SaveSession()<CR>
    nnoremap <silent> <M-f>s :call OpenSession()<CR>
    nnoremap <silent> <M-f>r :exe "silent so ". expand('~').'/vimsessions/'.t:tn<CR>
    nnoremap <silent> <M-f>c :tabc<CR>
    nnoremap <silent> <M-f>C :if !SaveSession()\|tabc\|endif<CR>
    nnoremap <silent> <M-f>z :call ZoomSession()<CR>
    nnoremap <silent> <M-f>Z :call NewTabForCurrentBuffer()<cr>
" the interface
" InterfaceOFF for /strux/sessions
function!InterfaceOFF_2f73747275782f73657373696f6e73()
  if exists("b:Interface_2f73747275782f73657373696f6e73_MapsDone")
    unlet b:Interface_2f73747275782f73657373696f6e73_MapsDone
  endif
endf
function!<sid>Help_n2f73747275782f73657373696f6e73()
  echo '1	<CR>	use this session'
  echo '2	<C-C>	cancel'
  echo '3	i	enter the name'
  if exists('<SID>Help()')
    call <SID>Help()
  endif
  while 1 == 1
    echo '' | " due to a bug in vim. Else the prompt will get partly overwritten
    call inputsave()
    let ans=input("Type Nr of Item for more help on this item, or just press ENTER : ")
    call inputrestore()
    let ans='<sid>Help_n2f73747275782f73657373696f6e73_'.ans
    if exists('*'.ans)
      echo "\r"
      exe 'call '.ans.'()'
    else
      break
    endif
  endwhile
endf
" InterfaceON for /strux/sessions
function!InterfaceON_2f73747275782f73657373696f6e73()
  if !exists("b:Interface_2f73747275782f73657373696f6e73_MapsDone")
    nnoremap <buffer> <F1> :<C-U>call <sid>Help_n2f73747275782f73657373696f6e73()<CR>
    nnoremap <buffer> <CR> :call <sid>Help_n2f73747275782f73657373696f6e73_1()<cr>:call UseThisSessionFile()<CR>
    nnoremap <buffer> <silent> <C-C> :call Cancel()<CR>
    nnoremap <buffer> <silent> i :call EnterNameDirectly()<CR>
    augroup g2f73747275782f73657373696f6e73
      au! BufLeave <buffer>
      au BufLeave <buffer> call InterfaceOFF_2f73747275782f73657373696f6e73()
    augroup END
    let b:Interface_2f73747275782f73657373696f6e73_MapsDone=1
    if !exists("b:_2f73747275782f73657373696f6e73_HintGiven")
      unsilent echo 'special mappings from session.vimTR available. Press <F1> for a list'
    endif
    let b:_2f73747275782f73657373696f6e73_HintGiven=1
  endif
endf
" Hooking the Interfaces for /strux/sessions
au BufEnter /strux/sessions call InterfaceON_2f73747275782f73657373696f6e73()
"-- 
"  returns 0 on success, 1 if cancelled
function!SaveSession() 
  call inputsave()
  if !exists("t:tn") || t:tn == '<noName>'
    let t:tn=''
  endif
  let s:ts=input("Save this session as  : ",t:tn)
  if s:ts!=''
    if stridx(s:ts,"/") == -1
      let of = expand('~').'/vimsessions/'.s:ts
    else
      let of=s:ts
    endif
    if !filereadable(of) || s:ts == t:tn || input('overwrite existing '.of.' ? ') == 'y'
      let t:cwd=getcwd()
      exe  "mksession! ".of
      call CorrectSessionFile(of)
      silent call AddTabVars(of)
      echo "\rSession" of 'saved'
      let t:tn = s:ts
      " this trick leads to a redraw of the tabline ( needed in case the name changed )
      let &guitablabel=&guitablabel
      call inputrestore()
      return 0
    endif
  endif
  call inputrestore()
  echo 'session save cancelled'
  return 1
endfunc
"-- 
"  remove lines starting with
"    args			superfluous and disrupting
"    set nocompatible		no need for this
"    badd			vim produces too many items
"  add a badd back to each edit
function!CorrectSessionFile(of) 
  call system("perl -i -n -e 'next if /^args / or /^set nocompatible/ or /^badd/;s/^edit (.*)/badd $1\nedit $1/;print' ".a:of)
endfunc
"-- 
"  add the tablocal-vars to the session-file (but skip the session-internal-vars)
function!AddTabVars(of) 
  "****************************************
  " skip (session-) internal vars
  "****************************************
  for var in keys(t:)
    if var == 'tn' | continue
    elseif var == 'cwd' | continue
    endif
    call writefile(['let t:'. var . '=' . string(t:{var})],a:of,"a")
  endfor
endfunc
function!OpenSession() 
  perl getFileList
  if exists("*winrestcmd")
    let s:winrestcmd=winrestcmd()
    " session select window as high as possible
    wincmd _
    " session select window as wide as possible
    wincmd |
  endif
endfunc
function!ProcessInput() 
  if exists("*winrestcmd")
    exe s:winrestcmd
  endif
  " close the session select window
  bdelete
  call CreateSessionTab(s:ns)
endfunc
function!CreateSessionTab(ns) 
  if a:ns!=''
    if stridx(a:ns,"/") == -1
      let nsf = expand('~').'/vimsessions/'.a:ns
    else
      let nsf=a:ns
    endif
    if filereadable(nsf)
      if !(exists('t:tn'))
        let t:tn='<noName>' " the current (old) tab does not yet have t:tn set
      endif
      tabe
      " may be overwritten by sourced file
      let t:tn=a:ns
      exe "silent so ".nsf
      " store the cwd
      let t:cwd=getcwd()
    else
      echo 'File not found : '.nsf
    endif
  endif
endfunc
function!UseThisSessionFile() 
  perl VIM::DoCommand('let s:ns="'.@$disp::A[($curwin->Cursor())[0]-1].'"')
  call histadd("@",s:ns)
  call ProcessInput()
endfunc
function!Cancel() 
  let s:ns=''
  call ProcessInput()
endfunc
function!EnterNameDirectly() 
  let s:ns=input("Load session : ")
  call ProcessInput()
endfunc
function!ZoomSession() 
  if exists('t:zoomed')
    exe "so ".t:zoomed
    unlet t:zoomed
  else
    let t:zoomed = tempname()
    exe "mksession! ".t:zoomed
    wincmd o
  endif
endfunc
"-- 
"  a simple
"    tabe %
"  could trigger some autocommands.
function!NewTabForCurrentBuffer() 
  let bn = bufnr("%")
  let tn = t:tn
  tabnew
  exe "bu ".bn
  let t:tn = 'zoomed:'.tn
endfunc
perl <<EOT
#  protos
sub getFileList;

sub getFileList
{
  @disp::A=();
  if (!(opendir(dirhandle,"$ENV{HOME}/vimsessions"))) {
    VIM::Msg("cannot open dir $file : $!","Error");
    return;
  }
  while ($_=readdir dirhandle) {
    if ($_ ne "." and $_ ne "..") {
      push @disp::A,$_;
    }
  }
  @disp::A=sort @disp::A;
  closedir dirhandle;
  disp {
    bufname => "/strux/sessions",
    Array => \@disp::A,
  };
  VIM::Msg("choose session to open");
  VIM::DoCommand("call feedkeys('/\cU','n')");     # the \cU (<c-u>) is needed to have the /strux/sessions visible (strange as it is)
}
EOT
