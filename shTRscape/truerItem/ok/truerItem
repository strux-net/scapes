#!/bin/bash
#
# Autogenerated from sh_tru using truerItem.shTR
# do not edit this file, look for truerItem.shTR and change this
# or you may loose all your changes and probably choose the wrong method.
# goto http://www.strux.net to find more information.
#
opt_h=0
opt_a='$indent$_'
opt_f=''
opt_e=0
opt_v=0
opt_c='set swb='
opt_s=0
if [ "$1" == "-version" ] ; then
  echo "Version :"
  echo "  truerItem.shTR	3.0"
  exit 0
fi
# based on truerItem.shTR , version : 3.0

usage()
{
  cat <<'EOU' >&2
usage : truerItem [Options] <truer> <action> files ....
Echo all lines of the files for which <truer> would execute <action>.

Example : truerItem perl_tru fancyFor *.plTR
  This will parse all *.plTR files and echo the lines which perl_tru considers a fancyFor

It does not run <truer>.
Instead a new temp-truer is created from the structure of <truer> where the only defined action is <action>.

It may fail to recognize the correct structure if weird things with >> or @READ are done in the <truer>.
OPTIONS:
  -h	print filename and linenumber before each hit
        same as -a '$ARGV\t$.\t$_'
        The result is suitable to be piped through tabify.pl
  -a:<string>	use specified string as action
	default for <string> is $indent$_
        Example -a '$.\t$_'
  -f:<file>	read action-names from file
        The file should contain action-names (and args, if needed) each on it's own line.
  -e	make empty actions
        this is useful if you want to refer to parent-items
        Example : truerItem -e -a '$goal\t$Title' m_tru goal mTR
  -v	run vim on the result
        vim is started with the result as cfile.
        This allows for fast browsing the result.
        Do not use together with -h.
        Noteworthy if you want to also use option -a 
            put -a after -v
            let the argument to -a start with $ARGV:$.:
  -c:<ex-cmd>	set additional vim initialization
	default for <ex-cmd> is set swb=
        Just a matter of taste.
        You can use "-c= " for an empty additional initialization 
  -s	skip comment lines
        Useful for truers that ignore lines starting with #
  -version	show version information
EOU
  exit 1
}
main()
{
  if [ $# -eq 1 -a "$1" = '-?' ] ; then
    usage
  fi
  cmd=singleAction
  while getopts 's c: v e f: a: h' opt ; do 
    # Checking the options
    # -h : print filename and linenumber before each hit
    if [ "$opt" = 'h' ] ; then
      (( opt_h++ ))
      opt_a='$ARGV\t$.\t$_'
    fi
    # -a : use specified string as action
    if [ "$opt" = 'a' ] ; then
      opt_a="${OPTARG#*=}"
    fi
    # -f : read action-names from file
    if [ "$opt" = 'f' ] ; then
      opt_f="${OPTARG#*=}"
      cmd=multipleActions
      if ! [ -s "$opt_f" ] ; then
        echo "File $opt_f empty or not found" >&2
        exit
      fi
    fi
    # -e : make empty actions
    if [ "$opt" = 'e' ] ; then
      (( opt_e++ ))
    fi
    # -v : run vim on the result
    if [ "$opt" = 'v' ] ; then
      (( opt_v++ ))
      opt_a='$ARGV:$.:$_'
    fi
    # -c : set additional vim initialization
    if [ "$opt" = 'c' ] ; then
      opt_c="${OPTARG#*=}"
    fi
    # -s : skip comment lines
    if [ "$opt" = 's' ] ; then
      (( opt_s++ ))
    fi
    [ "$opt" = "?" ] && usage
  done # Checking the options
  shift $((OPTIND-1))
  [ "$1" = "--" ] && shift
  truer=$1;shift
  if [ -z $opt_f ] ; then
    action=$1;shift
  fi
  if (( opt_e )) ; then
    emptyActions="$(echo "actions";$truer -macros | grep -a '^  [^ ]')"
  fi
  if (( opt_v )) ; then
    perl <(( commentskip; echo $emptyActions ; $cmd ; $truer --structure ) | tru -q ) -- $* >/tmp/truerItem$$
    if [ -s /tmp/truerItem$$ ] ; then
      vim -R -c "cfile /tmp/truerItem$$" -c "copen" -c "$opt_c"
    else
      echo "no hits" >&2
    fi
    rm /tmp/truerItem$$
  else
    perl <(( commentskip; echo "$emptyActions" ; $cmd ; $truer --structure ) | tru -q ) -- $*
  fi
}
commentskip()
{
  if ! (( opt_s )) ; then
    return
  fi
  echo "READ"
  echo "  if (/^#/) {"
  echo "    return 1;"
  echo "  }"
}
singleAction()
{
  echo    "actions"
  echo    "  $action"
  echo    "    >"
  echo -e "\t$opt_a\n"
}
multipleActions()
{
  {
    while read action ; do
      singleAction
    done
  } < $opt_f
}
main "$@"
