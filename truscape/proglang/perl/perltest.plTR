VERSION	3.0
doc	about this program
  this program does not serve any special purpose xcept for testing perl_tru

  above line is intentionally left empty
package	Strull
require	"AutoLoader.pm"
  "AutoSplit.pm"
VERSION	3.0a
require
  "Benchmark.pm"
use	Date::Manip qw(ParseDate DateCalc UnixDate)
perl code
	$varwithtextacrossmultiplelines = "pure perl-code can be produced
	 as you can see here
	  You could not write such a thing as statement, since a ; would
	  be appended to each line
	   These lines can be on every indent (starting from the tab position after perl code.
	     Indent is taken relative to the perl code statement
	  Even tabs					will be left	as given
	  	including tabs at the beginning
	  ";

vars
  $i=0									Test statement
  $a=0

BEGIN	$x1=1
  $x2=2

END
  $x3=3

usage	perltest arg
	this program only serves as a test-suite
	it does *NOT* do anything use- or harmfull
	It simply shows the possibilities
	 You can have any indent here
	  1
	       2
	      3
	     4
		 6
	         6
	Tables look like this
	1	2
	11	22
	111	222
	1111	2222
	11111	22222
	111111	222222
	1111111	2222222

        Text may have a quote (' or ") or other special characters as $. or @ARGV
main
  require "AutoLoader.pm"					was a problem once
  usage unless @ARGV
  $b=0
  $c=0
  "Running\n"
  Option							Test Option
    a			Run with option a
	more description for option a
      $a=1							Test case for Option
    b:outname[/tmp/perltest.out]	write output to file outname
	more description for option b
      $b=1
      perl code
        print "you gave me arg b
	  thank you very much\n";
    d			Just accept this for later usage. Text may have a quote (' or ") or other special characters as $. or @ARGV
    t			Run test
      test(3,4,(5,6))
    s:file[]		output file	$st="ts"
  "-a\t$opt_a\n"
  "-b\t$opt_b\n"
  "-c\t$opt_c\n"
  "-d\t$opt_d\n"
  "-t\t$opt_t\n"
  "-s\t$opt_s\n"
  ?	$a == 1		"a is one\n"		"a is not one\n"
  ?	$a == 2		"a is two\n"		"a is not two\n"
  ?	$a == 3		"a is three\n"
  ?-	$a == 4		"a is four\n"
  !	$a == 0		"a is not null\n"
  -			"a is null\n"
  F	$i=0;$i<70;$i+=10
    ??	$i && $i	0
      <  3	"$i smaller 30\n"		check for 10..30
      == 4	"$i equal fourty\n"		check for 40
        ??	$i ==
	  0	"  i is zero\n"
	  -	"  i is not zero\n"
      >  4	"$i greater fourty\n"		check for 50...
      -		"$i not matched\n"
  !	$a	"Testing negated test\n"
    "You did not give me a a\n"
  ?	$b								# Test if
    loop: F	$i=0;$i<5;$i++
      $j = $i*$i
      F	$k=0;$k<=$i;$k++
	"."
        next loop if $k == 2
      " $i : $j\n"
    W	$i--	" $i\n"
    $i=5
    # a comment here
    W	$i
      "i : $i\n"
    continue	$j--
      $i--
    AnotherLabel : W	$i++<5	"$i\n"
  ?-	$a
    "Thank's for the a\n"
    back:
      F	$i (1,2,3)
	$j += $i
      $i = 4
      F	my $i=10...20	"Nr : $i"
      U	!$i
	"$i"
	$i--
  -									# Test else
    STDERR "you did not give me a b\n"
  vars
    local ($i,$j,$k)
      "ich"
      "du"
      "er"
    my @l
      "wir"
      "ihr"
      "sie"
    %m
      one => "eins"
      two => "zwei"
  "$i:$j:$k\n"
  "@l\n"
  "$m{two}\n"
  local(
    $B,		a big b
    $C );	a big c
  $x =
    "one".
    'two';
  R	a,'$b'
    print(	);
  R	1..3,7	# a block for 	
    print (	);
    print (	); # code for the 	 function
    print (	); # we have trailing tab 	

# comments as usual are possible

test	$scalar1,$scalar2,@array
    this function has a nice name
    Author	me
  "called test()\n"
  "scalar1 = $scalar1\n"
  "scalar2 = $scalar2\n"
  "array = @array\n"
  $a = "(..)"	##PURE##

another_function	\@$$@
  "this function is never called\n"
  #and here is a comment with	some	tabsepareted	fields
  M;	#	2
    a	b
    c	d
  M_	#	2
    a	b
    c	d
  foo(..)
    1
    2
    [..]
      3
      4
      {..}
        a	"b"
        c	"d"
      sub	$txt
	  comments possible
        return ":$txt:"
      5
foo
  print "$_[2][2]{a}\n"
  print $_[2][3]("jubel")
