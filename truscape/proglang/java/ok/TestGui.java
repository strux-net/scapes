//
// Autogenerated from java_tru using TestGui.javaTR
// do not edit this file, look for TestGui.javaTR and change this
// or you may loose all your changes and probably choose the wrong method.
// goto http://www.strux.net to find more information.
//
import gnu.getopt.Getopt;
// based on TestGui.javaTR , version : 3.0
import java.io.*;
import javax.swing.*;
import java.util.*;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.border.LineBorder;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import org.jdesktop.application.SingleFrameApplication;
public class TestGui extends SingleFrameApplication {
  private MyTable myTable1;
  private MyTable anotherTable;
  private JTabbedPane jTabbedPane1;
  private JPanel jPanel1;
  private BorderLayout jPanel1Layout;
  private JSplitPane jSplitPane1;
  private JSplitPane jSplitPane2;
  private JPanel jPanel2;
  private JSplitPane jSplitPane3;
  private JPanel truerStructureTextPane;
  private JScrollPane jScrollPane1;
  private JPanel insideJScrollPane;
  private JSplitPane jSplitPane4;
  private JPanel truerOutTextPane;
  private JPanel truerErrTextPane;
  private JPanel truerStatusPanel;
  private FlowLayout truerStatusPanelLayout;
  private JTextField statusTextField;
  private JPanel myJPanel;
  private FlowLayout myJPanelLayout;
  private JLabel truerNameLabel;
  private JTextField truerNameTextField;
  private JLabel inFileLabel;
  private JTextField inFileTextField;
  private JCheckBox autoFollowCheckBox;
  private JPanel jPanel3;
  private BorderLayout jPanel3Layout;
  private JTextField rulesTextField;
  private JPanel jPanel4;
  private BorderLayout jPanel4Layout;
  private JPanel myTruerPanel;
  private FlowLayout myTruerPanelLayout;
  private JButton autoScanjButton;
  private JComboBox truerComboBox;
  private JPanel jPanel5;
  private BorderLayout jPanel5Layout;
  private JTabbedPane jTabbedPane2;
  private JPanel truer1;
  private BorderLayout truer1Layout;
  private JComboBox inner1ComboBox;
  private JTabbedPane jTabbedPane3;
  private JSplitPane truer3;
  private JPanel jPanel6;
  private BorderLayout jPanel6Layout;
  private JToolBar jToolBar1;
  private JButton runButton;
  private JButton closeButton;
  private JButton unHighlightButton;
  private JSeparator jSeparator1;
  // private vars
  private JPanel topPanel;
  // public vars
  public enum name {
    badColor,
    goodColor,
  };
  @Override
  protected void startup() {
    {
      topPanel = new JPanel();
      topPanel.setLayout(new BorderLayout());
    }
      myTable1 = new MyTable(3);
      {
        topPanel.add(myTable1);
        myTable1.setName("myTable1");
      }
      anotherTable = new MyTable(4);
      {
        topPanel.add(anotherTable);
        anotherTable.setName("anotherTable");
      }
      jTabbedPane1 = new JTabbedPane();
      {
        topPanel.add(jTabbedPane1, BorderLayout.CENTER);
        jTabbedPane1.setName("jTabbedPane1");
        jPanel1 = new JPanel();
        {
          jPanel1Layout = new BorderLayout();
          jPanel1.setLayout(jPanel1Layout);
          jPanel1.setName("jPanel1");
          jTabbedPane1.addTab("Run", null, jPanel1, null);
          jSplitPane1 = new JSplitPane();
          {
            jPanel1.add(jSplitPane1, BorderLayout.CENTER);
            jSplitPane1.setName("jSplitPane1");
            jSplitPane1.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
            jSplitPane2 = new JSplitPane();
            {
              jSplitPane1.add(jSplitPane2, JSplitPane.LEFT);
              jSplitPane2.setName("jSplitPane2");
              jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
              jPanel2 = new JPanel();
              {
                jSplitPane2.add(jPanel2, JSplitPane.TOP);
                jPanel2.setName("jPanel2");
              }
              jSplitPane3 = new JSplitPane();
              {
                jSplitPane2.add(jSplitPane3, JSplitPane.BOTTOM);
                jSplitPane3.setName("jSplitPane3");
                jSplitPane3.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
                truerStructureTextPane = new JPanel();
                {
                  jSplitPane3.add(truerStructureTextPane, JSplitPane.LEFT);
                  truerStructureTextPane.setName("truerStructureTextPane");
                }
                {
                  jSplitPane3.add(truerActionsTextPane, JSplitPane.RIGHT);
                  truerActionsTextPane.setName("truerActionsTextPane");
                }
                jScrollPane1 = new JScrollPane();
                {
                  jSplitPane3.add(jScrollPane1, JSplitPane.RIGHT);
                  jScrollPane1.setName("jScrollPane1");
                  insideJScrollPane = new JPanel();
                  {
                    jScrollPane1.setViewportView(insideJScrollPane);
                    insideJScrollPane.setName("insideJScrollPane");
                  }
                }
              }
            }
            jSplitPane4 = new JSplitPane();
            {
              jSplitPane1.add(jSplitPane4, JSplitPane.RIGHT);
              jSplitPane4.setName("jSplitPane4");
              jSplitPane4.setOrientation(JSplitPane.VERTICAL_SPLIT);
              truerOutTextPane = new JPanel();
              {
                jSplitPane4.add(truerOutTextPane, JSplitPane.TOP);
                truerOutTextPane.setName("truerOutTextPane");
              }
              truerErrTextPane = new JPanel();
              {
                jSplitPane4.add(truerErrTextPane, JSplitPane.BOTTOM);
                truerErrTextPane.setName("truerErrTextPane");
              }
            }
          }
          truerStatusPanel = new JPanel();
          {
            jPanel1.add(truerStatusPanel, BorderLayout.SOUTH);
            truerStatusPanelLayout = new FlowLayout();
            truerStatusPanel.setLayout(truerStatusPanelLayout);
            truerStatusPanel.setName("truerStatusPanel");
            statusTextField = new JTextField();
            {
              truerStatusPanel.add(statusTextField);
              statusTextField.setName("statusTextField");
            }
            {
              truerStatusPanelLayout.setAlignment(FlowLayout.LEFT);
            }
          }
          myJPanel = new JPanel();
          {
            jPanel1.add(myJPanel, BorderLayout.NORTH);
            myJPanelLayout = new FlowLayout();
            myJPanel.setLayout(myJPanelLayout);
            myJPanel.setName("myJPanel");
            truerNameLabel = new JLabel();
            {
              myJPanel.add(truerNameLabel);
              truerNameLabel.setName("truerNameLabel");
            }
            truerNameTextField = new JTextField();
            {
              myJPanel.add(truerNameTextField);
              truerNameTextField.setName("truerNameTextField");
            }
            inFileLabel = new JLabel();
            {
              myJPanel.add(inFileLabel);
              inFileLabel.setName("inFileLabel");
            }
            inFileTextField = new JTextField();
            {
              myJPanel.add(inFileTextField);
              inFileTextField.setName("inFileTextField");
            }
            autoFollowCheckBox = new JCheckBox();
            {
              myJPanel.add(autoFollowCheckBox);
              autoFollowCheckBox.setName("autoFollowCheckBox");
            }
            {
              myJPanelLayout.setAlignment(FlowLayout.LEFT);
            }
          }
          jPanel3 = new JPanel();
          {
            jPanel1.add(jPanel3, BorderLayout.SOUTH);
            jPanel3Layout = new BorderLayout();
            jPanel3.setLayout(jPanel3Layout);
            jPanel3.setName("jPanel3");
            rulesTextField = new JTextField();
            {
              jPanel3.add(rulesTextField);
              rulesTextField.setName("rulesTextField");
            }
          }
        }
        jPanel4 = new JPanel();
        {
          jPanel4Layout = new BorderLayout();
          jPanel4.setLayout(jPanel4Layout);
          jPanel4.setName("jPanel4");
          jTabbedPane1.addTab("truer", null, jPanel4, null);
          myTruerPanel = new JPanel();
          {
            jPanel4.add(myTruerPanel, BorderLayout.NORTH);
            myTruerPanelLayout = new FlowLayout();
            myTruerPanel.setLayout(myTruerPanelLayout);
            myTruerPanel.setName("myTruerPanel");
            autoScanjButton = new JButton();
            {
              myTruerPanel.add(autoScanjButton);
              autoScanjButton.setName("autoScanjButton");
            }
            truerComboBox = new JComboBox();
            {
              truerComboBox.setPreferredSize(new java.awt.Dimension(343,24));
              myTruerPanel.add(truerComboBox);
              truerComboBox.setName("truerComboBox");
            }
            {
              myTruerPanelLayout.setAlignment(FlowLayout.RIGHT);
            }
          }
        }
        jPanel5 = new JPanel();
        {
          jPanel5Layout = new BorderLayout();
          jPanel5.setLayout(jPanel5Layout);
          jPanel5.setName("jPanel5");
          jTabbedPane1.addTab("test", null, jPanel5, null);
          jTabbedPane2 = new JTabbedPane();
          {
            jPanel5.add(jTabbedPane2, BorderLayout.CENTER);
            jTabbedPane2.setName("jTabbedPane2");
            truer1 = new JPanel();
            {
              truer1Layout = new BorderLayout();
              truer1.setLayout(truer1Layout);
              truer1.setName("truer1");
              jTabbedPane2.addTab("Inner1", null, truer1, null);
              inner1ComboBox = new JComboBox();
              {
                truer1.add(inner1ComboBox);
                inner1ComboBox.setName("inner1ComboBox");
              }
            }
            jTabbedPane3 = new JTabbedPane();
            {
              jTabbedPane3.setName("jTabbedPane3");
              jTabbedPane2.addTab("Inner2", null, jTabbedPane3, null);
            }
            truer3 = new JSplitPane();
            {
              truer3.setName("truer3");
              jTabbedPane2.addTab("Inner3", null, truer3, null);
            }
          }
        }
      }
      jPanel6 = new JPanel();
      {
        topPanel.add(jPanel6, BorderLayout.NORTH);
        jPanel6Layout = new BorderLayout();
        jPanel6.setLayout(jPanel6Layout);
        jPanel6.setName("jPanel6");
        jToolBar1 = new JToolBar();
        {
          jPanel6.add(jToolBar1, BorderLayout.CENTER);
          jToolBar1.setName("jToolBar1");
          runButton = new JButton();
          {
            jToolBar1.add(runButton);
            runButton.setName("runButton");
          }
          closeButton = new JButton();
          {
            jToolBar1.add(closeButton);
            closeButton.setName("closeButton");
          }
          unHighlightButton = new JButton();
          {
            jToolBar1.add(unHighlightButton);
            unHighlightButton.setName("unHighlightButton");
          }
        }
        jSeparator1 = new JSeparator();
        {
          jPanel6.add(jSeparator1, BorderLayout.SOUTH);
          jSeparator1.setName("jSeparator1");
        }
      }
    JMenuBar menuBar = new JMenuBar();
    {
      JMenu fileMenu = new JMenu();
      menuBar.add(fileMenu);
      fileMenu.setName("fileMenu");
      {
        JMenuItem runMenuItem = new JMenuItem();
        runMenuItem.setName("runMenuItem");
        fileMenu.add(runMenuItem);
        runMenuItem.addActionListener(new ActionListener() {
                                          public void actionPerformed(ActionEvent evt) {
                                            runButtonActionPerformed(evt);
                                          }
                                        }
                                       );
      }
      {
        JMenuItem closeMenuItem = new JMenuItem();
        closeMenuItem.setName("closeMenuItem");
        fileMenu.add(closeMenuItem);
        closeMenuItem.addActionListener(new ActionListener() {
                                          public void actionPerformed(ActionEvent evt) {
                                            closeMenuItemActionPerformed(evt);
                                          }
                                        }
                                       );
      }
    }
    {
      JMenu editMenu = new JMenu();
      menuBar.add(editMenu);
      editMenu.setName("editMenu");
      {
        JMenuItem unHighlightMenuItem = new JMenuItem();
        unHighlightMenuItem.setName("unHighlightMenuItem");
        editMenu.add(unHighlightMenuItem);
        unHighlightMenuItem.addActionListener(new ActionListener() {
                                          public void actionPerformed(ActionEvent evt) {
                                            unHighlightButtonActionPerformed(evt);
                                          }
                                        }
                                       );
      }
    }
    getMainFrame().setJMenuBar(menuBar);
    show(topPanel);
    editOrViewButton.setText("View -> Edit");
    editOrViewButton.setMnemonic(KeyEvent.VK_E);
    
    saveChangesButton.setText("Save changes");
    saveChangesButton.setMnemonic(KeyEvent.VK_S);
    
    refreshButton.setText("Refresh");
    refreshButton.setMnemonic(KeyEvent.VK_R);
    
    detailsButton.setText("Details");
    detailsButton.setMnemonic(KeyEvent.VK_D);
    
    newEntryButton.setText("New Entry");
    newEntryButton.setMnemonic(KeyEvent.VK_N);
    
    table.getTableHeader().addMouseListener(new MouseAdapter() {
      /**
      *  The MouseListeners
      */
      public void mouseClicked(MouseEvent evt) {
        mouseActionPerformed(evt);
      }
      public void mouseExited(MouseEvent evt) {
      }
      public void mousePressed(MouseEvent evt) {
      }
      public void mouseReleased(MouseEvent evt) {
        if (columnMoving) {
          output.append("column moved\n");
          columnMoving = false;
          details.structureChanged();
          details.refresh();
        }
      }
      public void mouseEntered(MouseEvent evt) {
      }
    });
    table.getModel().addTableModelListener(new TableModelListener() {
      public void tableChanged(TableModelEvent e) {
      }
    });
    table.getColumnModel().addColumnModelListener(new TableColumnModelListener() {
      public void columnAdded(TableColumnModelEvent e) {
      }
      public void columnRemoved(TableColumnModelEvent e) {
      }
      public void columnMoved(TableColumnModelEvent e) {
        columnMoving = true;
      }
      public void columnMarginChanged(ChangeEvent e) {
      }
      public void columnSelectionChanged(ListSelectionEvent e) {
      }
    });
  }
  static void usage()
  {
    System.err.println("usage : ctest");
    System.err.println("this program only serves as a test-suite");
    System.err.println("");
    System.err.println("It does nothing useful");
    System.err.println("OPTIONS:");
    System.err.println("	-a	Option a");
    System.err.println("	        description for option a");
    System.err.println("	          more description for option a");
    System.err.println("	-b	Option b");
    System.err.println("	        description for option b");
    System.err.println("	-f=file	file name");
    System.err.println("		default for file is /tmp/schrott");
    System.err.println("	-n=nr	a int");
    System.err.println("		default for nr is 3");
    System.err.println("	-f=nr	a float");
    System.err.println("		default for nr is 1.2");
    System.err.println("	-t	Option t");
    System.err.println("	        This method ...");
    System.err.println("	        blah, blah");
    System.exit(1);
  }
  /**
  *  a documentation for this method
  *    with umlauts äöüÄÖÜ& and < as well as >
  */
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      System.out.println("  TestGui.javaTR	3.0");
      return;
    }
    if (argv.length == 1 && argv[0].equals("-?")) {
      usage();
    }
    int opt_a = 0;
    int opt_b = 0;
    String opt_f = "/tmp/schrott";
    int opt_n = 3;
    float opt_f = 1.2f;
    int opt_t = 0;
    Getopt option = new Getopt("TestGui.javaTR", argv,"tf:n:f:ba");
    int optchar;
    option.setOpterr(false); // We'll do our own error handling
    while ((optchar = option.getopt()) != -1) {
      // -a : Option a
      if (optchar == 'a') {
        opt_a++;
        a=1;
      }
      // -b : Option b
      if (optchar == 'b') {
        opt_b++;
        b=1;
        a=0;
      }
      // -f : file name
      if (optchar == 'f') {
        opt_f = option.getOptarg();
      }
      // -n : a int
      if (optchar == 'n') {
        opt_n = Integer.parseInt(option.getOptarg());
      }
      // -f : a float
      if (optchar == 'f') {
        opt_f = Float.valueOf(option.getOptarg());
      }
      // -t : Option t
      if (optchar == 't') {
        opt_t++;
        test(3,4);
      }
      if (optchar == '?') {
        System.err.println("Unknown option " + (char)option.getOptopt());
        usage();
      }
    }
    launch(TestGui.class, argv);
    b.c=1;
    b.d=2;                                         // comment
    b.e.f=3;
    b.e.g=4;
    b.h.i=5;
    b.h.j=6;
  }
  private void runButtonActionPerformed(ActionEvent evt) {
  }
  private void closeMenuItemActionPerformed(ActionEvent evt) {
  }
  private void unHighlightButtonActionPerformed(ActionEvent evt) {
  }
}
