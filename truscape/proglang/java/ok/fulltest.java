//
// Autogenerated from java_tru using fulltest.javaTR
// do not edit this file, look for fulltest.javaTR and change this
// or you may loose all your changes and probably choose the wrong method.
// goto http://www.strux.net to find more information.
//
// based on fulltest.javaTR , version : 3.0
//: c03:AllOps.java
// Tests all the operators on all the primitive data types
// to show which ones are accepted by the Java compiler.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
public class AllOps {
  // To accept the results of a boolean test:
  void f(boolean b) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:b="+b);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  void boolTest(boolean x, boolean y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.boolTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    //! x = x * y
    //! x = x / y
    //! x = x % y
    //! x = x + y
    //! x = x - y
    //! x++
    //! x--
    //! x = +y
    //! x = -y
    // Relational and logical:
    //! f(x > y)
    //! f(x >= y)
    //! f(x < y)
    //! f(x <= y)
    f(x == y);
    f(x != y);
    f(!y);
    x = x && y;
    x = x || y;
    // Bitwise operators:
    //! x = ~y
    x = x & y;
    x = x | y;
    x = x ^ y;
    //! x = x << 1
    //! x = x >> 1
    //! x = x >>> 1
    // Compound assignment:
    //! x += y
    //! x -= y
    //! x *= y
    //! x /= y
    //! x %= y
    //! x <<= 1
    //! x >>= 1
    //! x >>>= 1
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! char c = (char)x
    //! byte B = (byte)x
    //! short s = (short)x
    //! int i = (int)x
    //! long l = (long)x
    //! float f = (float)x
    //! double d = (double)x
  }
  void charTest(char x, char y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.charTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = (char)(x * y);
    x = (char)(x / y);
    x = (char)(x % y);
    x = (char)(x + y);
    x = (char)(x - y);
    x++;
    x--;
    x = (char)+y;
    x = (char)-y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    x= (char)~y;
    x = (char)(x & y);
    x  = (char)(x | y);
    x = (char)(x ^ y);
    x = (char)(x << 1);
    x = (char)(x >> 1);
    x = (char)(x >>> 1);
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x <<= 1;
    x >>= 1;
    x >>>= 1;
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! boolean b = (boolean)x
    byte B = (byte)x;
    short s = (short)x;
    int i = (int)x;
    long l = (long)x;
    float f = (float)x;
    double d = (double)x;
  }
  void byteTest(byte x, byte y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.byteTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = (byte)(x* y);
    x = (byte)(x / y);
    x = (byte)(x % y);
    x = (byte)(x + y);
    x = (byte)(x - y);
    x++;
    x--;
    x = (byte)+ y;
    x = (byte)- y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    x = (byte)~y;
    x = (byte)(x & y);
    x = (byte)(x | y);
    x = (byte)(x ^ y);
    x = (byte)(x << 1);
    x = (byte)(x >> 1);
    x = (byte)(x >>> 1);
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x <<= 1;
    x >>= 1;
    x >>>= 1;
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    short s = (short)x;
    int i = (int)x;
    long l = (long)x;
    float f = (float)x;
    double d = (double)x;
  }
  void shortTest(short x, short y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.shortTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = (short)(x * y);
    x = (short)(x / y);
    x = (short)(x % y);
    x = (short)(x + y);
    x = (short)(x - y);
    x++;
    x--;
    x = (short)+y;
    x = (short)-y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    x = (short)~y;
    x = (short)(x & y);
    x = (short)(x | y);
    x = (short)(x ^ y);
    x = (short)(x << 1);
    x = (short)(x >> 1);
    x = (short)(x >>> 1);
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x <<= 1;
    x >>= 1;
    x >>>= 1;
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    byte B = (byte)x;
    int i = (int)x;
    long l = (long)x;
    float f = (float)x;
    double d = (double)x;
  }
  void intTest(int x, int y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.intTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    x = ~y;
    x = x & y;
    x = x | y;
    x = x ^ y;
    x = x << 1;
    x = x >> 1;
    x = x >>> 1;
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x <<= 1;
    x >>= 1;
    x >>>= 1;
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    byte B = (byte)x;
    short s = (short)x;
    long l = (long)x;
    float f = (float)x;
    double d = (double)x;
  }
  void longTest(long x, long y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.longTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    x = ~y;
    x = x & y;
    x = x | y;
    x = x ^ y;
    x = x << 1;
    x = x >> 1;
    x = x >>> 1;
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x <<= 1;
    x >>= 1;
    x >>>= 1;
    x &= y;
    x ^= y;
    x |= y;
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    byte B = (byte)x;
    short s = (short)x;
    int i = (int)x;
    float f = (float)x;
    double d = (double)x;
  }
  void floatTest(float x, float y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.floatTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    //! x = ~y
    //! x = x & y
    //! x = x | y
    //! x = x ^ y
    //! x = x << 1
    //! x = x >> 1
    //! x = x >>> 1
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    //! x <<= 1
    //! x >>= 1
    //! x >>>= 1
    //! x &= y
    //! x ^= y
    //! x |= y
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    byte B = (byte)x;
    short s = (short)x;
    int i = (int)x;
    long l = (long)x;
    double d = (double)x;
  }
  void doubleTest(double x, double y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AllOps.doubleTest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Arithmetic operators:
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    // Relational and logical:
    f(x > y);
    f(x >= y);
    f(x < y);
    f(x <= y);
    f(x == y);
    f(x != y);
    //! f(!x)
    //! f(x && y)
    //! f(x || y)
    // Bitwise operators:
    //! x = ~y
    //! x = x & y
    //! x = x | y
    //! x = x ^ y
    //! x = x << 1
    //! x = x >> 1
    //! x = x >>> 1
    // Compound assignment:
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    //! x <<= 1
    //! x >>= 1
    //! x >>>= 1
    //! x &= y
    //! x ^= y
    //! x |= y
    // Casting:
    //! boolean b = (boolean)x
    char c = (char)x;
    byte B = (byte)x;
    short s = (short)x;
    int i = (int)x;
    long l = (long)x;
    float f = (float)x;
  }
}
//
// Autogenerated from java_tru using Assignment.java!
// do not edit this file, look for Assignment.java! and change this
// or you may loose all your changes and probably choose the wrong method.
// goto http://www.struX.net to find more information.
//
//: c03:Assignment.java
// Assignment with objects is a bit tricky.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Number {
  // vars
  int i;
}
public class Assignment {
  // vars
  /** initialize the Test-Monitor */
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      System.out.println("  fulltest.javaTR	3.0");
      return;
    }
    Number n1 = new Number();
    Number n2 = new Number();
    n1.i = 9;
    n2.i = 47;
    System.out.println("1: n1.i: " + n1.i + ", n2.i: " + n2.i);
    n1 = n2;
    System.out.println("2: n1.i: " + n1.i + ", n2.i: " + n2.i);
    n1.i = 27;
    System.out.println("3: n1.i: " + n1.i + ", n2.i: " + n2.i);
    //// Hand written stuff	5
monitor.expect(new String[] {
  "1: n1.i: 9, n2.i: 47",
  "2: n1.i: 47, n2.i: 47",
  "3: n1.i: 27, n2.i: 27"
});
    //// Resuming generated code
  }
}
//: c03:AutoInc.java
// Demonstrates the ++ and -- operators.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class AutoInc {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int i = 1;
    System.out.println("i : " + i);
    System.out.println("++i : " + ++i);            // Pre-increment
    System.out.println("i++ : " + i++);            // Post-increment
    System.out.println("i : " + i);
    System.out.println("--i : " + --i);            // Pre-decrement
    System.out.println("i-- : " + i--);            // Post-decrement
    System.out.println("i : " + i);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "i : 1",
      "++i : 2",
      "i++ : 2",
      "i : 3",
      "--i : 2",
      "i-- : 2",
      "i : 1"
    });
    //// Resuming generated code
  }
}
//: c03:BitManipulation.java
// Using the bitwise operators.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
import java.util.*;
public class BitManipulation {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Random rand = new Random();
    int i = rand.nextInt();
    int j = rand.nextInt();
    printBinaryInt("-1", -1);                      // 11111111111111111111111111111111 32 Bit
    printBinaryInt("+1", +1);                      // 00000000000000000000000000000001 32 Bit
    int maxpos = 2147483647;
    printBinaryInt("maxpos", maxpos);              // 01111111111111111111111111111111 32 Bit
    int maxneg = -2147483648;
    printBinaryInt("maxneg", maxneg);              // 10000000000000000000000000000000 32 Bit
    printBinaryInt("i", i);
    printBinaryInt("~i", ~i);
    printBinaryInt("-i", -i);
    printBinaryInt("j", j);
    printBinaryInt("i & j", i & j);
    printBinaryInt("i | j", i | j);
    printBinaryInt("i ^ j", i ^ j);
    printBinaryInt("i << 5", i << 5);
    printBinaryInt("i >> 5", i >> 5);
    printBinaryInt("(~i) >> 5", (~i) >> 5);
    printBinaryInt("i >>> 5", i >>> 5);
    printBinaryInt("(~i) >>> 5", (~i) >>> 5);
    long l = rand.nextLong();
    long m = rand.nextLong();
    printBinaryLong("-1L", -1L);                   // 1111111111111111111111111111111111111111111111111111111111111111 64 Bit
    printBinaryLong("+1L", +1L);                   // 0000000000000000000000000000000000000000000000000000000000000001 64 Bit
    long ll = 9223372036854775807L;
    printBinaryLong("maxpos", ll);                 // 0111111111111111111111111111111111111111111111111111111111111111 64 Bit
    long lln = -9223372036854775808L;
    printBinaryLong("maxneg", lln);                // 1000000000000000000000000000000000000000000000000000000000000000 64 Bit
    printBinaryLong("l", l);
    printBinaryLong("~l", ~l);
    printBinaryLong("-l", -l);
    printBinaryLong("m", m);
    printBinaryLong("l & m", l & m);
    printBinaryLong("l | m", l | m);
    printBinaryLong("l ^ m", l ^ m);
    printBinaryLong("l << 5", l << 5);
    printBinaryLong("l >> 5", l >> 5);
    printBinaryLong("(~l) >> 5", (~l) >> 5);
    printBinaryLong("l >>> 5", l >>> 5);
    printBinaryLong("(~l) >>> 5", (~l) >>> 5);
    monitor.expect("BitManipulation.out");
  }
  static void printBinaryInt(String s, int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BitManipulation.printBinaryInt");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println( s + ", int: " + i + ", binary: ");
    System.out.print("   ");
    for (int j = 31; j >= 0; j--) {
      if (((1 << j) &  i) != 0) {
        System.out.print("1");
      } else {
        System.out.print("0");
      }
    }
    System.out.println();
  }
  static void printBinaryLong(String s, long l) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BitManipulation.printBinaryLong");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:l="+l);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println( s + ", long: " + l + ", binary: ");
    System.out.print("   ");
    for (int i = 63; i >= 0; i--) {
      if (((1L << i) & l) != 0) {
        System.out.print("1");
      } else {
        System.out.print("0");
      }
    }
    System.out.println();
  }
}
//: c03:Bool.java
// Relational and logical operators.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
import java.util.*;
public class Bool {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Random rand = new Random();
    int i = rand.nextInt(100);
    int j = rand.nextInt(100);
    System.out.println("i = " + i);
    System.out.println("j = " + j);
    System.out.println("i > j is " + (i > j));
    System.out.println("i < j is " + (i < j));
    System.out.println("i >= j is " + (i >= j));
    System.out.println("i <= j is " + (i <= j));
    System.out.println("i == j is " + (i == j));
    System.out.println("i != j is " + (i != j));
    // Treating an int as a boolean is not legal Java:
    //! System.out.println("i && j is " + (i && j))
    //! System.out.println("i || j is " + (i || j))
    //! System.out.println("!i is " + !i)
    System.out.println("(i < 10) && (j < 10) is " + ((i < 10) && (j < 10)));
    System.out.println("(i < 10) || (j < 10) is " + ((i < 10) || (j < 10)));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "%% i = -?\\d+",
      "%% j = -?\\d+",
      "%% i > j is (true|false)",
      "%% i < j is (true|false)",
      "%% i >= j is (true|false)",
      "%% i <= j is (true|false)",
      "%% i == j is (true|false)",
      "%% i != j is (true|false)",
      "%% \\(i < 10\\) && \\(j < 10\\) is (true|false)",
      "%% \\(i < 10\\) \\|\\| \\(j < 10\\) is (true|false)"
    });
    //// Resuming generated code
  }
}
//: c03:BreakAndContinue.java
// Demonstrates break and continue keywords.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class BreakAndContinue {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 100; i++) {
      if (i == 74) {
        break;    // Out of for loop;
      }
      if (i % 9 != 0) {
        continue; // Next iteration;
      }
      System.out.println(i);
    }
    int i = 0;
    // An "infinite loop":
    while (true) {
      i++;
      int j = i * 27;
      if (j == 1269) {
        break;    // Out of loop;
      }
      if (i % 10 != 0) {
        continue; // Top of loop;
      }
      System.out.println(i);
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "0",
      "9",
      "18",
      "27",
      "36",
      "45",
      "54",
      "63",
      "72",
      "10",
      "20",
      "30",
      "40"
    });
    //// Resuming generated code
  }
  //: c03:CastingNumbers.java
  // What happens when you cast a float
  // or double to an integral value?
}
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class CastingNumbers {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    double above = 0.7;
    double below = 0.4;
    System.out.println("above: " + above);
    System.out.println("below: " + below);
    System.out.println("(int)above: " + (int)above);
    System.out.println("(int)below: " + (int)below);
    System.out.println("(char)('a' + above): " + (char)('a' + above));
    System.out.println("(char)('a' + below): " + (char)('a' + below));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "above: 0.7",
      "below: 0.4",
      "(int)above: 0",
      "(int)below: 0",
      "(char)('a' + above): a",
      "(char)('a' + below): a"
    });
    //// Resuming generated code
  }
  //: c03:CommaOperator.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class CommaOperator {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 1, j = i + 10; i < 5; i++, j = i * 2) {
      System.out.println("i= " + i + " j= " + j);
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "i= 1 j= 11",
      "i= 2 j= 4",
      "i= 3 j= 6",
      "i= 4 j= 8"
    });
    //// Resuming generated code
  }
}
//: c03:EqualsMethod.java
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class EqualsMethod {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Integer n1 = new Integer(47);
    Integer n2 = new Integer(47);
    System.out.println(n1.equals(n2));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "true"
    });
    //// Resuming generated code
  }
}
//: c03:EqualsMethod2.java
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Value {
  // vars
  int i;
}
public class EqualsMethod2 {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Value v1 = new Value();
    Value v2 = new Value();
    v1.i = v2.i = 100;
    System.out.println(v1.equals(v2));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "false"
    });
    //// Resuming generated code
  }
}
//: c03:Equivalence.java
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class Equivalence {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Integer n1 = new Integer(47);
    Integer n2 = new Integer(47);
    System.out.println(n1 == n2);
    System.out.println(n1 != n2);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "false",
      "true"
    });
    //// Resuming generated code
  }
}
//: c03:IfElse.java
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class IfElse {
  // vars
  static Test monitor = new Test();
  static int test(int testval, int target) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("IfElse.test");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:testval="+testval);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:target="+target);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    int result = 0;
    if (testval > target) {
      result = +1;
    } else if (testval < target) {
      result = -1;
    } else {
      result = 0;                                  // Match
    }
    return result;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println(test(10, 5));
    System.out.println(test(5, 10));
    System.out.println(test(5, 5));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "1",
      "-1",
      "0"
    });
    //// Resuming generated code
  }
}
//: c03:IfElse2.java
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class IfElse2 {
  // vars
  static Test monitor = new Test();
  static int test(int testval, int target) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("IfElse2.test");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:testval="+testval);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:target="+target);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (testval > target) {
      return +1;
    } else if (testval < target) {
      return -1;
    } else {
      return 0;                                    // Match
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println(test(10, 5));
    System.out.println(test(5, 10));
    System.out.println(test(5, 5));
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "1",
      "-1",
      "0"
    });
    //// Resuming generated code
  }
}
//: c03:LabeledFor.java
// Java's "labeled for" loop.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class LabeledFor {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int i = 0;
    outer:
    for (; true ;) {
      inner:
      for (; i < 10; i++) {
        System.out.println("i = " + i);
        if (i == 2) {
          System.out.println("continue");
          continue;
        }
        if (i == 3) {
          System.out.println("break");
          i++;                                     // Otherwise i never gets incremented.
          break;
        }
        if (i == 7) {
          System.out.println("continue outer");
          i++;                                     // Otherwise i never gets incremented.
          continue outer;
        }
        if (i == 8) {
          System.out.println("break outer");
          break outer;
        }
        for (int k = 0; k < 5; k++) {
          if (k == 3) {
            System.out.println("continue inner");
            continue inner;
          }
        }
      }
    }
    // Can't break or continue to labels here
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "i = 0",
      "continue inner",
      "i = 1",
      "continue inner",
      "i = 2",
      "continue",
      "i = 3",
      "break",
      "i = 4",
      "continue inner",
      "i = 5",
      "continue inner",
      "i = 6",
      "continue inner",
      "i = 7",
      "continue outer",
      "i = 8",
      "break outer"
    });
    //// Resuming generated code
  }
  //: c03:LabeledWhile.java
  // Java's "labeled while" loop.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class LabeledWhile {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int i = 0;
    outer:
    while (true) {
      System.out.println("Outer while loop");
      while (true) {
        i++;
        System.out.println("i = " + i);
        if (i == 1) {
          System.out.println("continue");
          continue;
        }
        if (i == 3) {
          System.out.println("continue outer");
          continue outer;
        }
        if (i == 5) {
          System.out.println("break");
          break;
        }
        if (i == 7) {
          System.out.println("break outer");
          break outer;
        }
      }
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Outer while loop",
      "i = 1",
      "continue",
      "i = 2",
      "i = 3",
      "continue outer",
      "Outer while loop",
      "i = 4",
      "i = 5",
      "break",
      "Outer while loop",
      "i = 6",
      "i = 7",
      "break outer"
    });
    //// Resuming generated code
  }
}
//: c03:ListCharacters.java
// Demonstrates "for" loop by listing
// all the lowercase ASCII letters.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class ListCharacters {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 128; i++) {
      if (Character.isLowerCase((char)i)) {
        System.out.println("value: " + i + " character: " + (char)i);
      }
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "value: 97 character: a",
      "value: 98 character: b",
      "value: 99 character: c",
      "value: 100 character: d",
      "value: 101 character: e",
      "value: 102 character: f",
      "value: 103 character: g",
      "value: 104 character: h",
      "value: 105 character: i",
      "value: 106 character: j",
      "value: 107 character: k",
      "value: 108 character: l",
      "value: 109 character: m",
      "value: 110 character: n",
      "value: 111 character: o",
      "value: 112 character: p",
      "value: 113 character: q",
      "value: 114 character: r",
      "value: 115 character: s",
      "value: 116 character: t",
      "value: 117 character: u",
      "value: 118 character: v",
      "value: 119 character: w",
      "value: 120 character: x",
      "value: 121 character: y",
      "value: 122 character: z"
    });
    //// Resuming generated code
  }
  //: c03:Literals.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Literals {
  // vars
  /** max char hex value */
  char c = 0xffff;
  /** max byte hex value */
  byte b = 0x7f;
  /** max short hex value */
  short s = 0x7fff;
  /** Hexadecimal (lowercase) */
  int i1 = 0x2f;
  /** Hexadecimal (uppercase) */
  int i2 = 0X2F;
  /** Octal (leading zero) */
  int i3 = 0177;
  // Hex and Oct also work with long.
  /** long suffix */
  long n1 = 200L;
  /** long suffix (but can be confusing) */
  long n2 = 200l;
  long n3 = 200;
  //! long l6(200)	not allowed
  float f1 = 1;
  /** float suffix */
  float f2 = 1F;
  /** float suffix */
  float f3 = 1f;
  /** 10 to the power */
  float f4 = 1e-45f;
  /** float suffix */
  float f5 = 1e+9f;
  /** double suffix */
  double d1 = 1d;
  /** double suffix */
  double d2 = 1D;
  /** 10 to the power */
  double d3 = 47e47d;
}
//: c03:MathOps.java
// Demonstrates the mathematical operators.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
import java.util.*;
public class MathOps {
  // vars
  static Test monitor = new Test();
  // Shorthand to print a string and an int:
  static void printInt(String s, int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MathOps.printInt");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println(s + " = " + i);
  }
  // Shorthand to print a string and a float:
  static void printFloat(String s, float f) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MathOps.printFloat");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:f="+f);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println(s + " = " + f);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    // Create a random number generator,
    // seeds with current time by default:
    Random rand = new Random();
    int i, j, k;
    // Choose value from 1 to 100:
    j = rand.nextInt(100) + 1;
    k = rand.nextInt(100) + 1;
    printInt("j", j);  printInt("k", k);
    i = j + k; printInt("j + k", i);
    i = j - k; printInt("j - k", i);
    i = k / j; printInt("k / j", i);
    i = k * j; printInt("k * j", i);
    i = k % j; printInt("k % j", i);
    j %= k; printInt("j %= k", j);
    // Floating-point number tests:
    float u,v,w;                                   // applies to doubles, too
    v = rand.nextFloat();
    w = rand.nextFloat();
    printFloat("v", v); printFloat("w", w);
    u = v + w; printFloat("v + w", u);
    u = v - w; printFloat("v - w", u);
    u = v * w; printFloat("v * w", u);
    u = v / w; printFloat("v / w", u);
    // the following also works for
    // char, byte, short, int, long,
    // and double:
    u += v; printFloat("u += v", u);
    u -= v; printFloat("u -= v", u);
    u *= v; printFloat("u *= v", u);
    u /= v; printFloat("u /= v", u);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "%% j = -?\\d+",
      "%% k = -?\\d+",
      "%% j \\+ k = -?\\d+",
      "%% j - k = -?\\d+",
      "%% k / j = -?\\d+",
      "%% k \\* j = -?\\d+",
      "%% k % j = -?\\d+",
      "%% j %= k = -?\\d+",
      "%% v = -?\\d+\\.\\d+(E-?\\d)?",
      "%% w = -?\\d+\\.\\d+(E-?\\d)?",
      "%% v \\+ w = -?\\d+\\.\\d+(E-?\\d)??",
      "%% v - w = -?\\d+\\.\\d+(E-?\\d)??",
      "%% v \\* w = -?\\d+\\.\\d+(E-?\\d)??",
      "%% v / w = -?\\d+\\.\\d+(E-?\\d)??",
      "%% u \\+= v = -?\\d+\\.\\d+(E-?\\d)??",
      "%% u -= v = -?\\d+\\.\\d+(E-?\\d)??",
      "%% u \\*= v = -?\\d+\\.\\d+(E-?\\d)??",
      "%% u /= v = -?\\d+\\.\\d+(E-?\\d)??"
    });
    //// Resuming generated code
  }
}
//: c03:Overflow.java
// Surprise! Java lets you overflow.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class Overflow {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int big = 0x7fffffff;                          // max int value
    System.out.println("big = " + big);
    int bigger = big * 4;
    System.out.println("bigger = " + bigger);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "big = 2147483647",
      "bigger = -4"
    });
    //// Resuming generated code
  }
}
//: c03:PassObject.java
// Passing objects to methods may not be what
// you're used to.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Letter {
  // vars
  char c;
}
public class PassObject {
  // vars
  static Test monitor = new Test();
  static void f(Letter y) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PassObject.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:y="+y);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    y.c = 'z';
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Letter x = new Letter();
    x.c = 'a';
    System.out.println("1: x.c: " + x.c);
    f(x);
    System.out.println("2: x.c: " + x.c);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "1: x.c: a",
      "2: x.c: z"
    });
    //// Resuming generated code
  }
  //: c03:RandomBounds.java
  // Does Math.random() produce 0.0 and 1.0?
  // {RunByHand}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class RandomBounds {
  static void usage() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RandomBounds.usage");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Usage: \n\t" + "RandomBounds lower\n\tRandomBounds upper");
    System.exit(1);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    if (argv.length != 1) {
      usage();
    }
    if (argv[0].equals("lower")) {
      while (Math.random() != 0.0) {
        // Keep trying
      }
      System.out.println("Produced 0.0!");
    } else if (argv[0].equals("upper")) {
      while (Math.random() != 1.0) {
        // Keep trying
      }
      System.out.println("Produced 1.0!");
    } else {
      usage();
    }
  }
}
//: c03:ShortCircuit.java
// Demonstrates short-circuiting behavior.
// with logical operators.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class ShortCircuit {
  // vars
  static Test monitor = new Test();
  static boolean test1(int val) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ShortCircuit.test1");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:val="+val);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("test1(" + val + ")");
    System.out.println("result: " + (val < 1));
    return val < 1;
  }
  static boolean test2(int val) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ShortCircuit.test2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:val="+val);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("test2(" + val + ")");
    System.out.println("result: " + (val < 2));
    return val < 2;
  }
  static boolean test3(int val) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ShortCircuit.test3");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:val="+val);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("test3(" + val + ")");
    System.out.println("result: " + (val < 3));
    return val < 3;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    if (test1(0) && test2(2) && test3(2)) {
      System.out.println("expression is true");
    } else {
      System.out.println("expression is false");
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "test1(0)",
      "result: true",
      "test2(2)",
      "result: false",
      "expression is false"
    });
    //// Resuming generated code
  }
}
//: c03:URShift.java
// Test of unsigned right shift.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class URShift {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int i = -1;
    System.out.println(i >>>= 10);
    long l = -1;
    System.out.println(l >>>= 10);
    short s = -1;
    System.out.println(s >>>= 10);
    byte b = -1;
    System.out.println(b >>>= 10);
    b = -1;
    System.out.println(b>>>10);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "4194303",
      "18014398509481983",
      "-1",
      "-1",
      "4194303"
    });
    //// Resuming generated code
  }
}
//: c03:VowelsAndConsonants.java
// Demonstrates the switch statement.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
public class VowelsAndConsonants {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 100; i++) {
      char c = (char)(Math.random() * 26 + 'a');
      System.out.print(c + ": ");
      switch (c) {
        case 'a' :
        case 'e' :
        case 'i' :
        case 'o' :
        case 'u' :
        {
          System.out.println("vowel");
          break;
        }
        case 'y' :
        case 'w' :
        {
          System.out.println("Sometimes a vowel");
          break;
        }
        default :
        {
          System.out.println("consonant");
          break;
        }
      }
      //// Hand written stuff	7
      monitor.expect(new String[] {
        "%% [aeiou]: vowel|[yw]: Sometimes a vowel|" +
          "[^aeiouyw]: consonant"
      }, Test.AT_LEAST);
      //// Resuming generated code
    }
  }
  //: c03:WhileTest.java
  // Demonstrates the while loop.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class WhileTest {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    double r = 0;
    while (r < 0.99d) {
      r = Math.random();
      System.out.println(r);
      //// Hand written stuff	7
      monitor.expect(new String[] {
        "%% \\d\\.\\d+E?-?\\d*"
      }, Test.AT_LEAST);
      //// Resuming generated code
    }
  }
  //: c04:ArrayClassObj.java
  // Creating an array of nonprimitive objects.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
public class ArrayClassObj {
  // vars
  static Test monitor = new Test();
  static Random rand = new Random();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Integer[] a = new Integer[rand.nextInt(20)];
    System.out.println("length of a = " + a.length);
    for (int i = 0; i < a.length; i++) {
      a[i] = new Integer(rand.nextInt(500));
      System.out.println("a[" + i + "] = " + a[i]);
    }
    //// Hand written stuff	5
    monitor.expect(new Object[] {
      "%% length of a = \\d+",
      new TestExpression("%% a\\[\\d+\\] = \\d+", a.length)
    });
    //// Resuming generated code
  }
  //: c04:ArrayInit.java
  // Array initialization.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class ArrayInit {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    // vars
    Integer[] a = {
      new Integer(1),
      new Integer(2),
      new Integer(3),
    };
    Integer[] b = new Integer[] {
      new Integer(1),
      new Integer(2),
      new Integer(3),
    };
  }
  //: c04:ArrayNew.java
  // Creating arrays with new.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
public class ArrayNew {
  // vars
  static Test monitor = new Test();
  static Random rand = new Random();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int[] a;
    a = new int[rand.nextInt(20)];
    System.out.println("length of a = " + a.length);
    for (int i = 0; i < a.length; i++) {
      System.out.println("a[" + i + "] = " + a[i]);
    }
    //// Hand written stuff	5
    monitor.expect(new Object[] {
      "%% length of a = \\d+",
      new TestExpression("%% a\\[\\d+\\] = 0", a.length)
    });
    //// Resuming generated code
  }
  //: c04:Arrays.java
  // Arrays of primitives.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Arrays {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    int[] a1 = { 1, 2, 3, 4, 5 };
    int[] a2;
    a2 = a1;
    for (int i = 0; i < a2.length; i++) {
      a2[i]++;
    }
    for (int i = 0; i < a1.length; i++) {
      System.out.println("a1[" + i + "] = " + a1[i]);
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "a1[0] = 2",
      "a1[1] = 3",
      "a1[2] = 4",
      "a1[3] = 5",
      "a1[4] = 6"
    });
    //// Resuming generated code
  }
  //: c04:DefaultConstructor.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Bird {
  // vars
  int i;
}
public class DefaultConstructor {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Bird nc = new Bird();                          // Default!
  }
  //: c04:Demotion.java
  // Demotion of primitives and overloading.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Demotion {
  // vars
  static Test monitor = new Test();
  void f1(char x)   { System.out.println("f1(char)")   ; };
  void f1(byte x)   { System.out.println("f1(byte)")   ; };
  void f1(short x)  { System.out.println("f1(short)")  ; };
  void f1(int x)    { System.out.println("f1(int)")    ; };
  void f1(long x)   { System.out.println("f1(long)")   ; };
  void f1(float x)  { System.out.println("f1(float)")  ; };
  void f1(double x) { System.out.println("f1(double)") ; };
  void f2(char x)   { System.out.println("f2(char)")   ; };
  void f2(byte x)   { System.out.println("f2(byte)")   ; };
  void f2(short x)  { System.out.println("f2(short)")  ; };
  void f2(int x)    { System.out.println("f2(int)")    ; };
  void f2(long x)   { System.out.println("f2(long)")   ; };
  void f2(float x)  { System.out.println("f2(float)")  ; };
  void f3(char x)   { System.out.println("f3(char)")   ; };
  void f3(byte x)   { System.out.println("f3(byte)")   ; };
  void f3(short x)  { System.out.println("f3(short)")  ; };
  void f3(int x)    { System.out.println("f3(int)")    ; };
  void f3(long x)   { System.out.println("f3(long)")   ; };
  void f4(char x)   { System.out.println("f4(char)")   ; };
  void f4(byte x)   { System.out.println("f4(byte)")   ; };
  void f4(short x)  { System.out.println("f4(short)")  ; };
  void f4(int x)    { System.out.println("f4(int)")    ; };
  void f5(char x)   { System.out.println("f5(char)")   ; };
  void f5(byte x)   { System.out.println("f5(byte)")   ; };
  void f5(short x)  { System.out.println("f5(short)")  ; };
  void f6(char x)   { System.out.println("f6(char)")   ; };
  void f6(byte x)   { System.out.println("f6(byte)")   ; };
  void f7(char x)   { System.out.println("f7(char)")   ; };
  void testDouble() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Demotion.testDouble");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    double x = 0;
    System.out.println("double argument:");
    f1(x);
    f2((float)x);
    f3((long)x);
    f4((int)x);
    f5((short)x);
    f6((byte)x);
    f7((char)x);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Demotion p = new Demotion();
    p.testDouble();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "double argument:",
      "f1(double)",
      "f2(float)",
      "f3(long)",
      "f4(int)",
      "f5(short)",
      "f6(byte)",
      "f7(char)"
    });
    //// Resuming generated code
  }
  //: c04:ExplicitStatic.java
  // Explicit static initialization with the "static" clause.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Cup {
  Cup(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cup.Cup");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Cup(" + marker + ")");
  }
  void f(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cup.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f(" + marker + ")");
  }
}
class Cups {
  // vars
  static Cup c1;
  static Cup c2;
  static {
    c1 = new Cup(1);
    c2 = new Cup(2);
  }
  Cups() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cups.Cups");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Cups()");
  }
}
public class ExplicitStatic {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println("Inside main()");
    Cups.c1.f(99);                                 // (1)
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Inside main()",
      "Cup(1)",
      "Cup(2)",
      "f(99)"
    });
    //// Resuming generated code
  }
  // vars
  // static Cups x = new Cups()	(2)
  // static Cups y = new Cups()	(2)
  //: c04:Flower.java
  // Calling constructors with "this."
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Flower {
  // vars
  static Test monitor = new Test();
  int petalCount = 0;
  String s = new String("null");
  Flower(int petals) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Flower.Flower");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:petals="+petals);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    petalCount = petals;
    System.out.println("Constructor w/ int arg only, petalCount= " + petalCount);
  }
  Flower(String ss) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Flower.Flower");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:ss="+ss);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Constructor w/ String arg only, s=" + ss);
    s = ss;
  }
  Flower(String s, int petals) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Flower.Flower");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:petals="+petals);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this(petals);
    //!    this(s)	Can't call two!
    this.s = s;                                    // Another use of "this"
    System.out.println("String & int args");
  }
  Flower() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Flower.Flower");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this("hi", 47);
    System.out.println("default constructor (no args)");
  }
  void print() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Flower.print");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    //! this(11)	Not inside non-constructor!
    System.out.println("petalCount = " + petalCount + " s = "+ s);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Flower x = new Flower();
    x.print();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Constructor w/ int arg only, petalCount= 47",
      "String & int args",
      "default constructor (no args)",
      "petalCount = 47 s = hi"
    });
    //// Resuming generated code
  }
  //: c04:InitialValues.java
  // Shows default initial values.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class InitialValues {
  // vars
  static Test monitor = new Test();
  boolean t;
  char c;
  byte b;
  short s;
  int i;
  long l;
  float f;
  double d;
  void print(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InitialValues.print");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println(s);
  }
  void printInitialValues() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InitialValues.printInitialValues");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    print("Data type      Initial value");
    print("boolean        " + t);
    print("char           [" + c + "]");
    print("byte           " + b);
    print("short          " + s);
    print("int            " + i);
    print("long           " + l);
    print("float          " + f);
    print("double         " + d);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    InitialValues iv = new InitialValues();
    iv.printInitialValues();
    /* You could also say:;
    new InitialValues().printInitialValues();
    */;
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Data type      Initial value",
      "boolean        false",
      "char           [" + (char)0 + "]",
      "byte           0",
      "short          0",
      "int            0",
      "long           0",
      "float          0.0",
      "double         0.0"
    });
    //// Resuming generated code
  }
  //: c04:Leaf.java
  // Simple use of the "this" keyword.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Leaf {
  // vars
  static Test monitor = new Test();
  int i = 0;
  Leaf increment() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Leaf.increment");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    i++;
    return this;
  }
  void print() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Leaf.print");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("i = " + i);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Leaf x = new Leaf();
    x.increment().increment().increment().print();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "i = 3"
    });
    //// Resuming generated code
  }
  //: c04:Mugs.java
  // Java "Instance Initialization."
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Mug {
  Mug(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Mug.Mug");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Mug(" + marker + ")");
  }
  void f(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Mug.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f(" + marker + ")");
  }
}
public class Mugs {
  // vars
  static Test monitor = new Test();
  Mug c1;
  Mug c2;
  {
    c1 = new Mug(1);
    c2 = new Mug(2);
    System.out.println("c1 & c2 initialized");
  }
  Mugs() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Mugs.Mugs");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Mugs()");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println("Inside main()");
    Mugs x = new Mugs();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Inside main()",
      "Mug(1)",
      "Mug(2)",
      "c1 & c2 initialized",
      "Mugs()"
    });
    //// Resuming generated code
  }
  //: c04:MultiDimArray.java
  // Creating multidimensional arrays.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
public class MultiDimArray {
  // vars
  static Test monitor = new Test();
  static Random rand = new Random();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    // vars
    int[][] a1 = {
      { 1, 2, 3, },
      { 4, 5, 6, },
    };
    for (int i = 0; i < a1.length; i++) {
      for (int j = 0; j < a1[i].length; j++) {
        System.out.println("a1[" + i + "][" + j + "] = " + a1[i][j]);
      }
    }
    // 3-D array with fixed length:
    int[][][] a2 = new int[2][2][4];
    for (int i = 0; i < a2.length; i++) {
      for (int j = 0; j < a2[i].length; j++) {
        for (int k = 0; k < a2[i][j].length; k++) {
          System.out.println("a2[" + i + "][" + j + "][" + k + "] = " + a2[i][j][k]);
        }
      }
    }
    // 3-D array with varied-length vectors:
    int[][][] a3 = new int[rand.nextInt(7)][][];
    for (int i = 0; i < a3.length; i++) {
      a3[i] = new int[rand.nextInt(5)][];
      for (int j = 0; j < a3[i].length; j++) {
        a3[i][j] = new int[rand.nextInt(5)];
      }
    }
    for (int i = 0; i < a3.length; i++) {
      for (int j = 0; j < a3[i].length; j++) {
        for (int k = 0; k < a3[i][j].length; k++) {
          System.out.println("a3[" + i + "][" + j + "][" + k + "] = " + a3[i][j][k]);
        }
      }
    }
    // Array of nonprimitive objects:
    // vars
    Integer[][] a4 = {
      { new Integer(1), new Integer(2)},
      { new Integer(3), new Integer(4)},
      { new Integer(5), new Integer(6)},
    };
    for (int i = 0; i < a4.length; i++) {
      for (int j = 0; j < a4[i].length; j++) {
        System.out.println("a4[" + i + "][" + j + "] = " + a4[i][j]);
      }
    }
    Integer[][] a5;
    a5 = new Integer[3][];
    for (int i = 0; i < a5.length; i++) {
      a5[i] = new Integer[3];
      for (int j = 0; j < a5[i].length; j++) {
        a5[i][j] = new Integer(i * j);
      }
    }
    for (int i = 0; i < a5.length; i++) {
      for (int j = 0; j < a5[i].length; j++) {
        System.out.println("a5[" + i + "][" + j + "] = " + a5[i][j]);
      }
    }
    // Output test
    int ln = 0;
    for (int i = 0; i < a3.length; i++) {
      for (int j = 0; j < a3[i].length; j++) {
        for (int k = 0; k < a3[i][j].length; k++) {
          ln++;
        }
      }
    }
    //// Hand written stuff	5
    monitor.expect(new Object[] {
      "a1[0][0] = 1",
      "a1[0][1] = 2",
      "a1[0][2] = 3",
      "a1[1][0] = 4",
      "a1[1][1] = 5",
      "a1[1][2] = 6",
      new TestExpression(
        "%% a2\\[\\d\\]\\[\\d\\]\\[\\d\\] = 0", 16),
      new TestExpression(
        "%% a3\\[\\d\\]\\[\\d\\]\\[\\d\\] = 0", ln),
      "a4[0][0] = 1",
      "a4[0][1] = 2",
      "a4[1][0] = 3",
      "a4[1][1] = 4",
      "a4[2][0] = 5",
      "a4[2][1] = 6",
      "a5[0][0] = 0",
      "a5[0][1] = 0",
      "a5[0][2] = 0",
      "a5[1][0] = 0",
      "a5[1][1] = 1",
      "a5[1][2] = 2",
      "a5[2][0] = 0",
      "a5[2][1] = 2",
      "a5[2][2] = 4"
    });
    //// Resuming generated code
  }
  //: c04:OrderOfInitialization.java
  // Demonstrates initialization order.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
// When the constructor is called to create a
// Tag object, you'll see a message:
class Tag {
  Tag(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Tag.Tag");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Tag(" + marker + ")");
  }
}
class Card {
  // vars
  /** Before constructor */
  Tag t1 = new Tag(1);
  Card() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Card.Card");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Indicate we're in the constructor:
    System.out.println("Card()");
    t3 = new Tag(33);                              // Reinitialize t3
  }
  // vars
  /** After constructor */
  Tag t2 = new Tag(2);
  void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Card.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f()");
  }
  // vars
  /** At end */
  Tag t3 = new Tag(3);
}
public class OrderOfInitialization {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Card t = new Card();
    t.f();                                         // Shows that construction is done
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Tag(1)",
      "Tag(2)",
      "Tag(3)",
      "Card()",
      "Tag(33)",
      "f()"
    });
    //// Resuming generated code
  }
  //: c04:Overloading.java
  // Demonstration of both constructor
  // and ordinary method overloading.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
class Tree {
  // vars
  int height;
  Tree() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Tree.Tree");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Planting a seedling");
    height = 0;
  }
  Tree(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Tree.Tree");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Creating new Tree that is " + i + " feet tall");
    height = i;
  }
  void info() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Tree.info");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Tree is " + height + " feet tall");
  }
  void info(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Tree.info");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println(s + ": Tree is " + height + " feet tall");
  }
}
public class Overloading {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 5; i++) {
      Tree t = new Tree(i);
      t.info();
      t.info("overloaded method");
    }
    // Overloaded constructor:
    new Tree();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Creating new Tree that is 0 feet tall",
      "Tree is 0 feet tall",
      "overloaded method: Tree is 0 feet tall",
      "Creating new Tree that is 1 feet tall",
      "Tree is 1 feet tall",
      "overloaded method: Tree is 1 feet tall",
      "Creating new Tree that is 2 feet tall",
      "Tree is 2 feet tall",
      "overloaded method: Tree is 2 feet tall",
      "Creating new Tree that is 3 feet tall",
      "Tree is 3 feet tall",
      "overloaded method: Tree is 3 feet tall",
      "Creating new Tree that is 4 feet tall",
      "Tree is 4 feet tall",
      "overloaded method: Tree is 4 feet tall",
      "Planting a seedling"
    });
    //// Resuming generated code
  }
  //: c04:OverloadingOrder.java
  // Overloading based on the order of the arguments.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class OverloadingOrder {
  // vars
  static Test monitor = new Test();
  static void print(String s, int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverloadingOrder.print");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("String: " + s + ", int: " + i);
  }
  static void print(int i, String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverloadingOrder.print");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("int: " + i + ", String: " + s);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    print("String first", 11);
    print(99, "Int first");
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "String: String first, int: 11",
      "int: 99, String: Int first"
    });
    //// Resuming generated code
  }
  //: c04:PrimitiveOverloading.java
  // Promotion of primitives and overloading.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class PrimitiveOverloading {
  // vars
  static Test monitor = new Test();
  void f1(char x)   { System.out.println("f1(char)")   ; };
  void f1(byte x)   { System.out.println("f1(byte)")   ; };
  void f1(short x)  { System.out.println("f1(short)")  ; };
  void f1(int x)    { System.out.println("f1(int)")    ; };
  void f1(long x)   { System.out.println("f1(long)")   ; };
  void f1(float x)  { System.out.println("f1(float)")  ; };
  void f1(double x) { System.out.println("f1(double)") ; };
  void f2(byte x)   { System.out.println("f2(byte)")   ; };
  void f2(short x)  { System.out.println("f2(short)")  ; };
  void f2(int x)    { System.out.println("f2(int)")    ; };
  void f2(long x)   { System.out.println("f2(long)")   ; };
  void f2(float x)  { System.out.println("f2(float)")  ; };
  void f2(double x) { System.out.println("f2(double)") ; };
  void f3(short x)  { System.out.println("f3(short)")  ; };
  void f3(int x)    { System.out.println("f3(int)")    ; };
  void f3(long x)   { System.out.println("f3(long)")   ; };
  void f3(float x)  { System.out.println("f3(float)")  ; };
  void f3(double x) { System.out.println("f3(double)") ; };
  void f4(int x)    { System.out.println("f4(int)")    ; };
  void f4(long x)   { System.out.println("f4(long)")   ; };
  void f4(float x)  { System.out.println("f4(float)")  ; };
  void f4(double x) { System.out.println("f4(double)") ; };
  void f5(long x)   { System.out.println("f5(long)")   ; };
  void f5(float x)  { System.out.println("f5(float)")  ; };
  void f5(double x) { System.out.println("f5(double)") ; };
  void f6(float x)  { System.out.println("f6(float)")  ; };
  void f6(double x) { System.out.println("f6(double)") ; };
  void f7(double x) { System.out.println("f7(double)") ; };
  void testConstVal() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testConstVal");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Testing with 5");
    f1(5);f2(5);f3(5);f4(5);f5(5);f6(5);f7(5);
  }
  void testChar() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testChar");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    char x = 'x';
    System.out.println("char argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testByte() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testByte");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    byte x = 0;
    System.out.println("byte argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testShort() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testShort");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    short x = 0;
    System.out.println("short argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testInt() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testInt");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    int x = 0;
    System.out.println("int argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testLong() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testLong");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    long x = 0;
    System.out.println("long argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testFloat() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testFloat");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    float x = 0;
    System.out.println("float argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  void testDouble() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrimitiveOverloading.testDouble");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    double x = 0;
    System.out.println("double argument:");
    f1(x);f2(x);f3(x);f4(x);f5(x);f6(x);f7(x);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    PrimitiveOverloading p = new PrimitiveOverloading();
    p.testConstVal();
    p.testChar();
    p.testByte();
    p.testShort();
    p.testInt();
    p.testLong();
    p.testFloat();
    p.testDouble();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Testing with 5",
      "f1(int)",
      "f2(int)",
      "f3(int)",
      "f4(int)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "char argument:",
      "f1(char)",
      "f2(int)",
      "f3(int)",
      "f4(int)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "byte argument:",
      "f1(byte)",
      "f2(byte)",
      "f3(short)",
      "f4(int)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "short argument:",
      "f1(short)",
      "f2(short)",
      "f3(short)",
      "f4(int)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "int argument:",
      "f1(int)",
      "f2(int)",
      "f3(int)",
      "f4(int)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "long argument:",
      "f1(long)",
      "f2(long)",
      "f3(long)",
      "f4(long)",
      "f5(long)",
      "f6(float)",
      "f7(double)",
      "float argument:",
      "f1(float)",
      "f2(float)",
      "f3(float)",
      "f4(float)",
      "f5(float)",
      "f6(float)",
      "f7(double)",
      "double argument:",
      "f1(double)",
      "f2(double)",
      "f3(double)",
      "f4(double)",
      "f5(double)",
      "f6(double)",
      "f7(double)"
    });
    //// Resuming generated code
  }
  //: c04:SimpleConstructor.java
  // Demonstration of a simple constructor.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Rock {
  Rock() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Rock.Rock");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Creating Rock");
  }
}
public class SimpleConstructor {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 10; i++) {
      new Rock();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock",
      "Creating Rock"
    });
    //// Resuming generated code
  }
  //: c04:SimpleConstructor2.java
  // Constructors can have arguments.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Rock2 {
  Rock2(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Rock2.Rock2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Creating Rock number " + i);
  }
}
public class SimpleConstructor2 {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    for (int i = 0; i < 10; i++) {
      new Rock2(i);
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Creating Rock number 0",
      "Creating Rock number 1",
      "Creating Rock number 2",
      "Creating Rock number 3",
      "Creating Rock number 4",
      "Creating Rock number 5",
      "Creating Rock number 6",
      "Creating Rock number 7",
      "Creating Rock number 8",
      "Creating Rock number 9"
    });
    //// Resuming generated code
  }
  //: c04:StaticInitialization.java
}
// Specifying initial values in a class definition.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Bowl {
  Bowl(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bowl.Bowl");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Bowl(" + marker + ")");
  }
  void f(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bowl.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f(" + marker + ")");
  }
}
class Table {
  // vars
  static Bowl b1 = new Bowl(1);
  Table() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Table.Table");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Table()");
    b2.f(1);
  }
  void f2(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Table.f2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f2(" + marker + ")");
  }
  // vars
  static Bowl b2 = new Bowl(2);
}
class Cupboard {
  // vars
  Bowl b3 = new Bowl(3);
  static Bowl b4 = new Bowl(4);
  Cupboard() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cupboard.Cupboard");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Cupboard()");
    b4.f(2);
  }
  void f3(int marker) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cupboard.f3");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:marker="+marker);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f3(" + marker + ")");
  }
  // vars
  static Bowl b5 = new Bowl(5);
}
public class StaticInitialization {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println("Creating new Cupboard() in main");
    new Cupboard();
    System.out.println("Creating new Cupboard() in main");
    new Cupboard();
    t2.f2(1);
    t3.f3(1);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Bowl(1)",
      "Bowl(2)",
      "Table()",
      "f(1)",
      "Bowl(4)",
      "Bowl(5)",
      "Bowl(3)",
      "Cupboard()",
      "f(2)",
      "Creating new Cupboard() in main",
      "Bowl(3)",
      "Cupboard()",
      "f(2)",
      "Creating new Cupboard() in main",
      "Bowl(3)",
      "Cupboard()",
      "f(2)",
      "f2(1)",
      "f3(1)"
    });
    //// Resuming generated code
  }
  // vars
  static Table    t2 = new Table();
  static Cupboard t3 = new Cupboard();
  //: c04:TerminationCondition.java
  // Using finalize() to detect an object that
  // hasn't been properly cleaned up.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Book {
  // vars
  boolean checkedOut = false;
  Book(boolean checkOut) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Book.Book");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:checkOut="+checkOut);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    checkedOut = checkOut;
  }
  void checkIn() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Book.checkIn");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    checkedOut = false;
  }
  public void finalize() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Book.finalize");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (checkedOut) {
      System.out.println("Error: checked out");
    }
  }
}
public class TerminationCondition {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Book novel = new Book(true);
    // Proper cleanup:
    novel.checkIn();
    // Drop the reference, forget to clean up:
    new Book(true);
    // Force garbage collection & finalization:
    System.gc();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Error: checked out"}, Test.WAIT);
    //// Resuming generated code
  }
  //: c04:VarArgs.java
  // Using array syntax to create variable argument lists.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class A {
  // vars
  int i;
}
public class VarArgs {
  // vars
  static Test monitor = new Test();
  static void print(Object[] x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VarArgs.print");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    for (int i = 0; i < x.length; i++) {
      System.out.println(x[i]);
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    //// Hand written stuff	5
    print(new Object[] {
      new Integer(47),
      new VarArgs(),
      new Float(3.14),
      new Double(11.11)
    });
    //// Resuming generated code
    print(new Object[] {"one", "two", "three" });
    print(new Object[] {new A(), new A(), new A()});
    //// Hand written stuff	5
    monitor.expect(new Object[] {
      "47",
      "%% VarArgs@\\p{XDigit}+",
      "3.14",
      "11.11",
      "one",
      "two",
      "three",
      new TestExpression("%% A@\\p{XDigit}+", 3)
    });
    //// Resuming generated code
  }
  //: c05:Cake.java
}
// Accesses a class in a separate compilation unit.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Cake {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Pie x = new Pie();
    x.f();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Pie.f()"
    });
    //// Resuming generated code
  }
  //: c05:ChocolateChip.java
  // Can't use package-access member from another package.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import c05_trued.dessert.*;
public class ChocolateChip extends Cookie {
  // vars
  private static Test monitor = new Test();
  public ChocolateChip() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ChocolateChip.ChocolateChip");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("ChocolateChip constructor");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    ChocolateChip x = new ChocolateChip();
    //! x.bite()	Can't access bite
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Cookie constructor",
      "ChocolateChip constructor"
    });
    //// Resuming generated code
  }
  //: c05:Dinner.java
  // Uses the library.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import c05_trued.dessert.*;
public class Dinner {
  // vars
  static Test monitor = new Test();
  public Dinner() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Dinner.Dinner");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Dinner constructor");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Cookie x = new Cookie();
    //! x.bite()	Can't access
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Cookie constructor"
    });
    //// Resuming generated code
  }
  //: c05:IceCream.java
  // Demonstrates "private" keyword.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Sundae {
  private Sundae() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sundae.Sundae");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  static Sundae makeASundae() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sundae.makeASundae");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Sundae();
  }
}
public class IceCream {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    //! Sundae x = new Sundae()
    Sundae x = Sundae.makeASundae();
  }
  //: c05:LibTest.java
  // Uses the library.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import com.bruceeckel.simple.*;
public class LibTest {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Vector v = new Vector();
    List l = new List();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "com.bruceeckel.simple.Vector",
      "com.bruceeckel.simple.List"
    });
    //// Resuming generated code
  }
  //: c05:Lunch.java
}
// Demonstrates class access specifiers. Make a class
// effectively private with private constructors:
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
class Soup {
  private Soup() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soup.Soup");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // (1) Allow creation via static method:
  public static Soup makeSoup() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soup.makeSoup");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Soup();
  }
  // (2) Create a static object and return a reference
  // upon request.(The "Singleton" pattern):
  // vars
  private static Soup ps1 = new Soup();
  public static Soup access() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soup.access");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return ps1;
  }
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soup.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Sandwich {
  void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sandwich.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    new Lunch();
  }
}
// Only one public class allowed per file:
public class Lunch {
  void test() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Lunch.test");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Can't do this! Private constructor:
    //! Soup priv1 = new Soup()
    Soup priv2 = Soup.makeSoup();
    Sandwich f1 = new Sandwich();
    Soup.access().f();
  }
  //: c05:Pie.java
  // The other class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Pie {
  void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Pie.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Pie.f()");
  }
  //: c05:TestAssert.java
  // Demonstrating the assertion tool. Comment the following,
  // and uncomment the subsequent line to change
  // assertion behavior:
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import com.bruceeckel.tools.debug.*;
// import com.bruceeckel.tools.*
public class TestAssert {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Assert.is_true((2 + 2) == 5);
    Assert.is_false((1 + 1) == 2);
    Assert.is_true((2 + 2) == 5, "2 + 2 == 5");
    Assert.is_false((1 + 1) == 2, "1 +1 != 2");
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Assertion failed",
      "Assertion failed",
      "Assertion failed: 2 + 2 == 5",
      "Assertion failed: 1 +1 != 2"
    });
    //// Resuming generated code
  }
  //: c05:ToolTest.java
  // Uses the tools library.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.tools.*;
import com.bruceeckel.simpletest.*;
public class ToolTest {
  // vars
  static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    P.rintln("Available from now on!");
    P.rintln("" + 100);                            // Force it to be a String
    P.rintln("" + 100L);
    P.rintln("" + 3.14159);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Available from now on!",
      "100",
      "100",
      "3.14159"
    });
    //// Resuming generated code
  }
  //: c06:Bath.java
  // Constructor initialization with composition.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Soap {
  // vars
  private String s;
  Soap() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soap.Soap");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Soap()");
    s = new String("Constructed");
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Soap.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return s;
  }
}
public class Bath {
  // vars
  private static Test monitor = new Test();
  // Initializing at point of definition:
  private String s1 = new String("Happy");
  private String s2 = "Happy";
  private String s3, s4;
  private Soap castille;
  private int i;
  private float toy;
  public Bath() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bath.Bath");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Inside Bath()");
    s3 = new String("Joy");
    i = 47;
    toy = 3.14f;
    castille = new Soap();
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bath.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (s4 == null) {
      // Delayed initialization:
      s4 = new String("Joy");
    }
    return
      "s1 = " + s1 + "\n" +
      "s2 = " + s2 + "\n" +
      "s3 = " + s3 + "\n" +
      "s4 = " + s4 + "\n" +
      "i = " + i + "\n" +
      "toy = " + toy + "\n" +
      "castille = " + castille;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Bath b = new Bath();
    System.out.println(b);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Inside Bath()",
      "Soap()",
      "s1 = Happy",
      "s2 = Happy",
      "s3 = Joy",
      "s4 = Joy",
      "i = 47",
      "toy = 3.14",
      "castille = Constructed"
    });
    //// Resuming generated code
  }
  //: c06:Beetle.java
  // The full process of initialization.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Insect {
  // vars
  protected static Test monitor = new Test();
  private int i = 9;
  protected int j;
  Insect() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Insect.Insect");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("i = " + i + ", j = " + j);
    j = 39;
  }
  // vars
  private static int x1 = print("static Insect.x1 initialized");
  static int print(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Insect.print");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println(s);
    return 47;
  }
}
public class Beetle extends Insect {
  // vars
  private int k = print("Beetle.k initialized");
  public Beetle() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Beetle.Beetle");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("k = " + k);
    System.out.println("j = " + j);
  }
  // vars
  private static int x2 = print("static Beetle.x2 initialized");
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println("Beetle constructor");
    Beetle b = new Beetle();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "static Insect.x1 initialized",
      "static Beetle.x2 initialized",
      "Beetle constructor",
      "i = 9, j = 0",
      "Beetle.k initialized",
      "k = 47",
      "j = 39"
    });
    //// Resuming generated code
  }
  //: c06:BlankFinal.java
  // "Blank" final fields.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Poppet {
  // vars
  private int i;
  Poppet(int ii) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Poppet.Poppet");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:ii="+ii);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    i = ii;
  }
}
public class BlankFinal {
  // vars
  /** Initialized final */
  private final int i = 0;
  /** Blank final */
  private final int j;
  /** Blank final reference */
  private final Poppet p;
  // Blank finals MUST be initialized in the constructor:
  public BlankFinal() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BlankFinal.BlankFinal");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    j = 1;                                         // Initialize blank final
    p = new Poppet(1);                             // Initialize blank final reference
  }
  public BlankFinal(int x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BlankFinal.BlankFinal");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    j = x;                                         // Initialize blank final
    p = new Poppet(x);                             // Initialize blank final reference
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    new BlankFinal();
    new BlankFinal(47);
  }
  //: c06:CADSystem.java
  // Ensuring proper cleanup.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
package c06_trued;
import com.bruceeckel.simpletest.*;
import java.util.*;
class Shape {
  Shape(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Shape.Shape");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Shape constructor");
  }
  void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Shape.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Shape dispose");
  }
}
class Circle extends Shape {
  Circle(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Circle.Circle");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Drawing Circle");
  }
  void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Circle.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Erasing Circle");
    super.dispose();
  }
}
class Triangle extends Shape {
  Triangle(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Triangle.Triangle");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Drawing Triangle");
  }
  void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Triangle.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Erasing Triangle");
    super.dispose();
  }
}
class Line extends Shape {
  // vars
  private int start, end;
  Line(int start, int end) {
    super(start);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Line.Line");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:start="+start);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:end="+end);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.start = start;
    this.end = end;
    System.out.println("Drawing Line: "+ start+ ", "+ end);
  }
  void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Line.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Erasing Line: "+ start+ ", "+ end);
    super.dispose();
  }
}
public class CADSystem extends Shape {
  // vars
  private static Test monitor = new Test();
  private Circle c;
  private Triangle t;
  private Line[] lines = new Line[5];
  public CADSystem(int i) {
    super(i + 1);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("CADSystem.CADSystem");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    for (int j = 0; j < lines.length; j++) {
      lines[j] = new Line(j, j*j);
    }
    c = new Circle(1);
    t = new Triangle(1);
    System.out.println("Combined constructor");
  }
  public void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("CADSystem.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("CADSystem.dispose()");
    // The order of cleanup is the reverse
    // of the order of initialization
    t.dispose();
    c.dispose();
    for (int i = lines.length - 1; i >= 0; i--) {
      lines[i].dispose();
    }
    super.dispose();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    CADSystem x = new CADSystem(47);
    try {
      // Code and exception handling...
    } finally {
      x.dispose();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Shape constructor",
      "Shape constructor",
      "Drawing Line: 0, 0",
      "Shape constructor",
      "Drawing Line: 1, 1",
      "Shape constructor",
      "Drawing Line: 2, 4",
      "Shape constructor",
      "Drawing Line: 3, 9",
      "Shape constructor",
      "Drawing Line: 4, 16",
      "Shape constructor",
      "Drawing Circle",
      "Shape constructor",
      "Drawing Triangle",
      "Combined constructor",
      "CADSystem.dispose()",
      "Erasing Triangle",
      "Shape dispose",
      "Erasing Circle",
      "Shape dispose",
      "Erasing Line: 4, 16",
      "Shape dispose",
      "Erasing Line: 3, 9",
      "Shape dispose",
      "Erasing Line: 2, 4",
      "Shape dispose",
      "Erasing Line: 1, 1",
      "Shape dispose",
      "Erasing Line: 0, 0",
      "Shape dispose",
      "Shape dispose"
    });
    //// Resuming generated code
  }
  //: c06:Car.java
  // Composition with public objects.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Engine {
  public void start() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Engine.start");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void rev() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Engine.rev");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void stop() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Engine.stop");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Wheel {
  public void inflate(int psi) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Wheel.inflate");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:psi="+psi);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Window {
  public void rollup() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Window.rollup");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void rolldown() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Window.rolldown");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Door {
  // vars
  public Window window = new Window();
  public void open() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Door.open");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void close() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Door.close");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class Car {
  // vars
  public Engine engine = new Engine();
  public Wheel[] wheel = new Wheel[4];
  public Door left = new Door();
  /** 2-door */
  public Door right = new Door();
  public Car() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Car.Car");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    for (int i = 0; i < 4; i++) {
      wheel[i] = new Wheel();
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Car car = new Car();
    car.left.window.rollup();
    car.wheel[0].inflate(72);
  }
  //: c06:Cartoon.java
  // Constructor calls during inheritance.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Art {
  Art() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Art.Art");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Art constructor");
  }
}
class Drawing extends Art {
  Drawing() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Drawing.Drawing");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Drawing constructor");
  }
}
public class Cartoon extends Drawing {
  // vars
  private static Test monitor = new Test();
  public Cartoon() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cartoon.Cartoon");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Cartoon constructor");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Cartoon x = new Cartoon();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Art constructor",
      "Drawing constructor",
      "Cartoon constructor"
    });
    //// Resuming generated code
  }
  //: c06:Chess.java
  // Inheritance, constructors and arguments.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Game {
  Game(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Game.Game");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Game constructor");
  }
}
class BoardGame extends Game {
  BoardGame(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BoardGame.BoardGame");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("BoardGame constructor");
  }
}
public class Chess extends BoardGame {
  // vars
  private static Test monitor = new Test();
  Chess() {
    super(11);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Chess.Chess");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Chess constructor");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Chess x = new Chess();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Game constructor",
      "BoardGame constructor",
      "Chess constructor"
    });
    //// Resuming generated code
  }
  //: c06:Detergent.java
  // Inheritance syntax & properties.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Cleanser {
  // vars
  protected static Test monitor = new Test();
  private String s = new String("Cleanser");
  public void append(String a) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cleanser.append");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:a="+a);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    s += a;
  }
  public void dilute() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cleanser.dilute");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    append(" dilute()");
  }
  public void apply() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cleanser.apply");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    append(" apply()");
  }
  public void scrub() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cleanser.scrub");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    append(" scrub()");
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cleanser.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return s;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Cleanser x = new Cleanser();
    x.dilute();
    x.apply();
    x.scrub();
    System.out.println(x);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Cleanser dilute() apply() scrub()"
    });
    
    //// Resuming generated code
  }
}
public class Detergent extends Cleanser {
  // Change a method:
  public void scrub() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Detergent.scrub");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    append(" Detergent.scrub()");
    super.scrub();                                 // Call base-class version
  }
  // Add methods to the interface:
  public void foam() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Detergent.foam");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    append(" foam()");
  }
  // Test the new class:
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Detergent x = new Detergent();
    x.dilute();
    x.apply();
    x.scrub();
    x.foam();
    System.out.println(x);
    System.out.println("Testing base class:");
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Cleanser dilute() apply() " +
      "Detergent.scrub() scrub() foam()",
      "Testing base class:",
    });
    //// Resuming generated code
    Cleanser.main(argv);
  }
  //: c06:FinalArguments.java
  // Using "final" with method arguments.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Gizmo {
  public void spin() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Gizmo.spin");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class FinalArguments {
  void with(final Gizmo g) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FinalArguments.with");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:g="+g);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    //! g = new Gizmo()	Illegal -- g is final
  }
  void without(Gizmo g) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FinalArguments.without");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:g="+g);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    g = new Gizmo();                               // OK -- g not final
    g.spin();
  }
  // void f	final int i
  //   i++	Can't change
  // You can only read from a final primitive:
  int g(final int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FinalArguments.g");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return i + 1;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    FinalArguments bf = new FinalArguments();
    bf.without(null);
    bf.with(null);
  }
  //: c06:FinalData.java
  // The effect of final on fields.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
class Value {
  // vars
  /** Package access */
  int i;
  public Value(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Value.Value");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.i = i;
  }
}
public class FinalData {
  // vars
  private static Test   monitor = new Test();
  private static Random rand    = new Random();
  private String id;
  public FinalData(String id) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FinalData.FinalData");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.id = id;
  }
  // Can be compile-time constants:
  // vars
  private        final int   VAL_ONE   = 9;
  private static final int   VAL_TWO   = 99;
  // Typical public constant:
  public  static final int   VAL_THREE = 39;
  // Cannot be compile-time constants:
  private        final int   i4        = rand.nextInt(20);
  static         final int   i5        = rand.nextInt(20);
  private              Value v1        = new Value(11);
  private        final Value v2        = new Value(22);
  private static final Value v3        = new Value(33);
  // Arrays:
  private        final int[] a         = { 1, 2, 3, 4, 5, 6 };
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FinalData.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return id + ": " + "i4 = " + i4 + ", i5 = " + i5;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    FinalData fd1 = new FinalData("fd1");
    //! fd1.VAL_ONE++	Error: can't change value
    fd1.v2.i++;                                    // Object isn't constant!
    fd1.v1 = new Value(9);                         // OK -- not final
    for (int i = 0; i < fd1.a.length; i++) {
      fd1.a[i]++;                                  // Object isn't constant!
    }
    //! fd1.v2 = new Value(0)	Error: Can't
    //! fd1.v3 = new Value(1)	change reference
    //! fd1.a = new int[3]
    System.out.println(fd1);
    System.out.println("Creating new FinalData");
    FinalData fd2 = new FinalData("fd2");
    System.out.println(fd1);
    System.out.println(fd2);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "%% fd1: i4 = \\d+, i5 = \\d+",
      "Creating new FinalData",
      "%% fd1: i4 = \\d+, i5 = \\d+",
      "%% fd2: i4 = \\d+, i5 = \\d+"
    });
    //// Resuming generated code
  }
  //: c06:FinalOverridingIllusion.java
  // It only looks like you can override
  // a private or private final method.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class WithFinals {
  // Identical to "private" alone:
  private final void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("WithFinals.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("WithFinals.f()");
  }
  // Also automatically "final":
  private void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("WithFinals.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("WithFinals.g()");
  }
}
class OverridingPrivate extends WithFinals {
  private final void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverridingPrivate.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("OverridingPrivate.f()");
  }
  private void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverridingPrivate.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("OverridingPrivate.g()");
  }
}
class OverridingPrivate2 extends OverridingPrivate {
  public final void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverridingPrivate2.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("OverridingPrivate2.f()");
  }
  public void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OverridingPrivate2.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("OverridingPrivate2.g()");
  }
}
public class FinalOverridingIllusion {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    OverridingPrivate2 op2 = new OverridingPrivate2();
    op2.f();
    op2.g();
    // You can upcast:
    OverridingPrivate op = op2;
    // But you can't call the methods:
    //! op.f()
    //! op.g()
    // Same here:
    WithFinals wf = op2;
    //! wf.f()
    //! wf.g()
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "OverridingPrivate2.f()",
      "OverridingPrivate2.g()"
    });
    //// Resuming generated code
  }
  //: c06:Hide.java
}
// Overloading a base-class method name in a derived class
// does not hide the base-class versions.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Homer {
  char doh(char c) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Homer.doh");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:c="+c);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("doh(char)");
    return 'd';
  }
  float doh(float f) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Homer.doh");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:f="+f);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("doh(float)");
    return 1.0f;
  }
}
class Milhouse {
}
class Bart extends Homer {
  void doh(Milhouse m) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bart.doh");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:m="+m);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("doh(Milhouse)");
  }
}
public class Hide {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Bart b = new Bart();
    b.doh(1);
    b.doh('x');
    b.doh(1.0f);
    b.doh(new Milhouse());
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "doh(float)",
      "doh(char)",
      "doh(float)",
      "doh(Milhouse)"
    });
    //// Resuming generated code
  }
  //: c06:Jurassic.java
}
// Making an entire class final.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
class SmallBrain {
}
final class Dinosaur {
  // vars
  int i = 7;
  int j = 1;
  SmallBrain x = new SmallBrain();
  void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Dinosaur.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
//! class Further extends Dinosaur
// error: Cannot extend final class 'Dinosaur'
public class Jurassic {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Dinosaur n = new Dinosaur();
    n.f();
    n.i = 40;
    n.j++;
  }
  //: c06:Orc.java
  // The protected keyword.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
class Villain {
  // vars
  private String name;
  protected void set(String nm) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Villain.set");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:nm="+nm);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    name = nm;
  }
  public Villain(String name) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Villain.Villain");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:name="+name);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.name = name;
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Villain.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return "I'm a Villain and my name is " + name;
  }
}
public class Orc extends Villain {
  // vars
  private static Test monitor = new Test();
  private int orcNumber;
  public Orc(String name, int orcNumber) {
    super(name);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Orc.Orc");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:name="+name);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:orcNumber="+orcNumber);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.orcNumber = orcNumber;
  }
  public void change(String name, int orcNumber) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Orc.change");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:name="+name);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:orcNumber="+orcNumber);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    set(name);                                     // Available because it's protected
    this.orcNumber = orcNumber;
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Orc.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return "Orc " + orcNumber + ": " + super.toString();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Orc orc = new Orc("Limburger", 12);
    System.out.println(orc);
    orc.change("Bob", 19);
    System.out.println(orc);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Orc 12: I'm a Villain and my name is Limburger",
      "Orc 19: I'm a Villain and my name is Bob"
    });
    //// Resuming generated code
  }
  //: c06:PlaceSetting.java
  // Combining composition & inheritance.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Plate {
  Plate(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Plate.Plate");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Plate constructor");
  }
}
class DinnerPlate extends Plate {
  DinnerPlate(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DinnerPlate.DinnerPlate");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("DinnerPlate constructor");
  }
}
class Utensil {
  Utensil(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Utensil.Utensil");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Utensil constructor");
  }
}
class Spoon extends Utensil {
  Spoon(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Spoon.Spoon");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Spoon constructor");
  }
}
class Fork extends Utensil {
  Fork(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Fork.Fork");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Fork constructor");
  }
}
class Knife extends Utensil {
  Knife(int i) {
    super(i);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Knife.Knife");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Knife constructor");
  }
}
// A cultural way of doing something:
class Custom {
  Custom(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Custom.Custom");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Custom constructor");
  }
}
public class PlaceSetting extends Custom {
  // vars
  private static Test monitor = new Test();
  private Spoon sp;
  private Fork frk;
  private Knife kn;
  private DinnerPlate pl;
  public PlaceSetting(int i) {
    super(i + 1);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PlaceSetting.PlaceSetting");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    sp = new Spoon(i + 2);
    frk = new Fork(i + 3);
    kn = new Knife(i + 4);
    pl = new DinnerPlate(i + 5);
    System.out.println("PlaceSetting constructor");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    PlaceSetting x = new PlaceSetting(9);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Custom constructor",
      "Utensil constructor",
      "Spoon constructor",
      "Utensil constructor",
      "Fork constructor",
      "Utensil constructor",
      "Knife constructor",
      "Plate constructor",
      "DinnerPlate constructor",
      "PlaceSetting constructor"
    });
    //// Resuming generated code
  }
  //: c06:SprinklerSystem.java
  // Composition for code reuse.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class WaterSource {
  // vars
  private String s;
  WaterSource() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("WaterSource.WaterSource");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("WaterSource()");
    s = new String("Constructed");
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("WaterSource.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return s;
  }
}
public class SprinklerSystem {
  // vars
  private static Test monitor = new Test();
  private String valve1, valve2, valve3, valve4;
  private WaterSource source;
  private int i;
  private float f;
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("SprinklerSystem.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return
      "valve1 = " + valve1 + "\n" +
      "valve2 = " + valve2 + "\n" +
      "valve3 = " + valve3 + "\n" +
      "valve4 = " + valve4 + "\n" +
      "i = " + i + "\n" +
      "f = " + f + "\n" +
      "source = " + source;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    SprinklerSystem sprinklers = new SprinklerSystem();
    System.out.println(sprinklers);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "valve1 = null",
      "valve2 = null",
      "valve3 = null",
      "valve4 = null",
      "i = 0",
      "f = 0.0",
      "source = null"
    });
    //// Resuming generated code
  }
  //: c06:Wind.java
  // Inheritance & upcasting.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import java.util.*;
class Instrument {
  public void play() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Instrument.play");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  static void tune(Instrument i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Instrument.tune");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // ...
    i.play();
  }
}
// Wind objects are instruments
// because they have the same interface:
public class Wind extends Instrument {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Wind flute = new Wind();
    Instrument.tune(flute);                        // Upcasting
  }
  //: c07:Frog.java
  // Cleanup and inheritance.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Characteristic {
  // vars
  private String s;
  Characteristic(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Characteristic.Characteristic");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.s = s;
    System.out.println("Creating Characteristic " + s);
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Characteristic.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("finalizing Characteristic " + s);
  }
}
class Description {
  // vars
  private String s;
  Description(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Description.Description");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.s = s;
    System.out.println("Creating Description " + s);
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Description.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("finalizing Description " + s);
  }
}
class LivingCreature {
  // vars
  private Characteristic p = new Characteristic("is alive");
  private Description t    = new Description("Basic Living Creature");
  LivingCreature() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LivingCreature.LivingCreature");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("LivingCreature()");
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LivingCreature.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("LivingCreature dispose");
    t.dispose();
    p.dispose();
  }
}
class Animal extends LivingCreature {
  // vars
  private Characteristic p = new Characteristic("has heart");
  private Description t    = new Description("Animal not Vegetable");
  Animal() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Animal.Animal");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Animal()");
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Animal.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Animal dispose");
    t.dispose();
    p.dispose();
    super.dispose();
  }
}
class Amphibian extends Animal {
  // vars
  private Characteristic p = new Characteristic("can live in water");
  private Description t    = new Description("Both water and land");
  Amphibian() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Amphibian.Amphibian");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Amphibian()");
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Amphibian.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Amphibian dispose");
    t.dispose();
    p.dispose();
    super.dispose();
  }
}
public class Frog extends Amphibian {
  // vars
  private static Test monitor = new Test();
  private Characteristic p    = new Characteristic("Croaks");
  private Description t       = new Description("Eats Bugs");
  public Frog() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Frog.Frog");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Frog()");
  }
  protected void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Frog.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Frog dispose");
    t.dispose();
    p.dispose();
    super.dispose();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Frog frog = new Frog();
    System.out.println("Bye!");
    frog.dispose();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Creating Characteristic is alive",
      "Creating Description Basic Living Creature",
      "LivingCreature()",
      "Creating Characteristic has heart",
      "Creating Description Animal not Vegetable",
      "Animal()",
      "Creating Characteristic can live in water",
      "Creating Description Both water and land",
      "Amphibian()",
      "Creating Characteristic Croaks",
      "Creating Description Eats Bugs",
      "Frog()",
      "Bye!",
      "Frog dispose",
      "finalizing Description Eats Bugs",
      "finalizing Characteristic Croaks",
      "Amphibian dispose",
      "finalizing Description Both water and land",
      "finalizing Characteristic can live in water",
      "Animal dispose",
      "finalizing Description Animal not Vegetable",
      "finalizing Characteristic has heart",
      "LivingCreature dispose",
      "finalizing Description Basic Living Creature",
      "finalizing Characteristic is alive"
    });
    //// Resuming generated code
  }
  //: c07:PolyConstructors.java
  // Constructors and polymorphism
  // don't produce what you might expect.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
abstract class Glyph {
  // vars
  abstract void draw();
  Glyph() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Glyph.Glyph");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Glyph() before draw()");
    draw();
    System.out.println("Glyph() after draw()");
  }
}
class RoundGlyph extends Glyph {
  // vars
  private int radius = 1;
  RoundGlyph(int r) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RoundGlyph.RoundGlyph");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:r="+r);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    radius = r;
    System.out.println("RoundGlyph.RoundGlyph(), radius = " + radius);
  }
  void draw() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RoundGlyph.draw");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("RoundGlyph.draw(), radius = " + radius);
  }
}
public class PolyConstructors {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    new RoundGlyph(5);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Glyph() before draw()",
      "RoundGlyph.draw(), radius = 0",
      "Glyph() after draw()",
      "RoundGlyph.RoundGlyph(), radius = 5"
    });
    //// Resuming generated code
  }
  //: c07:PrivateOverride.java
  // Abstract classes and methods.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class PrivateOverride {
  // vars
  private static Test monitor = new Test();
  private void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PrivateOverride.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("private f()");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    PrivateOverride po = new Derived();
    po.f();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "private f()"
    });
    
    //// Resuming generated code
  }
}
class Derived extends PrivateOverride {
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Derived.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("public f()");
  }
  //: c07:RTTI.java
  // Downcasting & Run-Time Type Identification (RTTI).
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Useful {
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Useful.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Useful.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class MoreUseful extends Useful {
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MoreUseful.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MoreUseful.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void u() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MoreUseful.u");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void v() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MoreUseful.v");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void w() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MoreUseful.w");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class RTTI {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    // vars
    Useful[] x = {
      new Useful(),
      new MoreUseful(),
    };
    x[0].f();
    x[1].g();
    // Compile time: method not found in Useful:
    //! x[1].u()
    ((MoreUseful)x[1]).u();                        // Downcast/RTTI
    ((MoreUseful)x[0]).u();                        // Exception thrown
  }
  //: c07:Sandwich.java
  // Order of constructor calls.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
package c07_trued;
import com.bruceeckel.simpletest.*;
class Meal {
  Meal() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Meal.Meal");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Meal()");
  }
}
class Bread {
  Bread() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Bread.Bread");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Bread()");
  }
}
class Cheese {
  Cheese() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Cheese.Cheese");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Cheese()");
  }
}
class Lettuce {
  Lettuce() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Lettuce.Lettuce");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Lettuce()");
  }
}
class Lunch extends Meal {
  Lunch() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Lunch.Lunch");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Lunch()");
  }
}
class PortableLunch extends Lunch {
  PortableLunch() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("PortableLunch.PortableLunch");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("PortableLunch()");
  }
}
public class Sandwich extends PortableLunch {
  // vars
  private static Test monitor = new Test();
  private Bread b             = new Bread();
  private Cheese c            = new Cheese();
  private Lettuce l           = new Lettuce();
  public Sandwich() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sandwich.Sandwich");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Sandwich()");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    new Sandwich();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Meal()",
      "Lunch()",
      "PortableLunch()",
      "Bread()",
      "Cheese()",
      "Lettuce()",
      "Sandwich()"
    });
    //// Resuming generated code
  }
  //: c07:Shapes.java
  // Polymorphism in Java.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.util.*;
class Shape {
  void draw() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Shape.draw");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  void erase() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Shape.erase");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Circle extends Shape {
  void draw() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Circle.draw");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Circle.draw()");
  }
  void erase() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Circle.erase");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Circle.erase()");
  }
}
class Square extends Shape {
  void draw() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Square.draw");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Square.draw()");
  }
  void erase() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Square.erase");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Square.erase()");
  }
}
class Triangle extends Shape {
  void draw() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Triangle.draw");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Triangle.draw()");
  }
  void erase() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Triangle.erase");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Triangle.erase()");
  }
}
// A "factory" that randomly creates shapes:
class RandomShapeGenerator {
  // vars
  private Random rand = new Random();
  public Shape next() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RandomShapeGenerator.next");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    switch (rand.nextInt(3)) {
      default :
      {
      }
      case 0 :
      {
        return new Circle();
      }
      case 1 :
      {
        return new Square();
      }
      case 2 :
      {
        return new Triangle();
      }
    }
  }
}
public class Shapes {
  // vars
  private static Test monitor = new Test();
  private static RandomShapeGenerator gen = new RandomShapeGenerator();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Shape[] s = new Shape[9];
    // Fill up the array with shapes:
    for (int i = 0; i < s.length; i++) {
      s[i] = gen.next();
    }
    // Make polymorphic method calls:
    for (int i = 0; i < s.length; i++) {
      s[i].draw();
    }
    //// Hand written stuff	5
    monitor.expect(new Object[] {
      new TestExpression("%% (Circle|Square|Triangle)"
        + "\\.draw\\(\\)", s.length)
    });
    //// Resuming generated code
  }
  //: c07:Transmogrify.java
  // Dynamically changing the behavior of an object
  // via composition (the "State" design pattern).
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
abstract class Actor {
  // vars
  public abstract void act();
}
class HappyActor extends Actor {
  public void act() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("HappyActor.act");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("HappyActor");
  }
}
class SadActor extends Actor {
  public void act() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("SadActor.act");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("SadActor");
  }
}
class Stage {
  // vars
  private Actor actor = new HappyActor();
  public void change() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Stage.change");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    actor = new SadActor();
  }
  public void performPlay() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Stage.performPlay");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    actor.act();
  }
}
public class Transmogrify {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Stage stage = new Stage();
    stage.performPlay();
    stage.change();
    stage.performPlay();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "HappyActor",
      "SadActor"
    });
    //// Resuming generated code
  }
  //: c08:Adventure.java
  // Multiple interfaces.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
interface CanFight {
  void fight();
}
interface CanSwim {
  void swim();
}
interface CanFly {
  void fly();
}
class ActionCharacter {
  public void fight() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ActionCharacter.fight");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class Hero extends ActionCharacter implements CanFight, CanSwim, CanFly {
  public void swim() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Hero.swim");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void fly() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Hero.fly");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class Adventure {
  public static void t(CanFight x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Adventure.t");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    x.fight();
  }
  public static void u(CanSwim x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Adventure.u");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    x.swim();
  }
  public static void v(CanFly x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Adventure.v");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    x.fly();
  }
  public static void w(ActionCharacter x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Adventure.w");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    x.fight();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Hero h = new Hero();
    t(h);                                          // Treat it as a CanFight
    u(h);                                          // Treat it as a CanSwim
    v(h);                                          // Treat it as a CanFly
    w(h);                                          // Treat it as an ActionCharacter
  }
  //: c08:AnonymousConstructor.java
  // Creating a constructor for an anonymous inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
abstract class Base {
  public Base(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Base.Base");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Base constructor, i = " + i);
  }
  public abstract void f();
}
public class AnonymousConstructor {
  // vars
  private static Test monitor = new Test();
  public static Base getBase(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("AnonymousConstructor.getBase");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Base(i) {
      {
        System.out.println("Inside instance initializer");
      }
      public void f() {
        System.out.println("In anonymous f()");
      }
    };
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Base base = getBase(47);
    base.f();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Base constructor, i = 47",
      "Inside instance initializer",
      "In anonymous f()"
    });
    //// Resuming generated code
  }
  //: c08:BigEgg.java
}
// An inner class cannot be overriden like a method.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
class Egg {
  // vars
  private Yolk y;
  protected class Yolk {
    public Yolk() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.Yolk");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("Egg.Yolk()");
    }
  }
  public Egg() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Egg.Egg");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("New Egg()");
    y = new Yolk();
  }
}
public class BigEgg extends Egg {
  // vars
  private static Test monitor = new Test();
  public class Yolk {
    public Yolk() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.Yolk");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("BigEgg.Yolk()");
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    BigEgg be = new BigEgg();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "New Egg()",
      "Egg.Yolk()"
    });
    //// Resuming generated code
  }
  //: c08:BigEgg2.java
  // Proper inheritance of an inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Egg2 {
  protected class Yolk {
    public Yolk() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.Yolk");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("Egg2.Yolk()");           // 1 3
    }
    public void f() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.f");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("Egg2.Yolk.f()");
    }
  }
  // vars
  private Yolk y = new Yolk();
  public Egg2() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Egg2.Egg2");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("New Egg2()");              // 2
  }
  public void insertYolk(Yolk yy) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Egg2.insertYolk");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:yy="+yy);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    y = yy;
  }
  public void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Egg2.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    y.f();
  }
}
public class BigEgg2 extends Egg2 {
  public class Yolk extends Egg2.Yolk {
    public Yolk() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.Yolk");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("BigEgg2.Yolk()");        // 4
    }
    public void f() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Yolk.f");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.out.println("BigEgg2.Yolk.f()");      // 5
    }
  }
  public BigEgg2() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("BigEgg2.BigEgg2");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    insertYolk(new Yolk());
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Egg2 e2 = new BigEgg2();
    e2.g();
  }
  //: c08:Callbacks.java
  // Using inner classes for callbacks
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
interface Incrementable {
  void increment();
}
// Very simple to just implement the interface:
class Callee1 implements Incrementable {
  // vars
  private int i = 0;
  public void increment() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Callee1.increment");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    i++;
    System.out.println(i);
  }
}
class MyIncrement {
  void increment() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyIncrement.increment");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Other operation");
  }
  static void f(MyIncrement mi) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyIncrement.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:mi="+mi);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    mi.increment();
  }
}
// If your class must implement increment() in
// some other way, you must use an inner class:
class Callee2 extends MyIncrement {
  // vars
  private int i = 0;
  private void incr() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Callee2.incr");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    i++;
    System.out.println(i);
  }
  private class Closure implements Incrementable {
    public void increment() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Closure.increment");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      incr();
    }
  }
  Incrementable getCallbackReference() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Callee2.getCallbackReference");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Closure();
  }
}
class Caller {
  // vars
  private Incrementable callbackReference;
  Caller(Incrementable cbh) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Caller.Caller");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:cbh="+cbh);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    callbackReference = cbh;
  }
  void go() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Caller.go");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    callbackReference.increment();
  }
}
public class Callbacks {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Callee1 c1 = new Callee1();
    Callee2 c2 = new Callee2();
    MyIncrement.f(c2);
    Caller caller1 = new Caller(c1);
    Caller caller2 = new Caller(c2.getCallbackReference());
    caller1.go();
    caller1.go();
    caller2.go();
    caller2.go();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Other operation",
      "1",
      "2",
      "1",
      "2"
    });
    //// Resuming generated code
  }
  //: c08:Contents.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public interface Contents {
  int value();
  //: c08:Destination.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public interface Destination {
  String readLabel();
  //: c08:GreenhouseController.java
  // Configure and execute the greenhouse system.
  // {Args: 5000}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import c08_trued.controller.*;
public class GreenhouseController {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    GreenhouseControls gc = new GreenhouseControls();
    // Instead of hard-wiring, you could parse
    // configuration information from a text file here:
    gc.addEvent(gc.new Bell(900));
    // vars
    Event[] eventList = {
      gc.new ThermostatNight (0),
      gc.new LightOn         (200),
      gc.new LightOff        (400),
      gc.new WaterOn         (600),
      gc.new WaterOff        (800),
      gc.new ThermostatDay   (1400),
    };
    gc.addEvent(gc.new Restart(2000, eventList));
    if (argv.length == 1) {
      gc.addEvent(gc.new Terminate(Integer.parseInt(argv[0])));
    }
    gc.run();
  }
  //: c08:GreenhouseControls.java
  // This produces a specific application of the
  // control system, all in a single class. Inner
  // classes allow you to encapsulate different
  // functionality for each type of event.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import c08_trued.controller.*;
public class GreenhouseControls extends Controller {
  // vars
  private static Test monitor = new Test();
  private boolean light = false;
  public class LightOn extends Event {
    public LightOn(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOn.LightOn");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOn.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here to
      // physically turn on the light.
      light = true;
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOn.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Light is on";
    }
  }
  public class LightOff extends Event {
    public LightOff(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOff.LightOff");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOff.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here to
      // physically turn off the light.
      light = false;
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("LightOff.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Light is off";
    }
  }
  // vars
  private boolean water = false;
  public class WaterOn extends Event {
    public WaterOn(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOn.WaterOn");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOn.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here.
      water = true;
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOn.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Greenhouse water is on";
    }
  }
  public class WaterOff extends Event {
    public WaterOff(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOff.WaterOff");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOff.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here.
      water = false;
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("WaterOff.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Greenhouse water is off";
    }
  }
  // vars
  private String thermostat = "Day";
  public class ThermostatNight extends Event {
    public ThermostatNight(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatNight.ThermostatNight");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatNight.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here.
      thermostat = "Night";
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatNight.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Thermostat on night setting";
    }
  }
  public class ThermostatDay extends Event {
    public ThermostatDay(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatDay.ThermostatDay");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatDay.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      // Put hardware control code here.
      thermostat = "Day";
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ThermostatDay.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Thermostat on day setting";
    }
  }
  // An example of an action() that inserts a
  // new one of itself into the event list:
  public class Bell extends Event {
    public Bell(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Bell.Bell");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Bell.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      addEvent(new Bell(delayTime));
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Bell.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Bing!";
    }
  }
  public class Restart extends Event {
    // vars
    private Event[] eventList;
    public Restart(long delayTime, Event[] eventList) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Restart.Restart");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("2:eventList="+eventList);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      this.eventList = eventList;
      for (int i = 0; i < eventList.length; i++) {
        addEvent(eventList[i]);
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Restart.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      for (int i = 0; i < eventList.length; i++) {
        eventList[i].start();                      // Rerun each event
        addEvent(eventList[i]);
      }
      start();                                     // Rerun this Event
      addEvent(this);
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Restart.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Restarting system";
    }
  }
  public class Terminate extends Event {
    public Terminate(long delayTime) {
      super(delayTime);
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Terminate.Terminate");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:delayTime="+delayTime);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public void action() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Terminate.action");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      System.exit(0);
    }
    public String toString() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Terminate.toString");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return "Terminating";
    }
  }
  //: c08:HorrorShow.java
}
// Extending an interface with inheritance.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
interface Monster {
  void menace();
}
interface DangerousMonster extends Monster {
  void destroy();
}
interface Lethal {
  void kill();
}
class DragonZilla implements DangerousMonster {
  public void menace() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DragonZilla.menace");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void destroy() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DragonZilla.destroy");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
interface Vampire extends DangerousMonster, Lethal {
  void drinkBlood();
}
class VeryBadVampire implements Vampire {
  public void menace() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VeryBadVampire.menace");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void destroy() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VeryBadVampire.destroy");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void kill() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VeryBadVampire.kill");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void drinkBlood() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VeryBadVampire.drinkBlood");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class HorrorShow {
  static void u(Monster b) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("HorrorShow.u");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:b="+b);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    b.menace();
  }
  static void v(DangerousMonster d) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("HorrorShow.v");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:d="+d);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    d.menace();
    d.destroy();
  }
  static void w(Lethal l) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("HorrorShow.w");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:l="+l);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    l.kill();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    DangerousMonster barney = new DragonZilla();
    u(barney);
    v(barney);
    Vampire vlad = new VeryBadVampire();
    u(vlad);
    v(vlad);
    w(vlad);
  }
  //: c08:IInterface.java
  // Nested classes inside interfaces.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public interface IInterface {
  static class Inner {
    // vars
    int i, j, k;
    public Inner() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Inner.Inner");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    void f() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Inner.f");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
  }
  //: c08:InheritInner.java
  // Inheriting an inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class WithInner {
  class Inner {
  }
}
public class InheritInner extends WithInner.Inner {
  //! InheritInner
  InheritInner(WithInner wi) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InheritInner.InheritInner");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:wi="+wi);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    wi.super();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    WithInner    wi = new WithInner();
    InheritInner ii = new InheritInner(wi);
  }
  //: c08:InterfaceCollision.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
interface I1 {
  void f();
}
interface I2 {
  int f(int i);
}
interface I3 {
  int f();
}
class C {
  public int f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("C.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return 1;
  }
}
class C2 implements I1, I2 {
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("C2.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public int f(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("C2.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return 1;
    // overloaded
  }
}
class C3 extends C implements I2 {
  public int f(int i) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("C3.f");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:i="+i);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return 1;
    // overloaded
  }
}
class C4 extends C implements I3 {
  // Identical, no problem:
  public int f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("C4.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return 1;
  }
}
// Methods differ only by return type:
//! class C5 extends C implements I1
//! interface I4 extends I1, I3
  //: c08:LocalInnerClass.java
  // Holds a sequence of Objects.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
import com.bruceeckel.simpletest.*;
interface Counter {
  int next();
}
public class LocalInnerClass {
  // vars
  private static Test monitor = new Test();
  private int count = 0;
  Counter getCounter(final String name) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LocalInnerClass.getCounter");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:name="+name);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // A local inner class:
    class LocalCounter implements Counter {
      public LocalCounter() {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("LocalCounter.LocalCounter");
          }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
        // Local inner class can have a constructor
        System.out.println("LocalCounter()");
      }
      public int next() {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("LocalCounter.next");
          }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
        System.out.print(name);                    // Access local final
        return count++;
      }
    }
    return new LocalCounter();
  }
  // The same thing with an anonymous inner class:
  Counter getCounter2(final String name) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LocalInnerClass.getCounter2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:name="+name);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Counter() {
      //****************************************
      // Anonymous inner class cannot have a named
      // constructor, only an instance initializer:
      //****************************************
      {
        System.out.println("Counter()");
      }
      public int next() {
        System.out.print(name);                    // Access local final
        return count++;
      }
    };
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    LocalInnerClass lic = new LocalInnerClass();
    Counter c1          = lic.getCounter("Local inner ");
    Counter c2          = lic.getCounter2("Anonymous inner ");
    for (int i = 0; i < 5; i++) {
      System.out.println(c1.next());
    }
    for (int i = 0; i < 5; i++) {
      System.out.println(c2.next());
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "LocalCounter()",
      "Counter()",
      "Local inner 0",
      "Local inner 1",
      "Local inner 2",
      "Local inner 3",
      "Local inner 4",
      "Anonymous inner 5",
      "Anonymous inner 6",
      "Anonymous inner 7",
      "Anonymous inner 8",
      "Anonymous inner 9"
    });
    //// Resuming generated code
  }
  //: c08:Month.java
  // A more robust enumeration system.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
package c08_trued;
import com.bruceeckel.simpletest.*;
public final class Month {
  // vars
  private static Test monitor = new Test();
  private String name;
  private Month(String nm) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Month.Month");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:nm="+nm);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    name = nm;
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Month.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return name;
  }
  // vars
  public static final Month JAN = new Month("January");
  public static final Month FEB = new Month("February");
  public static final Month MAR = new Month("March");
  public static final Month APR = new Month("April");
  public static final Month MAY = new Month("May");
  public static final Month JUN = new Month("June");
  public static final Month JUL = new Month("July");
  public static final Month AUG = new Month("August");
  public static final Month SEP = new Month("September");
  public static final Month OCT = new Month("October");
  public static final Month NOV = new Month("November");
  public static final Month DEC = new Month("December");
  public static final Month[] month = {
    JAN,
    FEB,
    MAR,
    APR,
    MAY,
    JUN,
    JUL,
    AUG,
    SEP,
    OCT,
    NOV,
    DEC,
  };
  public static final Month number(int ord) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Month.number");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:ord="+ord);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return month[ord - 1];
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Month m = Month.JAN;
    System.out.println(m);
    m = Month.number(12);
    System.out.println(m);
    System.out.println(m == Month.DEC);
    System.out.println(m.equals(Month.DEC));
    System.out.println(Month.month[3]);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "January",
      "December",
      "true",
      "true",
      "April"
    });
    //// Resuming generated code
  }
  //: c08:Months.java
  // Using interfaces to create groups of constants.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
package c08_trued;
public interface Months {
  // vars
  int JANUARY   = 1;
  int FEBRUARY  = 2;
  int MARCH     = 3;
  int APRIL     = 4;
  int MAY       = 5;
  int JUNE      = 6;
  int JULY      = 7;
  int AUGUST    = 8;
  int SEPTEMBER = 9;
  int OCTOBER   = 10;
  int NOVEMBER  = 11;
  int DECEMBER  = 12;
  //: c08:MultiImplementation.java
  // With concrete or abstract classes, inner
  // classes are the only way to produce the effect
  // of "multiple implementation inheritance."
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
package c08_trued;
class D {
}
abstract class E {
}
class Z extends D {
  E makeE() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Z.makeE");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new E() {};
  }
}
public class MultiImplementation {
  static void takesD(D d) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MultiImplementation.takesD");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:d="+d);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  static void takesE(E e) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MultiImplementation.takesE");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:e="+e);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Z z = new Z();
    takesD(z);
    takesE(z.makeE());
  }
  //: c08:MultiInterfaces.java
}
// Two ways that a class can implement multiple interfaces.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
interface A {
}
interface B {
}
class X implements A, B {
}
class Y implements A {
  B makeB() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Y.makeB");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Anonymous inner class:
    return new B() {};
  }
}
public class MultiInterfaces {
  static void takesA(A a) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MultiInterfaces.takesA");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:a="+a);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  static void takesB(B b) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MultiInterfaces.takesB");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:b="+b);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    X x = new X();
    Y y = new Y();
    takesA(x);
    takesA(y);
    takesB(x);
    takesB(y.makeB());
  }
  //: c08:MultiNestingAccess.java
  // Nested classes can access all members of all
  // levels of the classes they are nested within.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class MNA {
  private void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MNA.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  class A {
    private void g() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("A.g");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    public class B {
      void h() {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("B.h");
          }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
        g();
        f();
      }
    }
  }
}
public class MultiNestingAccess {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    MNA mna       = new MNA();
    MNA.A mnaa    = mna.new A();
    MNA.A.B mnaab = mnaa.new B();
    mnaab.h();
  }
  //: c08:Parcel1.java
  // Creating inner classes.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Parcel1 {
  class Contents {
    // vars
    private int i = 11;
    public int value() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Contents.value");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i;
    }
  }
  class Destination {
    // vars
    private String label;
    Destination(String whereTo) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.Destination");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:whereTo="+whereTo);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      label = whereTo;
    }
    String readLabel() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.readLabel");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return label;
    }
  }
  // Using inner classes looks just like
  // using any other class, within Parcel1:
  public void ship(String dest) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel1.ship");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:dest="+dest);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    Contents c = new Contents();
    Destination d = new Destination(dest);
    System.out.println(d.readLabel());
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel1 p = new Parcel1();
    p.ship("Tanzania");
  }
  //: c08:Parcel10.java
  // Nested classes (static inner classes).
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Parcel10 {
  private static class ParcelContents implements Contents {
    // vars
    private int i = 11;
    public int value() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ParcelContents.value");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i;
    }
  }
  protected static class ParcelDestination implements Destination {
    // vars
    private String label;
    private ParcelDestination(String whereTo) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ParcelDestination.ParcelDestination");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:whereTo="+whereTo);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      label = whereTo;
    }
    public String readLabel() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ParcelDestination.readLabel");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return label;
    }
    // Nested classes can contain other static elements:
    public static void f() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("ParcelDestination.f");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
    }
    // vars
    static int x = 10;
    static class AnotherLevel {
      public static void f() {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("AnotherLevel.f");
          }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
      }
      // vars
      static int x = 10;
    }
  }
  public static Destination dest(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel10.dest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new ParcelDestination(s);
  }
  public static Contents cont() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel10.cont");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new ParcelContents();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Contents c = cont();
    Destination d = dest("Tanzania");
  }
  //: c08:Parcel11.java
  // Creating instances of inner classes.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Parcel11 {
  class Contents {
    // vars
    private int i = 11;
    public int value() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Contents.value");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i;
    }
  }
  class Destination {
    // vars
    private String label;
    Destination(String whereTo) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.Destination");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:whereTo="+whereTo);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      label = whereTo;
    }
    String readLabel() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.readLabel");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return label;
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel11 p = new Parcel11();
    // Must use instance of outer class
    // to create an instances of the inner class:
    Parcel11.Contents    c = p.new Contents();
    Parcel11.Destination d = p.new Destination("Tanzania");
  }
  //: c08:Parcel2.java
  // Returning a reference to an inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Parcel2 {
  class Contents {
    // vars
    private int i = 11;
    public int value() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Contents.value");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i;
    }
  }
  class Destination {
    // vars
    private String label;
    Destination(String whereTo) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.Destination");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:whereTo="+whereTo);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      label = whereTo;
    }
    String readLabel() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Destination.readLabel");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return label;
    }
  }
  public Destination to(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel2.to");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Destination(s);
  }
  public Contents cont() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel2.cont");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Contents();
  }
  public void ship(String dest) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel2.ship");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:dest="+dest);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    Contents c = cont();
    Destination d = to(dest);
    System.out.println(d.readLabel());
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel2 p = new Parcel2();
    p.ship("Tanzania");
    Parcel2 q = new Parcel2();
    // Defining references to inner classes:
    Parcel2.Contents c = q.cont();
    Parcel2.Destination d = q.to("Borneo");
  }
  //: c08:Parcel4.java
}
// Nesting a class within a method.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
public class Parcel4 {
  public Destination dest(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel4.dest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    class PDestination implements Destination {
      // vars
      private String label;
      private PDestination(String whereTo) {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("PDestination.PDestination");
          }
            if (System.getProperty("tru_deb_args","0").equals("1")) {
              for (int i=0;i<=l;i++) System.err.print(" ");
              System.err.println("1:whereTo="+whereTo);
            }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
        label = whereTo;
      }
      public String readLabel() {
        { // generated for flow-trace-debugging
          boolean fullstack;
          if (System.getProperty("tru_deb","0").equals("1")) {
            StackTraceElement[] stea=(new Throwable()).getStackTrace();
            int l=stea.length;
          if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
            for (int j=0;j<l;j++) {
              for (int i=0;i<l;i++) System.err.print(" ");
              if (stea[j].isNativeMethod()) {
                System.err.print("!");
              } else {
                System.err.print("*");
              }
              System.err.println(stea[j]);
            }
          } else {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("PDestination.readLabel");
          }
            if (fullstack) {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("-------");
            }
          }
        }
        return label;
      }
    }
    return new PDestination(s);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel4 p = new Parcel4();
    Destination d = p.dest("Tanzania");
  }
  //: c08:Parcel5.java
}
// Nesting a class within a scope.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
public class Parcel5 {
  private void internalTracking(boolean b) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel5.internalTracking");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:b="+b);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (b) {
      class TrackingSlip {
        // vars
        private String id;
        TrackingSlip(String s) {
          { // generated for flow-trace-debugging
            boolean fullstack;
            if (System.getProperty("tru_deb","0").equals("1")) {
              StackTraceElement[] stea=(new Throwable()).getStackTrace();
              int l=stea.length;
            if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
              for (int j=0;j<l;j++) {
                for (int i=0;i<l;i++) System.err.print(" ");
                if (stea[j].isNativeMethod()) {
                  System.err.print("!");
                } else {
                  System.err.print("*");
                }
                System.err.println(stea[j]);
              }
            } else {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("TrackingSlip.TrackingSlip");
            }
              if (System.getProperty("tru_deb_args","0").equals("1")) {
                for (int i=0;i<=l;i++) System.err.print(" ");
                System.err.println("1:s="+s);
              }
              if (fullstack) {
                for (int i=0;i<l;i++) System.err.print(" ");
                System.err.println("-------");
              }
            }
          }
          id = s;
        }
        String getSlip() {
          { // generated for flow-trace-debugging
            boolean fullstack;
            if (System.getProperty("tru_deb","0").equals("1")) {
              StackTraceElement[] stea=(new Throwable()).getStackTrace();
              int l=stea.length;
            if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
              for (int j=0;j<l;j++) {
                for (int i=0;i<l;i++) System.err.print(" ");
                if (stea[j].isNativeMethod()) {
                  System.err.print("!");
                } else {
                  System.err.print("*");
                }
                System.err.println(stea[j]);
              }
            } else {
              for (int i=0;i<l;i++) System.err.print(" ");
              System.err.println("TrackingSlip.getSlip");
            }
              if (fullstack) {
                for (int i=0;i<l;i++) System.err.print(" ");
                System.err.println("-------");
              }
            }
          }
          return id;
        }
      }
      TrackingSlip ts = new TrackingSlip("slip");
      String s = ts.getSlip();
    }
    // Can't use it here! Out of scope:
    //! TrackingSlip ts = new TrackingSlip("x")
  }
  public void track() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel5.track");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    internalTracking(true);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel5 p = new Parcel5();
    p.track();
  }
  //: c08:Parcel6.java
  // A method that returns an anonymous inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Parcel6 {
  public Contents cont() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel6.cont");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Contents() {
      private int i = 11;
      public int value() {
        return i;
      }
    }; // Semicolon required in this case
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel6 p = new Parcel6();
    Contents c = p.cont();
  }
  //: c08:Parcel7.java
}
// An anonymous inner class that calls
// the base-class constructor.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
public class Parcel7 {
  public Wrapping wrap(int x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel7.wrap");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Base constructor call:
    return new Wrapping(x) {
      //****************************************
      // Pass constructor argument.
      //****************************************
      public int value() {
        return super.value() * 47;
      }
    }; // Semicolon required
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel7 p = new Parcel7();
    Wrapping w = p.wrap(10);
  }
  //: c08:Parcel8.java
}
// An anonymous inner class that performs
// initialization. A briefer version of Parcel4.java.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
public class Parcel8 {
  // Argument must be final to use inside
  // anonymous inner class:
  public Destination dest(final String dest) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel8.dest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:dest="+dest);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Destination() {
      private String label = dest;
      public String readLabel() {
        return label;
      }
    };
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel8 p = new Parcel8();
    Destination d = p.dest("Tanzania");
  }
  //: c08:Parcel9.java
  // Using "instance initialization" to perform
  // construction on an anonymous inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Parcel9 {
  // vars
  private static Test monitor = new Test();
  public Destination dest(final String dest, final float price) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel9.dest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:dest="+dest);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:price="+price);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new Destination() {
      private int cost;
      //****************************************
      // Instance initialization for each object:
      //****************************************
      {
        cost = Math.round(price);
        if (cost > 100) {
          System.out.println("Over budget!");
        }
      }
      private String label = dest;
      public String readLabel() {
        return label;
      }
    };
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel9 p = new Parcel9();
    Destination d = p.dest("Tanzania", 101.395F);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Over budget!"
    });
    //// Resuming generated code
  }
  //: c08:RandVals.java
}
// Initializing interface fields with
// non-constant initializers.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
import java.util.*;
public interface RandVals {
  // vars
  Random rand         = new Random();
  int    randomInt    = rand.nextInt(10);
  long   randomLong   = rand.nextLong()   * 10;
  float  randomFloat  = rand.nextLong()   * 10;
  double randomDouble = rand.nextDouble() * 10;
  //: c08:Sequence.java
  // Holds a sequence of Objects.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
interface Selector {
  boolean end();
  Object current();
  void next();
}
public class Sequence {
  // vars
  private static Test monitor = new Test();
  private Object[] objects;
  private int next = 0;
  public Sequence(int size) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sequence.Sequence");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:size="+size);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    objects = new Object[size];
  }
  public void add(Object x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sequence.add");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (next < objects.length) {
      objects[next++] = x;
    }
  }
  private class SSelector implements Selector {
    // vars
    private int i = 0;
    public boolean end() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("SSelector.end");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i == objects.length;
    }
    public Object current() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("SSelector.current");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return objects[i];
    }
    public void next() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("SSelector.next");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      if (i < objects.length) {
        i++;
      }
    }
  }
  public Selector getSelector() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Sequence.getSelector");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new SSelector();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Sequence sequence = new Sequence(10);
    for (int i = 0; i < 10; i++) {
      sequence.add(Integer.toString(i));
    }
    Selector selector = sequence.getSelector();
    while (!selector.end()) {
      System.out.println(selector.current());
      selector.next();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    });
    //// Resuming generated code
  }
  //: c08:TestBed.java
  // Putting test code in a nested class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class TestBed {
  public TestBed() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("TestBed.TestBed");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("TestBed.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("f()");
  }
  public static class Tester {
    public static void main(String[] args) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("Tester.main");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:args="+args);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      TestBed t = new TestBed();
      t.f();
    }
  }
  //: c08:TestParcel.java
  // Returning a reference to an inner class.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
class Parcel3 {
  private class PContents implements Contents {
    // vars
    private int i = 11;
    public int value() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("PContents.value");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return i;
    }
  }
  protected class PDestination implements Destination {
    // vars
    private String label;
    private PDestination(String whereTo) {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("PDestination.PDestination");
        }
          if (System.getProperty("tru_deb_args","0").equals("1")) {
            for (int i=0;i<=l;i++) System.err.print(" ");
            System.err.println("1:whereTo="+whereTo);
          }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      label = whereTo;
    }
    public String readLabel() {
      { // generated for flow-trace-debugging
        boolean fullstack;
        if (System.getProperty("tru_deb","0").equals("1")) {
          StackTraceElement[] stea=(new Throwable()).getStackTrace();
          int l=stea.length;
        if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
          for (int j=0;j<l;j++) {
            for (int i=0;i<l;i++) System.err.print(" ");
            if (stea[j].isNativeMethod()) {
              System.err.print("!");
            } else {
              System.err.print("*");
            }
            System.err.println(stea[j]);
          }
        } else {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("PDestination.readLabel");
        }
          if (fullstack) {
            for (int i=0;i<l;i++) System.err.print(" ");
            System.err.println("-------");
          }
        }
      }
      return label;
    }
  }
  public Destination dest(String s) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel3.dest");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new PDestination(s);
  }
  public Contents cont() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Parcel3.cont");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return new PContents();
  }
}
public class TestParcel {
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    Parcel3 p = new Parcel3();
    Contents c = p.cont();
    Destination d = p.dest("Tanzania");
    // Illegal -- can't access private class:
    //! Parcel3.PContents pc = p.new PContents()
  }
  //: c08:TestRandVals.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class TestRandVals {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println(RandVals.randomInt);
    System.out.println(RandVals.randomLong);
    System.out.println(RandVals.randomFloat);
    System.out.println(RandVals.randomDouble);
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "%% -?\\d+",
      "%% -?\\d+",
      "%% -?\\d\\.\\d+E?-?\\d+",
      "%% -?\\d\\.\\d+E?-?\\d+"
    });
    //// Resuming generated code
  }
  //: c08:Wrapping.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Wrapping {
  // vars
  private int i;
  public Wrapping(int x) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Wrapping.Wrapping");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    i = x;
  }
  public int value() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Wrapping.value");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return i;
  }
  //: c09:AlwaysFinally.java
  // Finally is always executed.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class FourException extends Exception {
}
public class AlwaysFinally {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    System.out.println("Entering first try block");
    try {
      System.out.println("Entering second try block");
      try {
        throw new FourException();
      } finally {
        System.out.println("finally in 2nd try block");
      }
    } catch (FourException e) {
      System.err.println("Caught FourException in 1st try block");
    } finally {
      System.err.println("finally in 1st try block");
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Entering first try block",
      "Entering second try block",
      "finally in 2nd try block",
      "Caught FourException in 1st try block",
      "finally in 1st try block"
    });
    //// Resuming generated code
  }
  //: c09:Cleanup.java
  // Paying attention to exceptions in constructors.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.io.*;
class InputFile {
  // vars
  private BufferedReader in;
  public InputFile(String fname) throws Exception{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InputFile.InputFile");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:fname="+fname);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      in = new BufferedReader(new FileReader(fname));
      // Other code that might throw exceptions
    } catch (FileNotFoundException e) {
      System.err.println("Could not open " + fname);
      // Wasn't open, so don't close it
      throw e;
    } catch (Exception e) {
      // All other exceptions must close it
      try {
        in.close();
      } catch (IOException e2) {
        System.err.println("in.close() unsuccessful");
      }
      throw e;                                     // Rethrow
    } finally {
      // Don't close it here!!!
    }
  }
  public String getLine() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InputFile.getLine");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    String s;
    try {
      s = in.readLine();
    } catch (IOException e) {
      throw new RuntimeException("readLine() failed");
    }
    return s;
  }
  public void dispose() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("InputFile.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      in.close();
      System.out.println("dispose() successful");
    } catch (IOException e2) {
      throw new RuntimeException("in.close() failed");
    }
  }
}
public class Cleanup {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      InputFile in = new InputFile("Cleanup.java");
      String s;
      int i = 1;
      while ((s = in.getLine()) != null) {
        //****************************************
        // Perform line-by-line processing here...
        //****************************************
      }
      in.dispose();
    } catch (Exception e) {
      System.err.println("Caught Exception in main");
      e.printStackTrace();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "dispose() successful"
    });
    //// Resuming generated code
  }
  //: c09:DynamicFields.java
  // A Class that dynamically adds fields to itself.
  // Demonstrates exception chaining.
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class DynamicFieldsException extends Exception {
}
public class DynamicFields {
  // vars
  private static Test monitor = new Test();
  private Object[][] fields;
  public DynamicFields(int initialSize) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.DynamicFields");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:initialSize="+initialSize);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    fields = new Object[initialSize][2];
    for (int i = 0; i < initialSize; i++) {
      fields[i] = new Object[] { null, null };
    }
  }
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    StringBuffer result = new StringBuffer();
    for (int i = 0; i < fields.length; i++) {
      result.append(fields[i][0]);
      result.append(": ");
      result.append(fields[i][1]);
      result.append("\n");
    }
    return result.toString();
  }
  private int hasField(String id) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.hasField");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    for (int i = 0; i < fields.length; i++) {
      if (id.equals(fields[i][0])) {
        return i;
      }
    }
    return -1;
  }
  private int getFieldNumber(String id) throws NoSuchFieldException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.getFieldNumber");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    int fieldNum = hasField(id);
    if (fieldNum == -1) {
      throw new NoSuchFieldException();
    }
    return fieldNum;
  }
  private int makeField(String id) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.makeField");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    for (int i = 0; i < fields.length; i++) {
      if (fields[i][0] == null) {
        fields[i][0] = id;
        return i;
      }
    }
    // No empty fields. Add one:
    Object[][]tmp = new Object[fields.length + 1][2];
    for (int i = 0; i < fields.length; i++) {
      tmp[i] = fields[i];
    }
    for (int i = fields.length; i < tmp.length; i++) {
      tmp[i] = new Object[] { null, null };
    }
    fields = tmp;
    // Reursive call with expanded fields:
    return makeField(id);
  }
  public Object getField(String id) throws NoSuchFieldException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.getField");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return fields[getFieldNumber(id)][1];
  }
  public Object setField(String id, Object value) throws DynamicFieldsException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("DynamicFields.setField");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:id="+id);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:value="+value);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    if (value == null) {
      // Most exceptions don't have a "cause" constructor.
      // In these cases you must use initCause(),
      // available in all Throwable subclasses.
      DynamicFieldsException dfe = new DynamicFieldsException();
      dfe.initCause(new NullPointerException());
      throw dfe;
    }
    int fieldNumber = hasField(id);
    if (fieldNumber == -1) {
      fieldNumber = makeField(id);
    }
    Object result = null;
    try {
      result = getField(id);                       // Get old value
    } catch (NoSuchFieldException e) {
      // Use constructor that takes "cause":
      throw new RuntimeException(e);
    }
    fields[fieldNumber][1] = value;
    return result;
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    DynamicFields df = new DynamicFields(3);
    System.out.println(df);
    try {
      df.setField("d"       , "A value for d");
      df.setField("number"  , new Integer(47));
      df.setField("number2" , new Integer(48));
      System.out.println(df);
      df.setField("d"       , "A new value for d");
      df.setField("number3" , new Integer(11));
      System.out.println(df);
      System.out.println(df.getField("d"));
      Object field = df.getField("a3");            // Exception
    } catch (NoSuchFieldException e) {
      throw new RuntimeException(e);
    } catch (DynamicFieldsException e) {
      throw new RuntimeException(e);
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "null: null",
      "null: null",
      "null: null",
      "",
      "d: A value for d",
      "number: 47",
      "number2: 48",
      "",
      "d: A new value for d",
      "number: 47",
      "number2: 48",
      "number3: 11",
      "",
      "A value for d",
      "Exception in thread \"main\" " +
      "java.lang.RuntimeException: " +
      "java.lang.NoSuchFieldException",
      "\tat DynamicFields.main(DynamicFields.java:98)",
      "Caused by: java.lang.NoSuchFieldException",
      "\tat DynamicFields.getFieldNumber(" +
      "DynamicFields.java:37)",
      "\tat DynamicFields.getField(DynamicFields.java:58)",
      "\tat DynamicFields.main(DynamicFields.java:96)"
    });
    //// Resuming generated code
  }
  //: c09:ExceptionMethods.java
  // Demonstrating the Exception Methods.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class ExceptionMethods {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      throw new Exception("My Exception");
    } catch (Exception e) {
      System.err.println("Caught Exception");
      System.err.println("getMessage():" + e.getMessage());
      System.err.println("getLocalizedMessage():" + e.getLocalizedMessage());
      System.err.println("toString():" + e);
      System.err.println("printStackTrace():");
      e.printStackTrace();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Caught Exception",
      "getMessage():My Exception",
      "getLocalizedMessage():My Exception",
      "toString():java.lang.Exception: My Exception",
      "printStackTrace():",
      "java.lang.Exception: My Exception",
      "%% \tat ExceptionMethods.main\\(.*\\)"
    });
    //// Resuming generated code
  }
  //: c09:ExtraFeatures.java
  // Further embellishment of exception classes.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class MyException2 extends Exception {
  // vars
  private int x;
  public MyException2() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException2.MyException2");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public MyException2(String msg) {
    super(msg);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException2.MyException2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:msg="+msg);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public MyException2(String msg, int x) {
    super(msg);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException2.MyException2");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:msg="+msg);
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("2:x="+x);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    this.x = x;
  }
  public int val() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException2.val");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return x;
  }
  public String getMessage() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException2.getMessage");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return "Detail Message: "+ x + " "+ super.getMessage();
  }
}
public class ExtraFeatures {
  // vars
  private static Test monitor = new Test();
  public static void f() throws MyException2{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ExtraFeatures.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throwing MyException2 from f()");
    throw new MyException2();
  }
  public static void g() throws MyException2{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ExtraFeatures.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throwing MyException2 from g()");
    throw new MyException2("Originated in g()");
  }
  public static void h() throws MyException2{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ExtraFeatures.h");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throwing MyException2 from h()");
    throw new MyException2("Originated in h()", 47);
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      f();
    } catch (MyException2 e) {
      e.printStackTrace();
    }
    try {
      g();
    } catch (MyException2 e) {
      e.printStackTrace();
    }
    try {
      h();
    } catch (MyException2 e) {
      e.printStackTrace();
      System.err.println("e.val() = " + e.val());
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Throwing MyException2 from f()",
      "MyException2: Detail Message: 0 null",
      "%% \tat ExtraFeatures.f\\(.*\\)",
      "%% \tat ExtraFeatures.main\\(.*\\)",
      "Throwing MyException2 from g()",
      "MyException2: Detail Message: 0 Originated in g()",
      "%% \tat ExtraFeatures.g\\(.*\\)",
      "%% \tat ExtraFeatures.main\\(.*\\)",
      "Throwing MyException2 from h()",
      "MyException2: Detail Message: 47 Originated in h()",
      "%% \tat ExtraFeatures.h\\(.*\\)",
      "%% \tat ExtraFeatures.main\\(.*\\)",
      "e.val() = 47"
    });
    //// Resuming generated code
  }
  //: c09:FinallyWorks.java
  // The finally clause is always executed.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class ThreeException extends Exception {
}
public class FinallyWorks {
  // vars
  private static Test monitor = new Test();
  static int count = 0;
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    while (true) {
      try {
        // Post-increment is zero first time:
        if (count++ == 0) {
          throw new ThreeException();
        }
        System.out.println("No exception");
      } catch (ThreeException e) {
        System.err.println("ThreeException");
      } finally {
        System.err.println("In finally clause");
        if (count == 2) {
          break; // out of "while";
        }
      }
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "ThreeException",
      "In finally clause",
      "No exception",
      "In finally clause"
    });
    //// Resuming generated code
  }
  //: c09:FullConstructors.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class MyException extends Exception {
  public MyException() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException.MyException");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public MyException(String msg) {
    super(msg);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MyException.MyException");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:msg="+msg);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class FullConstructors {
  // vars
  private static Test monitor = new Test();
  public static void f() throws MyException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FullConstructors.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throwing MyException from f()");
    throw new MyException();
  }
  public static void g() throws MyException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("FullConstructors.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throwing MyException from g()");
    throw new MyException("Originated in g()");
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      f();
    } catch (MyException e) {
      e.printStackTrace();
    }
    try {
      g();
    } catch (MyException e) {
      e.printStackTrace();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Throwing MyException from f()",
      "MyException",
      "%% \tat FullConstructors.f\\(.*\\)",
      "%% \tat FullConstructors.main\\(.*\\)",
      "Throwing MyException from g()",
      "MyException: Originated in g()",
      "%% \tat FullConstructors.g\\(.*\\)",
      "%% \tat FullConstructors.main\\(.*\\)"
    });
    //// Resuming generated code
  }
  //: c09:Human.java
  // Catching exception hierarchies.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class Annoyance extends Exception {
}
class Sneeze extends Annoyance {
}
public class Human {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      throw new Sneeze();
    } catch (Sneeze s) {
      System.err.println("Caught Sneeze");
    } catch (Annoyance a) {
      System.err.println("Caught Annoyance");
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Caught Sneeze"
    });
    //// Resuming generated code
  }
  //: c09:LostMessage.java
  // How an exception can be lost.
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class VeryImportantException extends Exception {
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("VeryImportantException.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return "A very important exception!";
  }
}
class HoHumException extends Exception {
  public String toString() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("HoHumException.toString");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return "A trivial exception";
  }
}
public class LostMessage {
  // vars
  private static Test monitor = new Test();
  void f() throws VeryImportantException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LostMessage.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    throw new VeryImportantException();
  }
  void dispose() throws HoHumException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LostMessage.dispose");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    throw new HoHumException();
  }
  public static void main(String[] args) throws Exception{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("LostMessage.main");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:args="+args);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    LostMessage lm = new LostMessage();
    try {
      lm.f();
    } finally {
      lm.dispose();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Exception in thread \"main\" A trivial exception",
      "\tat LostMessage.dispose(LostMessage.java:24)",
      "\tat LostMessage.main(LostMessage.java:31)"
    });
    //// Resuming generated code
  }
  //: c09:MainException.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import java.io.*;
public class MainException {
  // Pass all exceptions to the console:
  public static void main(String[] args) throws Exception{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("MainException.main");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:args="+args);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    // Open the file:
    FileInputStream file = new FileInputStream("MainException.java");
    // Use the file ...
    // Close the file:
    file.close();
  }
  //: c09:NeverCaught.java
  // Ignoring RuntimeExceptions.
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class NeverCaught {
  // vars
  private static Test monitor = new Test();
  static void f() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("NeverCaught.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    throw new RuntimeException("From f()");
  }
  static void g() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("NeverCaught.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    f();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    g();
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Exception in thread \"main\" " +
      "java.lang.RuntimeException: From f()",
      "        at NeverCaught.f(NeverCaught.java:7)",
      "        at NeverCaught.g(NeverCaught.java:10)",
      "        at NeverCaught.main(NeverCaught.java:13)"
    });
    //// Resuming generated code
  }
  //: c09:OnOffException1.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class OnOffException1 extends Exception {
  //: c09:OnOffException2.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class OnOffException2 extends Exception {
  //: c09:OnOffSwitch.java
  // Why use finally?
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class OnOffSwitch {
  // vars
  private static Switch sw = new Switch();
  public static void f() throws OnOffException1,OnOffException2{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OnOffSwitch.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      sw.on();
      // Code that can throw exceptions...
      f();
      sw.off();
    } catch (OnOffException1 e) {
      System.err.println("OnOffException1");
      sw.off();
    } catch (OnOffException2 e) {
      System.err.println("OnOffException2");
      sw.off();
    }
  }
  //: c09:RethrowNew.java
  // Rethrow a different object from the one that was caught.
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class OneException extends Exception {
  public OneException(String s) {
    super(s);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("OneException.OneException");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
class TwoException extends Exception {
  public TwoException(String s) {
    super(s);
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("TwoException.TwoException");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
}
public class RethrowNew {
  // vars
  private static Test monitor = new Test();
  public static void f() throws OneException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RethrowNew.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("originating the exception in f()");
    throw new OneException("thrown from f()");
  }
  public static void main(String[] args) throws TwoException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("RethrowNew.main");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:args="+args);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      f();
    } catch (OneException e) {
      System.err.println("Caught in main, e.printStackTrace()");
      e.printStackTrace();
      throw new TwoException("from main()");
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "originating the exception in f()",
      "Caught in main, e.printStackTrace()",
      "OneException: thrown from f()",
      "\tat RethrowNew.f(RethrowNew.java:18)",
      "\tat RethrowNew.main(RethrowNew.java:22)",
      "Exception in thread \"main\" " +
      "TwoException: from main()",
      "\tat RethrowNew.main(RethrowNew.java:28)"
    });
    //// Resuming generated code
  }
  //: c09:Rethrowing.java
  // Demonstrating fillInStackTrace()
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
public class Rethrowing {
  // vars
  private static Test monitor = new Test();
  public static void f() throws Exception{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Rethrowing.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("originating the exception in f()");
    throw new Exception("thrown from f()");
  }
  public static void g() throws Throwable{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Rethrowing.g");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      f();
    } catch (Exception e) {
      System.err.println("Inside g(),e.printStackTrace()");
      e.printStackTrace();
      throw e;                                     // 17
      // throw e.fillInStackTrace()	18
    }
  }
  public static void main(String[] args) throws Throwable{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Rethrowing.main");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:args="+args);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      g();
    } catch (Exception e) {
      System.err.println("Caught in main, e.printStackTrace()");
      e.printStackTrace();
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "originating the exception in f()",
      "Inside g(),e.printStackTrace()",
      "java.lang.Exception: thrown from f()",
      "%% \tat Rethrowing.f(.*?)",
      "%% \tat Rethrowing.g(.*?)",
      "%% \tat Rethrowing.main(.*?)",
      "Caught in main, e.printStackTrace()",
      "java.lang.Exception: thrown from f()",
      "%% \tat Rethrowing.f(.*?)",
      "%% \tat Rethrowing.g(.*?)",
      "%% \tat Rethrowing.main(.*?)"
    });
    //// Resuming generated code
  }
  //: c09:SimpleExceptionDemo.java
  // Inheriting your own exceptions.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
class SimpleException extends Exception {
}
public class SimpleExceptionDemo {
  // vars
  private static Test monitor = new Test();
  public void f() throws SimpleException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("SimpleExceptionDemo.f");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    System.out.println("Throw SimpleException from f()");
    throw new SimpleException();
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    SimpleExceptionDemo sed = new SimpleExceptionDemo();
    try {
      sed.f();
    } catch (SimpleException e) {
      System.err.println("Caught it!");
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "Throw SimpleException from f()",
      "Caught it!"
    });
    //// Resuming generated code
  }
  //: c09:StormyInning.java
  // Overridden methods may throw only the exceptions
}
// specified in their base-class versions, or exceptions
// derived from the base-class exceptions.
// From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
// www.BruceEckel.com. See copyright notice in CopyRight.txt.
class BaseballException extends Exception {
}
class Foul extends BaseballException {
}
class Strike extends BaseballException {
}
abstract class Inning {
  public Inning() throws BaseballException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Inning.Inning");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public void event() throws BaseballException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Inning.event");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // Doesn't actually have to throw anything
  public abstract void atBat() throws Strike, Foul;
  public void walk() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Inning.walk");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // Throws no checked exceptions
}
class StormException extends Exception {
}
class RainedOut extends StormException {
}
class PopFoul extends Foul {
}
interface Storm {
  public void event() throws RainedOut;
  public void rainHard() throws RainedOut;
}
public class StormyInning extends Inning implements Storm {
  // OK to add new exceptions for constructors, but you
  // must deal with the base constructor exceptions:
  public StormyInning() throws RainedOut, BaseballException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("StormyInning.StormyInning");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public StormyInning(String s) throws Foul, BaseballException{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("StormyInning.StormyInning");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:s="+s);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // Regular methods must conform to base class:
  //! void walk	 	throws PopFoul
  // Interface CANNOT add exceptions to existing
  // methods from the base class:
  //! public void event	 	throws RainedOut
  // If the method doesn't already exist in the
  // base class, the exception is OK:
  public void rainHard() throws RainedOut{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("StormyInning.rainHard");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // You can choose to not throw any exceptions,
  // even if the base version does:
  public void event() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("StormyInning.event");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  // Overridden methods can throw inherited exceptions:
  public void atBat() throws PopFoul{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("StormyInning.atBat");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
  }
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      StormyInning si = new StormyInning();
      si.atBat();
    } catch (PopFoul e) {
      System.err.println("Pop foul");
    } catch (RainedOut e) {
      System.err.println("Rained out");
    } catch (BaseballException e) {
      System.err.println("Generic baseball exception");
    }
    // Strike not thrown in derived version.
    try {
      // What happens if you upcast?
      Inning i = new StormyInning();
      i.atBat();
      // You must catch the exceptions from the
    // base-class version of the method:
    } catch (Strike e) {
      System.err.println("Strike");
    } catch (Foul e) {
      System.err.println("Foul");
    } catch (RainedOut e) {
      System.err.println("Rained out");
    } catch (BaseballException e) {
      System.err.println("Generic baseball exception");
    }
  }
  //: c09:Switch.java
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class Switch {
  // vars
  private boolean state = false;
  public boolean read() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Switch.read");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    return state;
  }
  public void on() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Switch.on");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    state = true;
  }
  public void off() {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("Switch.off");
      }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    state = false;
  }
  //: c09:ThrowOut.java
  // {ThrowsException}
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class ThrowOut {
  public static void main(String[] args) throws Throwable{
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("ThrowOut.main");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:args="+args);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      throw new Throwable();
    } catch (Exception e) {
      System.err.println("Caught in main()");
    }
  }
  //: c09:TurnOffChecking.java
  // "Turning off" Checked exceptions.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
import com.bruceeckel.simpletest.*;
import java.io.*;
class WrapCheckedException {
  void throwRuntimeException(int type) {
    { // generated for flow-trace-debugging
      boolean fullstack;
      if (System.getProperty("tru_deb","0").equals("1")) {
        StackTraceElement[] stea=(new Throwable()).getStackTrace();
        int l=stea.length;
      if (fullstack=(System.getProperty("tru_deb_fullstack","0").equals("1"))) {
        for (int j=0;j<l;j++) {
          for (int i=0;i<l;i++) System.err.print(" ");
          if (stea[j].isNativeMethod()) {
            System.err.print("!");
          } else {
            System.err.print("*");
          }
          System.err.println(stea[j]);
        }
      } else {
        for (int i=0;i<l;i++) System.err.print(" ");
        System.err.println("WrapCheckedException.throwRuntimeException");
      }
        if (System.getProperty("tru_deb_args","0").equals("1")) {
          for (int i=0;i<=l;i++) System.err.print(" ");
          System.err.println("1:type="+type);
        }
        if (fullstack) {
          for (int i=0;i<l;i++) System.err.print(" ");
          System.err.println("-------");
        }
      }
    }
    try {
      switch (type) {
        case 0 :
        {
          throw new FileNotFoundException();
        }
        case 1 :
        {
          throw new IOException();
        }
        case 2 :
        {
          throw new RuntimeException("Where am I?");
        }
        default :
        {
          return;
        }
      }
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
class SomeOtherException extends Exception {
}
public class TurnOffChecking {
  // vars
  private static Test monitor = new Test();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    WrapCheckedException wce = new WrapCheckedException();
    // You can call f() without a try block, and let
    // RuntimeExceptions go out of the method:
    wce.throwRuntimeException(3);
    // Or you can choose to catch exceptions:
    for (int i = 0; i < 4; i++) {
      try {
        if (i < 3) {
          wce.throwRuntimeException(i);
        } else {
          throw new SomeOtherException();
        }
      } catch (SomeOtherException e) {
        System.out.println("SomeOtherException: " + e);
      } catch (RuntimeException re) {
        try {
          throw re.getCause();
        } catch (FileNotFoundException e) {
          System.out.println("FileNotFoundException: " + e);
        } catch (IOException e) {
          System.out.println("IOException: " + e);
        } catch (Throwable e) {
          System.out.println("Throwable: " + e);
        }
      }
    }
    //// Hand written stuff	5
    monitor.expect(new String[] {
      "FileNotFoundException: " +
      "java.io.FileNotFoundException",
      "IOException: java.io.IOException",
      "Throwable: java.lang.RuntimeException: Where am I?",
      "SomeOtherException: SomeOtherException"
    });
    //// Resuming generated code
  }
  //: c09:WithFinally.java
  // Finally Guarantees cleanup.
  // From 'Thinking in Java, 3rd ed.' (c) Bruce Eckel 2002
  // www.BruceEckel.com. See copyright notice in CopyRight.txt.
}
public class WithFinally {
  // vars
  static Switch sw = new Switch();
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-version")) {
      System.out.println("version:");
      return;
    }
    try {
      sw.on();
      // Code that can throw exceptions...
      OnOffSwitch.f();
    } catch (OnOffException1 e) {
      System.err.println("OnOffException1");
    } catch (OnOffException2 e) {
      System.err.println("OnOffException2");
    } finally {
      sw.off();
    }
  }
}
