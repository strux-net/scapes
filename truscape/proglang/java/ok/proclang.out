//
// Autogenerated from java_tru using STDIN
// do not edit this file, look for STDIN and change this
// or you may loose all your changes and probably choose the wrong method.
// goto http://www.strux.net to find more information.
//
import gnu.getopt.Getopt;
//// Hand written stuff	1
freeline 1
freeline 2	with tab
 freeline 3	with tab
     freeline 4
freeline with special character $. 'quote' "double_quote" @ARGV
D	"a line beginning with D"
//// Resuming generated code
//  comment
package test;
import java.awt.*;
//****************************************
// freeline 1
// freeline 2	with tab
//  freeline 3	with tab
//      freeline 4
// freeline with special character $. 'quote' "double_quote" @ARGV
// D	"a line beginning with D"
//****************************************
interface i1 {
  public f1(int a);
}
class 1 {
  static void usage()
  {
    System.err.println("usage : shortdesc");
    System.err.println("  freeline 1");
    System.err.println("  freeline 2	with tab");
    System.err.println("   freeline 3	with tab");
    System.err.println("       freeline 4");
    System.err.println("  freeline with special character $. 'quote' \"double_quote\" @ARGV");
    System.err.println("  D	\"a line beginning with D\"");
    System.err.println("OPTIONS:");
    System.err.println("	-a	shortdesc a with special character $. 'quote' \"double_quote\" @ARGV");
    System.err.println("	-b	shortdesc b");
    System.err.println("	-c=num	shortdesc c");
    System.err.println("		no default for <num>");
    System.err.println("	-d=num	shortdesc d");
    System.err.println("		default for num is 30");
    System.err.println("	-n=num	shortdesc n");
    System.err.println("		default for num is 1.2");
    System.err.println("	-e=file	shortdesc e");
    System.err.println("		no default for <file>");
    System.err.println("	-f=file	shortdesc f");
    System.err.println("		default for file is /tmp/schrott");
    System.exit(1);
  }
  /**
  *  an autocomment for main
  */
  public static void main(String argv[]) {
    if (argv.length == 1 && argv[0].equals("-?")) {
      usage();
    }
    int opt_a = 0;
    int opt_b = 0;
    String opt_c = "";
    int opt_d = 30;
    float opt_n = 1.2f;
    String opt_e = "";
    String opt_f = "/tmp/schrott";
    Getopt option = new Getopt("STDIN", argv,"f:e:n:d:c:ba");
    int optchar;
    option.setOpterr(false); // We'll do our own error handling
    while ((optchar = option.getopt()) != -1) {
      // -a : shortdesc a with special character $. 'quote' "double_quote" @ARGV
      if (optchar == 'a') {
        opt_a++;
      }
      // -b : shortdesc b
      if (optchar == 'b') {
        opt_b++;
        stmt b;
      }
      // -c : shortdesc c
      if (optchar == 'c') {
        opt_c = option.getOptarg();
      }
      // -d : shortdesc d
      if (optchar == 'd') {
        opt_d = Integer.parseInt(option.getOptarg());
      }
      // -n : shortdesc n
      if (optchar == 'n') {
        opt_n = Float.valueOf(option.getOptarg());
      }
      // -e : shortdesc e
      if (optchar == 'e') {
        opt_e = option.getOptarg();
      stmt e;
      }
      // -f : shortdesc f
      if (optchar == 'f') {
        opt_f = option.getOptarg();
      stmt f;
      }
      if (optchar == '?') {
        System.err.println("Unknown option " + (char)option.getOptopt());
        usage();
      }
    }
    //****************************************
    // some comment tests
    //   with indent
    //****************************************
    if (commenttest1) {
      //****************************************
      // main commentline
      //****************************************
      // another comment
      //   with indent
      //****************************************
      if (commenttest2) {
        //****************************************
        // only a main commentline
        //****************************************
        statement;
      } else {
        //****************************************
        // to have more than 3 comments
        //   with indent
        //****************************************
        statement;
      }
    }
  }
  /**
  *  an autocomment for function 1
  */
  function 1() {
  }
  // vars
  var 1;
  /** comment var 2 */
  var 2;
  /** a var with name D */
  D;
  var 3 = {
    init 1,
    init 2,                                        // comment init 2
    D,                                             // "a value of a var with name D"
  };
  /** comment var 4 */
  var 4 = {
    init 1,
    init 2,                                        // comment init 2
  };
  function 1() {
    //****************************************
    // freeline 1
    // freeline 2	with tab
    //  freeline 3	with tab
    //      freeline 4
    // freeline with special character $. 'quote' "double_quote" @ARGV
    // D	"a line beginning with D"
    //****************************************
    while (true) {
      stmt;
    }
    while (true) {
      stmt 1;
      stmt 2;
      System.out.println("a D in a loop");
    }
    while (true) {
      stmt;
    }
    for (i=0;i<20;i=i+1) {
      System.out.println("ja");
    }
    for (i=0;i<10;i++) {
      forloopstatement;
    }
    for (i=0;i<10;i++) {
      forloopstatement;
    }
    while (expr) {
    }
    do {
    } while (!(expr));
    while (expr) {
      stmt;
    }
    do {
      stmt;
    } while (!(expr));
    while (expr) {
      stmt;
    }
    do {
      stmt;
    } while (!(expr));
    while (expr) {
      stmt 1;
      stmt 2;
    }
    do {
      stmt 1;
      stmt 2;
    } while (!(expr));
    if (expr1) {
      stmt1;
      System.out.println("a D in an if (tagged i)");
      more stuff inside D (tagged i);
      for (i=0;i<10;i++) {
        forloopstatement;
      }
      more stuff inside D (tagged t);
    } else {
      stmt2;
    }
    if (expr2) {
      truestmt2;
    }
    if (expr3) {
      truestmt3;
    } else {
      falsestmt3;
    }
    if (expr4) {
      truestmt4;
    } else if (expr5) {
      truestmt5;
    } else if (expr6) {
      truestmt6;
    } else if (expr7) {
      truestmt7;
    } else {
      falsestmt7;
    }
    if (expr8) {
    } else if (!(expr9)) {
      truestmt9;
    } else {
      falsestmt9;
    }
    if (!(expr10)) {
    }
    if (!(expr11)) {
      truestmt11;
    }
    if (!(expr12)) {
      truestmt12;
    } else {
      falsestmt12;
    }
    if (middlepart) {
    } else {
    }
    if (middlepart) {
    }
    if (-) {
    }
    if (leftpartmiddlepart) {
      statement;
    } else {
      stmnt;
    }
    if (leftpartmiddlepart) {
      statement;
    }
    if (leftpart-) {
      stmnt;
    }
    if (leftpartmiddlepartrightpart) {
      LeftOfStmtstatementRightOfStmt;
    } else {
      falsestmt;
    } else if (leftpart--rightpart) {
      LeftOfStmtfalsestmtRightOfStmt;
    }
    if (leftpartmiddlepartrightpart) {
      LeftOfStmtstatementRightOfStmt;
    }
    if (leftpart-rightpart) {
      LeftOfStmtfalsestmtRightOfStmt;
    }
    if (leftpart--rightpart) {
      LeftOfStmtfalsestmtRightOfStmt;
    }
    statement3;
    statement4;                                    // comment statement4
    System.out.println("magically printed");
    System.out.println("magically printed");       // comment magically printed
    //// Hand written stuff	5
//should be shifted to the very left
freeline 1
freeline 2	with tab
 freeline 3	with tab
     freeline 4
freeline with special character $. 'quote' "double_quote" @ARGV
D	"a line beginning with D"

    //// Resuming generated code
    //// Hand written stuff	5
    //should be indented properly
    freeline 1
    freeline 2	with tab
     freeline 3	with tab
         freeline 4
    freeline with special character $. 'quote' "double_quote" @ARGV
    D	"a line beginning with D"
    //// Resuming generated code
    s/a/ae/g;
    s/A/Ae/;
    s/b//;
    foo(a) + bar(
    foo(a) + bar(b);
    foo(a) + bar(b);c
    foo(1) + bar(2);
    foo(1.1) + bar(2.2);
    foo(one) + bar(two);
    a1b1
    d
    d1
    d1e
    d1e1
    d1e1f
    
    a2b2
    d
    d2
    d2e
    d2e2
    d2e2f
    
    a3b3
    d
    d3
    d3e
    d3e3
    d3e3f
    
    bar("one");
    baz(1);
    
    bar("two");
    baz(2);
    
    bar("three");
    baz(3);
    
    //  comment
    switch (i) {
      case 'a' :
      {
        'One';
        break;
      }
      case 'b' :
      {
        'two';
        switch (j) {
          case 'A' :
          {
            'eins';
            break;
          }
          case 'B' :
          {
            'zwei';
            break;
          }
          default :
          {
            'sau viel';
            break;
          }
        }
        break;
      }
      case 'c' :
      {
        'three';
        break;
      }
      default :
      {
        'something else';
        break;
      }
    }
    'cut';
    switch (i) {
      case 'a' :
      {
        'One';
      }
      case 'b' :
      {
        'two';
        switch (j) {
          case 'A' :
          {
            'eins';
            break;
          }
          case 'B' :
          {
            'zwei';
            break;
          }
          default :
          {
            'sau viel';
            break;
          }
        }
      }
      case 'c' :
      {
        'three';
      }
      default :
      {
        'something else';
      }
    }
    try {
      trystmt;
    } catch (execption1) {
      execption1stmt;
    } catch (execption2) {
      execption2stmt;
    } finally {
      finallystmt;
    }
    try {
      trystmt;
    } catch (execption1) {
      execption1stmt;
    } catch (execption2) {
      execption2stmt;
    } finally {
      finallystmt;
    }
  }
  function2(int y) throws Exception{
    foo();
  }
  public static void main(String argv[]) {
    foo();
    foo(a) + bar(
    foo(a) + bar(b);
    foo(a) + bar(b);c
    foo(1) + bar(2);
    foo(1.1) + bar(2.2);
    foo(one) + bar(two);
    a1b1
    d
    d1
    d1e
    d1e1
    d1e1f
    a2b2
    d
    d2
    d2e
    d2e2
    d2e2f
    a3b3
    d
    d3
    d3e
    d3e3
    d3e3f
    //  comment
  }
  public class troff extends tron {
    // private vars
    private int i;
    private int j;
    // vars
    currency euro;
    setme() {
      thirty=30;
    }
  }
  static {
    static_code();
  }
}
