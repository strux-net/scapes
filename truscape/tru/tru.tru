VERSION	3.0
USAGE	tru [Options] [<file> ....]

	produces a perl-script based on the input-files.

	the input-files describe a parser for structured text.

	find details in either of
	    ~/strux/doc/tru.html
	    ~/strux/doc/tru.txtTR
	or if you do not have the strux-tools installed
	    http://www.strux.net/strux_zip/strux/doc/tru.html

	per convention the input files have the extension .tru
OPTIONS
	q		Do not print any warnings
	s:file		Print some statistics to the file
	l:limit[100]	limit for recursions when expanding a group
WRITE
  s/^\s+$//;
BEGIN
  push @INC,"$ENV{HOME}/strux/lib";
  require "trusubs.pl";
READ
  if (/^#/) {
    return 1;
  }
ATTICREAD
  if ($_ eq 'groupend') {
    $ingroup--;
    $active_rule_nr = pop @Active_rule_nr_stack;
    return 1;
  }
FLUSH
  my($i);
  for ($i=0;$i<@_;$i++) {
    if ($_[$i] =~ /^  tru::parse\(/) {
      if ($_[$i+1] =~ /^  tru::parse\(/) {
        $_[$i] =~ s/\);$/,/;
      } else {
        $_[$i] =~ s/\);$/,)}/;
      }
    }
  }
  for ($i=$#_;$i>=0;$i--) {
    if ($_[$i] =~ /^  tru::parse\(/) {
      if ($i and $_[$i-1] =~ /^  tru::parse\(/) {
        $_[$i] =~ s/^  tru::parse\(/                 /;
      } else {
        $_[$i] =~ s/^  tru::parse\(/  {tru::parse\(   /;
      }
    }
  }
actions
  DOC
    >
	#!/usr/bin/perl
	#
	# Autogenerated from tru
	# do not edit this file
	# or you may loose all your changes and probably choose the wrong method.
	# goto http://www.struX.net to find more information.
	#
	if (\@ARGV == 1 and \$ARGV[0] eq '-?') {
	  usage();
	}
	push \@INC,"\$ENV{HOME}/strux/lib";
	require "trusupp.pl";
      setmark("mark_options");

	# the default UNMATCHED
	# may be overwritten by a given UNMATCHED
	\@{\$tru::actioncode{'args'}{'UNMATCHED'}}=(
	  q${sdel}UNMATCHED${sdel},
	);
	\$tru::actioncode{'>'}{'UNMATCHED'}=sub {
	  printf STDERR "\$0 - No match for \$ARGV \@ \$. : \$indent\$_\\n";
	};

	#actions start
	sub usage {
      setmark("mark_usage_action");
	  print STDERR do{my\$s;(\$s = << '  END')=~ s/^\t\t//gm;\$s};
      setmark("mark_usage");
	  END
      setmark("mark_optionIntro");
	  if (\$opt_vhelp) {
	    print STDERR "tru Options:\\n";
	    tru::showTruOptions()
	  } else {
	    print STDERR "\\n       -vhelp shows more options\\n"
	  }
	  exit 1;
	}
      setmark("mark_showVersion");
      setmark("mark_showOptions");
	##FLUSH
	sub tru::flush {
	  local(*_)=\\\@tru::O;
      setmark("mark_flush");
	  if (\$opt_debReverse) {
	    print \$_[\$opt_debReverse-1];
	  } else {
	    print \@_ if !\$opt_debug or \$opt_debActionMap;
	  }
	}
	##WRITE
	sub tru::write_apply {
      setmark("mark_WRITE");
	  return 0;
	}
	##BEGIN
	sub tru::begin {
      setmark("mark_BEGIN");
	}
	##NEWFILE
	sub tru::newfile {
      setmark("mark_NEWFILE");
	  \$. = 0;
	  0;
	}
	##READ
	sub tru::read {
      setmark("mark_READ");
	  0;
	}
	##ATTICREAD
	sub tru::atticread {
      setmark("mark_ATTICREAD");
	  0;
	}
	##SPLITAPPLY
	sub tru::splitapply {
	  local \$i = 0;
	  map {
      setmark("mark_SPLITAPPLY");
	  ;
	  } \@F;
	}
	##actions
      setmark("mark_actions");
	#actions end

      setmark("mark_hooks");

	\@Options = (
	  'o:s',
	  'q',
	  's:s',
	  'help',
	  'version',
	  'vhelp',
	  'ohelp',
	  'ovhelp',
	  'stream',
	  'debug',
	  'deball',
	  'debStructure',
	  'debActionMap:s',
	  'debRange:s',
	  'debReverse:s',
	  'structure',
	  'vstructure',
	  'groupExpand',
	  'source',
	  'macros',
	  'doc',
      setmark("mark_setOptions");
	);

	#here start
	##here text
      setmark("mark_here");
	#here end

	sub tru::check()
	{
	  local \$tru::emax = \$tru::gmax=-1;
	  local *tru::candidate; # is implicitely undef
	  while (1) {
      setmark("mark_structure");
	    last;
	  }
	  if (defined(&tru::candidate)) {
	    tru::candidate();
	    return 0;
	  }
	  return 1;
	} # check()
	tru::main();
    <
      for $Action ( sort keys %Args ) {
        atmark("mark_h_${Action}") {
	##  ${\(  join("\t",@{$Args{$Action}}) )}

	\@{\$tru::actioncode{'args'}{q$sdel$Action$sdel}}=(
          for $arg (@{$Args{$Action}}) {
	  q${sdel}${arg}${sdel},
          }
	);

          if (@{$Locals{$Action}}) {
	##    l\t${\(  join("\t",@{$Locals{$Action}}) )}
	\@{\$tru::actioncode{'locals'}{q$sdel$Action$sdel}}=(
          for $arg (@{$Locals{$Action}}) {
	  q${sdel}${arg}${sdel},
          }
	);
          }
        }
      }
      for $group ( sort keys %groups ) {
        if ( ! $groups{$group}{'refcount'} ) {
          warning("group never used",$group);
        }
      }
      statistics($opt_s) if ($opt_s);
  VERSION	v
    >
      atmark("mark_showVersion")
	VERSION\t$ARGV\t$v
  empty out line
    >
	  tru::parse('');
  out line
    >
      $indent =~ s/^\t//;
      s/\\/\\\\/g; #double all \ -es  for eval
	  tru::parse(q${sdel}$indent$_${sdel});
  stmt
    >
		$indent$_
  pit	CLEAR
    >
      if (!$Seen{$Action}{$pit}++) {
        usemark("mark_${pit}_${Action}");
	##    $pit
	\$tru::actioncode{'$pit'}{q$sdel$Action$sdel}=sub {
        setmark("mark_${pit}start_${Action}");
        setmark("mark_tmp");
	};
        unusemark();
        $tru::Marks{"mark_${pit}_${Action}"}[2] = $tru::Marks{"mark_tmp"}[2];
      }
      usemark("mark_${pit}_${Action}");
      if ($CLEAR) {
        usemark("mark_${pit}E_${Action}") if ($pit =~ /\]|\}|</);
	};
	# the previous assignment is overwritten (due to a CLEAR) here
	\$tru::actioncode{'$pit'}{$sdel$Action$sdel}=sub {
	##    $pit	CLEAR
      }
    <
      # [ (whole) or { (part) opened the hookblocks, here they are closed
      if ($pit =~ /\]|\}|</) {
        $tru::Marks{"mark_${pit}_${Action}"}[2] = $tru::Marks{"mark_${pit}start_${Action}"}[2]+0.01;
        setmark("mark_${pit}E_${Action}");
      }
      unusemark();
  l
    >
      shift @F;
      local $l;
      local @New;
      for $l (@F) {
        validityCheck($l);
        push @{$Locals{$Action}},$l;
      }
  Action
    >
      local $anz = @{$Args{$Action}};
      $anz = @F if @F < $anz;
      # check the duplicated args
      for (local $i=0;$i<$anz;$i++) {
        if ($F[$i] ne @{$Args{$Action}}[$i]) {
          syntax('arg-name redefinition',$F[$i], @{$Args{$Action}}[$i]);
        }
      }
      # check the new args
      for (local $i=$anz;$i<@F;$i++) {
        validityCheck($F[$i]);
        push @{$Args{$Action}},$F[$i];
      }
      usemark("mark_$tru::states[-2]");      # can be "actions" or "hooks"

      if (!$Seen{$Action}{'H'}++) {
        setmark("mark_h_${Action}");
        setmark("mark_d_${Action}");
        setmark("mark_>_${Action}");
        setmark("mark_-_${Action}");
        setmark("mark_<_${Action}");
        setmark("mark_[_${Action}");
        setmark("mark_{_${Action}");
        setmark("mark_}_${Action}");
        setmark("mark_]_${Action}");
        setmark("mark_n_${Action}");
      }
    <
      unusemark();
  Special
    >
      $Action = $Special;
  shortdesc
    >
      if (!$Seen{$Action}{'d'}++) {
        usemark("mark_d_${Action}");
	=$shortdesc
        setmark("mark_tmp");
	=cut
        unusemark();
        $tru::Marks{"mark_d_${Action}"}[2] = $tru::Marks{"mark_tmp"}[2];
      }
      usemark("mark_d_${Action}");
      ($ARGVtilded = $ARGV) =~ s:^$ENV{HOME}/:~/:;
	  file\t$ARGVtilded
		$indent$_
    <
      unusemark();
  doc_line
    >
      if ($_ ne '')
	\t$indent$_
      else
       |
  structure
    >
      @BranchIsOptional=@BranchCond=@BranchAction=@BranchState=@BranchRuleNr=@BranchIndicators=@BranchStar=@BranchExplicitLevel=@BranchLevels=@State=@I=();
      $active_rule_nr++;
      @State    = ("\q${sdel}DOC${sdel},");
      @I        = ("1,");
      $LS       = "1";
      usemark("mark_structure");
      ($ARGVtilded = $ARGV) =~ s:^$ENV{HOME}/:~/:;
	  ##file\t$ARGVtilded
      if ($ingroup)
	   #gstructure
      else
	  #structure
    <
      unusemark();
  group
    >
      usemark("mark_structure");
	    # groups start here
      ($ARGVtilded = $ARGV) =~ s:^$ENV{HOME}/:~/:;
      $active_rule_nr++;
	  ##file\t$ARGVtilded
	  #group
    <
	    # groups end here
      unusemark();
  group_name	comment
    >
      if (defined $groups{$group_name}) {
        syntax('cannot add to an existing group',$group_name);
      }
      $active_rule_nr++;
      $groups{$group_name}{'rule_nr'} = $active_rule_nr;
	  #  $_
  group_item
    >
      $active_rule_nr++;
	  #$indent$_
      push @{$groups{$group_name}{'content'}},"$indent$_";
  untie
    >
      $active_rule_nr++;
	  #    untie
      push @{$groups{$group_name}{'content'}},"  untie";
  structure_item
    l	ri	rl	creepLocked
    >
      $ri = $rindent;
      return if $structure_item =~ /^\s*$/;
      if ($ingroup)
	   #g	$rindent$_
      else
	  #	$rindent$_
      $creepLocked = StructureItem("$rindent$_");
    <
      if ($NrOfChilds and $creepLocked) {
	   #c	$ri$_
        StructureItem("$ri ");
      }
  stacked_call
    >
	##$indent$_
      ($s_action,$s_args) = /^>>([^\t]*)\t*(.*)/;
	  tru::macro_in_witharg(0,qq${sdel}$s_action${sdel},qq${sdel}$s_args${sdel});
  call
    >
	##$indent$_
      ($s_action,$s_args) = /^->([^\t]*)\t*(.*)/;
	  tru::macro_in_witharg(1,qq${sdel}$s_action${sdel},qq${sdel}$s_args${sdel});
  inside_call
    >
	##$indent$_
      ($s_action,$s_args) = /^-->([^\t]*)\t*(.*)\t+\{\s*/;
	  for (local \$tru::rpos = \@tru::actions, local \$tru::first_and_only_run,tru::macro_in_witharg(0,qq${sdel}$s_action${sdel},qq${sdel}$s_args${sdel});!\$tru::first_and_only_run;\$tru::first_and_only_run++,tru::macro_out_forced(\$tru::rpos)) {
  atmark
    >
	##$indent$_
      s/^atmark\((.+)\)//;
	  for (local \$tru::first_and_only_run,usemark($1);!\$tru::first_and_only_run;\$tru::first_and_only_run++,unusemark())$_
  option	shortdesc
    >
      local ($opt,$type,$default) = $option =~ /([^:]+):([^[]+)(?:\[(.*)\])?/;
      local $to;
      if ($opt) {
        my $stringopt =  ($default eq "" or $default =~ s/^"(.+)"$/$1/ or $default =~ s/^'(.+)'$/$1/ or $default !~ /^\d+(\.\d+)?$/);
        if ($default) {
          if ($stringopt) {
            $default = "'$default'";
          }
          atmark("mark_options") {
	\$opt_$opt=$default;
          }
        }
        if ($stringopt) {
          $to .= qq($opt=s);
        } else {
          if ($default =~ /\./) {
            $to .= qq($opt=f);
          } else {
            $to .= qq($opt=i);
          }
        }
      } else {
        $to .= $option;
      }
      atmark("mark_setOptions")
	  '$to',	# $shortdesc
      usemark("mark_showOptions");
			$_
    <
      unusemark();
  longdesc
    >
				$rindent$_
  usageline
    >
      atmark("mark_usage")
			$rindent$_
  FLUSH
    >
      usemark("mark_flush");
    <
      unusemark();
  special
    >
      usemark("mark_$special");
    <
      unusemark();
  here text
  ArrayName
    >
      if (!$HereSeen{$ArrayName}{'H'}++) {
        usemark("mark_here");
	##  $ArrayName
	map { s/^\\t// } \@$ArrayName = split ('\\n', << 'END' );
        setmark("mark_here_${ArrayName}");
	END
        unusemark();
      }
      usemark("mark_here_${ArrayName}");
    <
      unusemark();
  here text line
    >
		$rindent$_
  USAGE	short
    >
      if ($usageseen++) {
        if ($short) {
          warning('first usage should have shortdesc');
        }
      } else {
        # first occurance
        atmark("mark_usage_action") {
	##$_
          if ($short) {
	  print STDERR q${sdel}usage : $short${sdel},"\\n";
          } else {
            warning('first usage should have shortdesc');
          }
        }
      }
hooks
  mark_hooks
    [
	#haha
	#hooks start
	##hooks
    ]
	#hooks end
  mark_showVersion
    [
	#version start
	sub tru::showVersion {
	  print STDERR do{my\$s;(\$s = << '  END')=~ s/^VERSION\t/  /gm;\$s};
    ]
	  END
	  exit(0);
	}
	#version end
  mark_showOptions
    [
	##OPTIONS
	sub tru::showOptions {
	  print STDERR do{my\$s;(\$s = << '  END')=~ s/^\\t//gm;\$s=~s/^\\t([^\\t])/       -\$1/gm;\$s};
    ]
	  END
	}
  mark_setOptions
    [
      atmark("mark_optionIntro")
	  print STDERR "\\nOPTIONS:\\n";
	  tru::showOptions();
group
  action code
	out line			*	>*(substr($indent,0,1) eq "\t")
	empty out line				>*(substr($indent,0,7) eq "       ")	\|
	stacked_call			*	>*					\>>.*
	inside_call			*	>*					\-->.*
	call				*	>*					\->.*
	atmark				*	>*					atmark\(.*
	stmt				*	>*
structure
	special					=					ATTICREAD|READ|NEWFILE|SPLITAPPLY|WRITE|BEGIN
	 action code				=g
	VERSION	v				=					VERSION
	FLUSH					=					FLUSH
	 stmt				*	>*
	USAGE	[short]				=					USAGE
		usageline		*	>t*
	OPTIONS					=					OPTIONS
		option	shortdesc		>*
			longdesc	*	>t*
	here text				=					here text
	  ArrayName
		here text line		*	>t*
	actions					=					actions
	  Action			*
	    pit		[CLEAR]			=					<|-|>	CLEAR
	     action code			=g
	    l				*	=					l
	    shortdesc
	      doc_line			*	>*
	group					=					group
	  group_name	[comment]
		group_item		*	>t*
	    untie				=					untie
		group_item		*	>t*
	hooks					=					hooks
	  Action			*
	    pit		[CLEAR]			=					\[|\{|-|\}|\]|n		CLEAR
	     action code			=g
	    l				*	=					l
	    shortdesc
	      doc_line			*	>*
	structure				=					structure
		structure_item		*	>t*					.*
	EMPTY					=					.{0}
