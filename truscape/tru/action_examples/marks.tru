VERSION	3.2c
##	marks
##	  marks can be used to place output at specified places.
##	  They move with the output.
##        This means that if you use a mark a second time, the output will be put after
##        the output of the first mark-usage.
##
##	  To define a mark use
##	  code
##		setmark("markname");
#
##	  To use a mark use
##	  code
##		usemark("markname");
##	  and end the usage with
##	  code
##		unusemark();
#
##	  Another way to use a mark is
##	  code
##		atmark("markname") {
##		  a block of code
##		}
#
##	  usemark must pair with unusemark
##	  usemark and unusemark can spread across in,depth,out actions
##	  this means also that usemark can be in a different action than unusemark
##
##	  the argument to setmark(), usemark() and atmark() can be of any type
##	    usually you want to use string to have a meaningful name for the mark
##	    it can also be an integer or a float (if you need to count your marks)
##	    and lastely it can be a reference
##	      but this has the drawback, that tru is will not be able
##	      to adequately report text for an unset mark
##	    Objection : Marks of type int or reference cannot have hooks
##
##	  atmark("markname") { ... }
##	      cannot spread across in,depth,out actions
##	      must be the only statement in a line , as in
##	        code
##			atmark("mark_help") {
##			  a block of code
##			}
##	      not valid is
##	        code
##			if (cond) { atmark("mark_help") {
##			  # not valid, because atmark() is not the only statement in the line
##			  ....
##			  ....
##			}}
##	      also valid is
##	        code
##			atmark("mark_help")
##			{
##			  a block of code
##			}
##	      or even using the implicit forming of blocks for outstatements
##	        code
##			atmark("mark_help")
##			<tabs>smth to print
##			<tabs>smth more to print
##
##	      The following block
##	        code
##			atmark("markname") {
##			  a block of code
##			}
#
##	      is equvialent to
##	        code
##			usemark("markname")
##			  a block of code
##			unusemark()
#
##	  the order of setmark is relevant.
##	    If you have two (or more) setmark in direct succession then the order is preserved.
##
#
##	  to make a copy of a mark use
##	    code
##		clonemark("from","to")
##	  the "to"-mark will then point to the line where the "from"-mark points to.
##	  If you now usemark("to") then mark "from" will remain before the text.
##	  Only the "to"-mark will move along with the output.
##	  This is useful if you need the output in reverse order
##
##	  Note : There is a limit for the marks that can be set and the number of action-calls (via >>).
##	      The sum of these two numbers must not exceed 10000.
##	      The truer will detect an overflow and abort with an error-message.
#
##	  to unset a mark use
##	  code
##		undef $tru::HMarks{"markname"}
#
##	  marks don't work in stream-mode.
##	  marks can be used before they are defined, in which case the text is buffered until the mark will be set.
##	  used marks that were never unused will be automatically unused when the truer finishes.
#
##	mark hooks
##	  in the structure-section 'hooks' you can define hooks for each mark
##	    six kinds of hooks exist
##	        [	(pre-)  surrounds each setmark completetly if the mark was used
##	        ]	(post-) surrounds each setmark completetly if the mark was used
##	        {	surrounds each usemark (pre-usemark)
##	        -	surrounds each usemark (pre-usemark, depth)
##	        }	surrounds each usemark (post-usemark)
##	        n	used if the mark was never used
##	    hooks and actions share the same name-space.
##	    So don't give marks the name of an action.
##
##	    the order is as follows, for every setmark()
##	    code
##		[
##		{
##		-
##		usemark() or atmark()
##		}
##		{
##		-
##		usemark() or atmark()
##		}
##		]
##
##	    in  { , - and } $usemark_count holds the counter for usemark() rsp. atmark()
##	    $usemark_count is also meaningful after a usemark() rsp. atmark() in normal actions
##	    each hook has in $_ the same content that the calling action had when the mark was used *first*
##
##	Note : Do not confuse mark-hooks with the structure-hooks (like READ, WRITE, .... )

#	  example1 shows the using of a mark that was defined earlier
#	  example2 shows the using of a marks that will be defined after their usage
#	  example2 also shows what happens if marks are used that will never be defined
#	  example2 also shows the values of $usemark_count outside hooks
#	  example3 is for usemark() and unusemark()
#	  example4 demonstrates the relevance of the order of marks that are in direct succession
#	  example5 demonstrates how to unset a mark
#	  example6 demonstrates mark_hooks
#	  example7 demonstrates clonemark
#	  example8 demonstrates the different type of argument to setmark
#	  example9 demonstrates how the truer automatically unuses marks

actions
  example1
    >
	"example1" started. Mark for meta set in in-action. The mark is defined when using it.
      setmark("mark_1");
	"example1" finished
  text
    >
	$text
  meta1	name
    >
      atmark("mark_1")
	meta : $name
	usemark_count : $usemark_count
  example2
    -
	"example2" started. mark_2 for meta set in depth-action. The mark is *NOT YET* defined when using it.
      setmark("mark_2");
	# again listing the metas
      setmark("mark_3");
	"example2" finished
      atmark("mark_neverset")
	This text will not be found in the output because the mark is never set.
      atmark("mark_neverset1")
	Also this text is never output for the same reasons.
	This is here to demonstrate how the truer will tell this fact on STDERR
  meta2	name
    >
      atmark("mark_2") {
	meta2 : $name
	usemark_count (mark_2) : $usemark_count
        # nesting works
        atmark("mark_3") {
	name : $name
	usemark_count (mark_3) : $usemark_count
        }
	usemark_count (mark_2) : $usemark_count
      }
  example3
    >
	This example demonstrates usemark() and unusemark()
      setmark("mark_4");
	all metas are collected before this line
      usemark("mark_4");
    <
      unusemark();
  meta3	name
    >
	$name
  example4
    >
	this example demonstrates the relevance of the order of marks that are in direct succession
      setmark("mark_4a");
      setmark("mark_4b");
	end of example4
  meta4a	name
    >
      atmark("mark_4a")
	$name
  meta4b	name
    >
      atmark("mark_4b")
	$name
  meta5	name
    >
	this example demonstrates how to unset a mark
      atmark("mark_4b")
	$name
      undef $tru::HMarks{"mark_4b"}; # this unsets the mark
      atmark("mark_4b")
	$name
  example6
    >
	example6 demonstrates the mark hooks
	header-section start
	meta6 puts some stuff here
      setmark("mark_p1");
	the n-hook for mark_p1 did not apply, since the mark was used at least once

	now setting a new mark.
	nothing puts some stuff here, hence the n-hook applies
      setmark("mark_p2");
	header-section end
    <
	end of example6
  meta6	name
    >
      atmark("mark_p1")
	name : $name
	more to $name
	\$usemark_count : $usemark_count --- count usemark (and implicitely atmark)
  meta6a	name
    >
	going to set mark mark_p1 to here.
	this starts a new mark-setting, where
	  all hooks apply again
	  usemark_count is reset
      setmark("mark_p1"); # this implicitely first unuses mark_p1
  example7
    >
	example7 demonstrates clonemark
	note that the text at mark_7 will appear in reversed order
	as opposed to the text at mark_7a
      setmark("mark_7");
	=============
      setmark("mark_7a");
  meta7	name	attr
    >
      clonemark("mark_7","mark_tmp");
      # now mark_tmp points behind mark_7a
      atmark("mark_tmp")
	$name
	$attr
  meta7a	name	attr
    >
      atmark("mark_7a") {
       setmark("mark_tmp");
      }
      # now mark_7a points behind mark_tmp
      atmark("mark_tmp")
	$name
	$attr
  example9
    >
	example9 demonstrates how the truer automatically unuses marks
      setmark("mark_8");
	End
      usemark("mark_8");
	text at mark_8, but this mark will never be explicitely unused.
	tru will automatically unuse the mark for you and thus trigger the hooks
  example8
    >
	example8 demonstrates the different types of argument to setmark()
	mark type int
      setmark(1);
	mark type float
      setmark(3.14);
	mark type "string"
      setmark("string");
	mark type reference
      setmark(\$var);
	now using the marks
      atmark(1)
	  text at mark type int
      atmark(3.14)
	  text at mark type float
      atmark("string")
	  text at mark type "string"
      atmark(\$var)
	  text at mark type reference
hooks
  mark_p1
    [
	the [-hoook (pre-)  surrounds each setmark completetly if the mark was used
	  each hook has in \$_ the same content that the calling action had when the mark was used *first*
	  here it was : $_
	  this hook is triggered directly after the first usemark.
    ]
	the ]-hook (post-) surrounds each setmark completetly if the mark was used
	  each hook has in \$_ the same content that the calling action had when the mark was used *first*
	  here it was : $_
	  this hook is triggered directly after [ - hook was executed.
	  the mark remains between the [ and ]
    {
	the {-hook (pre-)  surrounds each usemark
	  each hook has in \$_ the same content that the calling action had when the mark was used *first*
	  here it was : $_
	  \$usemark_count contains the counter for the usemark().
	  It is incremented for each usemark() rsp. atmark(). It starts at 1
	  \$usemark_count = $usemark_count
    -
	the --hook (pre-)  surrounds each usemark
	  this is output when then mark is unused or resetted or when there is no more input
	  it is the depth-action. It appears after the output produced by the { - mark
	  each hook has in \$_ the same content that the calling action had when the mark was used *first*
	  here it was : $_
	  \$usemark_count contains the counter for the usemark().
	  It is incremented for each usemark() rsp. atmark(). It starts at 1
	  \$usemark_count = $usemark_count
	  \$NrOfChilds and \$NrOfLinesFollowing are not set here. This may change in the future
    }
	the }-hook (post-) surrounds each usemark
	  this is output when then mark is unused or resetted or when there is no more input
	  it appears after the mark-block
	  each hook has in \$_ the same content that the calling action had when the mark was used *first*
	  here it was : $_
	  \$usemark_count contains the counter for the usemark().
	  It is incremented for each usemark() rsp. atmark(). It starts at 1
	  \$usemark_count = $usemark_count
    n
	  the n hook used if the mark was never used. In this example it will not be triggered
  mark_p2
    n
	used if the mark was never used
  mark_8
    [
	the [ hook for mark_8
    {
	the { hook for mark_8
    -
	the - hook for mark_8
    }
	the } hook for mark_8
    ]
	the ] hook for mark_8
structure
	example1			=	example1
	  text
	  meta1	name			=	meta1
	example2			=	example2
	  text
	  meta2	name			=	meta2
	example3			=	example3
	  meta3	name			=	meta3
	example4			=	example4
	  meta4a	name		=	meta4a
	  meta4b	name		=	meta4b
	example5			=	example5
	  meta5		name		=	meta5
	example6			=	example6
	  text
	  meta6		name		=	meta6
	  meta6a	name		=	meta6a
	example7			=	example7
	  meta7		name	attr	=	meta7
	  meta7a	name	attr	=	meta7a
	example8			=	example8
	example9			=	example9
