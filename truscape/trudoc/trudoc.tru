VERSION	3.0
USAGE	trudoc_tru [Options] <truer>
	produce html documentation for <truer>.
	The output
	  is written to stdout.
	    you can use '-o filename' to write to filename.
OPTIONS
	noGives	don't complain missing 'gives:'
	test1	only for testpurposes
		and a comment for this option
		  also on a strange indent and	with tabs
	test2	also for testpurposes
#      Details :
#        relies on trudoc.css
#        Anchor names:
#	    A_xxxx	xxxx == actionname
#	    L_Structure	The complete structure
BEGIN
  (my $myPath = $0) =~ s/[^\/]*$//;
  unshift @INC,$myPath;
  require "xtractStructure.pl";
  die "exactly one argument required" if ($#ARGV != 0);
  $truer = shift @ARGV;	# @ARGV is now empty and has to be !!
  if (!(open (STATISTICS,"statistics.out"))) {
    print STDERR "cannot open statistics.out: $!";
  }
  $_=<STATISTICS>;                                # skip the very first line (Header)
  while ($_=<STATISTICS>) {
    chop;
    (local @A)=split /\t+/;
    $Seen{$A[6]}{'H'} = $A[0]; # hits in the action-section(s)
    $Seen{$A[6]}{'>'} = $A[1]; # definitions for >
    $Seen{$A[6]}{'-'} = $A[2]; # definitions for -
    $Seen{$A[6]}{'<'} = $A[3]; # definitions for <
    $Seen{$A[6]}{'d'} = $A[4]; # short descriptions
    $Seen{$A[6]}{'s'} = $A[5]; # used in structure
  }
  open (STDIN,"$truer -doc|") or die "cannot run $truer : $!";
  readStructure($truer);
  readUsage    ($truer);
  fillHashAndArrays();
  sub readUsage($)
  {
    my ($truer) = @_;
    chop (@Usage = `$truer -? 2>&1`);
  }
  sub indentval($)
  {
    local ($indent) = @_;
    ($indent =~ y/\t/\t/)*8  + ($indent =~ y/ / /);
  }
WRITE
  return 1 if ($writedisabled);
actions
  DOC
    Convert trudoc to html
      This program takes a truer as argument and processes it's documentation to convert it to html.
      This is done by running "truer -doc" and processing this output.
      The resulting html-file needs trudoc.css as stylesheet.
    >
      $DOC =~ s(.*/)();
	<!DOCTYPE html>
	<html>
	  <head>
	    <meta name="generator" content="trudoc_tru, see www.strux.net"/>
	    <link rel="stylesheet" type="text/css" href="trudoc.css"/>
	    <title>$DOC Reference Card</title>
	    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
	  </head>
	  <body>
      setmark("mark_DOC");
      if (@Usage) {
	    <mainpart>Usage:</mainpart>
	      <howToRead>[
		<a href="howtoread/options.html" title="how to read the options">help</a>
	      ]</howToRead>
	      <br/><br/>
	    <listing class="Usage">
        for (@Usage) {
          $l = htmlescape($_);
          # $l = colorize($l);
	$l
        }
	    </listing>
      }
	    <a name="L_Structure"></a>
	    <mainpart>complete Structure :</mainpart>
	      <howToRead>[
		<a href="howtoread/structure.html" title="how to read the structure">help</a>
	      ]</howToRead>
	      <br/><br/>
	      <table class="structure" rules="cols">
      completeStructure();
	      </table>
	    <mainpart>Overview:</mainpart>
	      <howToRead>[
		<a href="howtoread/overview.html" title="how to read the overview">help</a>
	      ]</howToRead>
	      <br/><br/>
	      <table class="overview">
      setmark("mark_toc");
	      </table>
    <
      $writedisabled = 0; # in case the last action seen by "truer -doc" is an internal action
	    <br/>
	    <div class="tellgenerator">
	      <hr/>
	      This Page was generated using <a href="trudoc_tru.html">trudoc_tru</a>. Find more on <a href="http://www.strux.net">www.strux.net</a>
	    </div>
	  </body>
	</html>
      uriWarnings();
  Action
    an Action
      Parameters :
        Action	mandatory	.+	The action
        *	optional	.+	the args, each in it's own field

      Example :
	actions
	  HitThis	arg1	arg2
    >
      $filename=$short=${"Parameters :"}=${"Example :"}=${"gives :"}=$see=0;
      $firstShortTxt = "";
      $signature=$_;
      if ($Action eq "DOC") {
        $writedisabled = 0;
        >>DocAction
      } else {
        $writedisabled = ($Action ne "UNMATCHED" and ($Seen{$Action}{'s'} == 0));
        >>nonDocAction	$Action
      }
    <
  DocAction
    internal
    >
      usemark("mark_DOC");
    -
	    <h1>$DOC - $firstShortTxt</h1>
    <
	    <h1> </h1>
      unusemark();
  nonDocAction
    l	xwritedisabled
    internal
    >
      $xwritedisabled = $writedisabled;
    -
      $writedisabled = $xwritedisabled;
      return if ($writedisabled);
      $cleanText = MakeValidURI('anchor',$nonDocAction);
	    <a name="A_$cleanText"></a>
      print STDERR "'short' missing for action '$nonDocAction' in file $filename\n"   if (!$short  );
      $nonDocActionEscaped=htmlescape($nonDocAction);
      if ($short) {
	    <h1>$nonDocActionEscaped       <shortText>$firstShortTxt</shortText></h1>
        if (exists($Hits{$nonDocAction})) {
	<part>Structure :</part>
	  <howToRead>[
	    <a href="howtoread/structure.html" title="how to read the structure">help</a>
	  ]</howToRead>
	  <completeStructure>[
	    <a href="#L_Structure" title="jump to the complete structure for $truer">complete Structure</a>
	  ]</completeStructure>
	  <br/><br/>
	<table class="structure" rules="cols">
          structureFor($nonDocAction);
	</table>
        }
        if (specialAction($nonDocAction)) {
	    <part>Special Action</part>
          if ($nonDocAction eq 'READ')
	    applied to input-lines
          elsif ($nonDocAction eq 'WRITE')
	    applied to output-lines
          elsif ($nonDocAction eq 'BEGIN')
	    executed once at the very start
          elsif ($nonDocAction eq 'OPTIONS')
	    describes the options for this truer
          elsif ($nonDocAction eq 'USAGE')
	    describes the usage for this truer
        } else {
          print STDERR "'Parameters' missing for action '$nonDocAction' in file $filename\n" if (!${"Parameters :"} );
          print STDERR "'Example' missing for action '$nonDocAction' in file $filename\n"    if (!${"Example :"});
          print STDERR "'gives' missing for action '$nonDocAction' in file $filename\n"      if (!${"gives :"  } and !$see and !$opt_noGives);
        }
        atmark("mark_toc") {
		<tr>
		  <td>
		    <A href="#A_$cleanText">$nonDocActionEscaped</a>
		  </td>
		  <td>
		    $firstShortTxt
		  </td>
		</tr>
        }
      }
  Parameters :
    The Params
      Details :
        Describes the parameters for the action.
      Parameters :
        Parameters :	indicator	.*
      Example :
	actions
	  HitThis	arg
	    Parameters :
	      HitThis	indicator	HitThis
	      arg		mandatory	"a" or "b"	the butt
    >
	    <part>Signature :</part>
	    <howToRead>[
	      <a href="howtoread/signature.html" title="how to read the signature">help</a>
	    ]</howToRead>
	    <br/><br/>
	    <signatureDiv>
          >>givesLine	$signature
	    </signatureDiv>
	    <br/><br/>
	    <table class="parameters" cellpadding="4" cellspacing="0" frame="box" rules="cols">
    <
	    </table>
	    <br/>
      if ($NrOfChilds != split /\t+/,$signature) {
        print STDERR "Nr of args in Signature and Parameterdescription differ for action '$Action' in file $filename\n";
        print STDERR "  seeing signature '$signature' and $NrOfChilds Parameters\n";
      }
  Indicator	ind	re
    Parameter, that indicates a special block
      Parameters :
        Indicator	mandatory	.+	the name of the parameter
        ind		indicator	indicator
        re		mandatory	.+	what is accepted by this action
      Example :
        see	Parameters :
    >
      $re=htmlescape($re);
      $Indicator=htmlescape($Indicator);
	      <tr><td>$Indicator</td><td>Indicator</td><td>$re</td><td></td></tr>
  param	typ	re	desc
    l	localvar4testing
    Parameter
      Parameters :
        param	mandatory	.+					the name of the parameter
        typ		mandatory	"indicator","mandatory" or "optional"	how this option must be used
        re		mandatory	.+					what is allowed for this parameter
        desc	mandatory	.+					a short description of this parameter
      Example :
        see	Parameters :
    >
      $re=htmlescape($re);
      $param=htmlescape($param);
      $desc=htmlescape($desc);
	      <tr><td>$param</td><td>$typ</td><td>$re</td><td>$desc</td></tr>
      if ($param eq "*" and $rnr > 1) {
        $signature .= "\t*";
      }
  Example :	cmd
    An Example
      Parameters :
        Example :	indicator	Example :
        cmd		optional	.+	the command to run the Example
      Details :
        the first tab of the child-block is removed, so the example can be nicely aligned.
        You can have more than one example.
      Example :
	actions
	  foo
	    short for foo
	      Example :
		here comes the example 
		on many lines
		and it can contain one	or more	tabs
    >
      local $var = htmlescape($cmd);
	    <part>$F[0]</part>
      #$var =~s/\\/\\\\/g;     # this goes into javascript so \ must also be escaped
      #<part><a onmouseover="window.status = 'cmd : $var';return true;" onmouseout = "window.status = '';return true;">$F[0]</a></part>
	    <howToRead>[
	      <a href="howtoread/Example.html" title="how to read the Example">help</a>
	    ]</howToRead>
      if ($var) {
	    <xcommand>[
	      <a title="$var">cmd</a>
	    ]</xcommand>
      }
	    <br/><br/>
	    <listing class="Example">
    <
	</listing>
	    <br/>
  see	what
    point to an Example in another Action
      Parameters :
        see		indicator	see
        what	mandatory	.+	where the example can be found
      Example :
	actions
	  foo
	    short for foo
	      Example :
		see	anotherAction
    >
      $cleanText = MakeValidURI('see',$what);
      $what=htmlescape($what);
	    see <A href="#A_$cleanText">$what</a>
  exampleLine
    part of an Example
      Parameters :
        exampleLine	mandatory	.*	one line of the example, can contain tabs
      Example :
        see	Example :
    >
      >>givesLine	$_
  gives :
    Result of an Example
      Parameters :
        gives :	indicator	gives :
      this section is produced by trudocGivesCheck according to the cmd given to |Example :|.
      Example :
	actions
	  foo
	    short for foo
	      Example :	whatever_tru -report -daily
		4*5
		5+6
	      gives :
		    Daily Report
		twenty
		eleven
    >
	    <part>gives :</part>
	    <howToRead>[
	      <a href="howtoread/gives.html" title="how to read the gives">help</a>
	    ]</howToRead>
	    <br/><br/>
	    <listing class="gives">
    <
	</listing>
	    <br/>
    -
      if (!$NrOfLinesFollowing) {
        print STDERR "'gives' is empty for action '$Action' in file $filename line $.\n";
      }
  givesLine
    part of a gives-block
      Parameters :
        givesLine	mandatory	.*	one line of the example-output, can contain tabs
      Example :
        see	gives :
    >
      $l = htmlescape($_);
      $l = colorize($l);

      if ($l) {
        $indent =~ s/^\t//;
        $indentNr=$level-9;
        $indent = qq(<a title = "Indent : $indentNr">)." "x$indentNr."</a>";
        $l=$indent.$l;
	$l
      } else {
       |
      }
  short
    The short description
      Parameters :
        short	mandatory	.*	the short description
      Example :
	actions
	  foo
	    this is the short documentation
	      long documentation
	      follows here
    >
      $writedisabled = $writedisabled or ( $short =~ /^internal/);
      $firstShortTxt = htmlescape($short) unless $firstShortTxt;
	    <div align="right"><filename>$filename</filename></div>
  detail
    A detail line
      Parameters :
        detail	mandatory	.+	one line of the details, can contain tabs
      Example :
        see	Testaction
    >
      $_=resolveLinks(htmlescape($_));
      $indent = " "x($level-7);
	    <desc>$indent$_</desc><br/>
  Annotation :
    The details
      Parameters :
        Details :	indicator	Details :
      Example :
	actions
	  foo
	    short for foo
	      Details :
		this action does magic things
    >
      $indent = " "x($level-7);
	    <annotation>$indent${"Annotation :"}</annotation><br/>
  file	filename
    Tells,where this part of the documentation is defined
      Parameters :
        file		indicator	from file
        filename	mandatory	.+	the file, where this part of the documentation comes from
      Details :
        This entry is automatically generated by "truer -doc"
      Example :
	actions
	  foo
	    from file	whatever.tru
	    short for foo
    >
      $filename =~ s/^$ENV{'HOME'}/~/o;
  Signature :
    define the signature for an Action
      Parameters :
        Signature :	indicator	Signature :
        *		mandatory	.+	the actionname and it's parameters, each entry in it's own field
      Details :
        only needed, if the signature is not the same as given on the arglist.
      Example :
	actions
	  foo
	    short for foo
	      Signature :	foo	*
    >
      s/.*?\t//;
      $signature = $_;
  Testaction
    just for testing purposes
      Example :
        see	42
      Details :
        this action has no Parameters
      an Example with a command :	cat -n
	    this is an example line

	    blank line above
      an (pseudo) Example with no command :
	    this is a pseudo example line
      no 'gives :' is created for this kind of example.

      Descriptions can be at arbritrary places and can contain characters like <, > and & / \
      and can contain |links|
        Notes :
          Notes or other things here
        Example :
          This is not really an example since it is not at level 3.
          It is merely another anotation

          blank line above

      this line is after a blank line

      this line too is after a blank line

      checking html-like descriptions.
      the <buffer> should not be lost in the Parameters-block
    >
  Testaction1
    again just for testing purposes
    this action is never used in the structure
      Text before the parameters.
      Parameters :
        MultiLineMapping	indicator	<buffer>.*
    >
  UNMATCHED
    emit warning to STDERR
    >
      print STDERR "No match for '$UNMATCHED' in Action '$Action', File '$filename, Line $.'\n";
      print STDERR "remaining lines are:\n";
      while (<>) {
        print STDERR ;
      }
  Testaction2
    internal - just for test purposes
      Parameters :
        Testaction2	indicator	.*
    >
  P[<]![planname]{
    internal - just for test purposes
      Parameters :
        P[<]![planname]{	indicator	.*	planname can be empty
        *			mandatory	.+	the strategies as a sequence of perl-expressions
      Example :
        see	P[<]![planname]{
group
  testgroup
	test action				=		test action
structure
	Action	*
	  file	filename			=		file
	    short
	      Parameters :			=		Parameters :
	        param	indicator	re	= Indicator	.+	indicator
	        param	typ	re	desc
	        EMPTY				=		.{0}
	      Signature :	*		=		Signature :
	      Example :	[cmd]			=		/.*\bexample\b.* :$/i
		exampleLine	*		>*
	        see	what			=		see
	      gives :				=		gives :
		givesLine	*		>t*
	      Annotation :			>		.+ :
	      detail	*			>*
	Testaction				=		Testaction
	  Testaction				=		Testaction
	  [anotheraction]			=		anotheraction
	    whatever				= Testaction	whatever
	      inside				=		inside
	  det					= detail	det
	    testgroup				=g
	  <looks_like_html>	<this_too>	=	<looks_like_html>	<this_too>
	  try			[statement]	>		try
	    [block]				=o		block
	      []
	  P[<]![planname]{	*		>2		P<?!.*\{
	  using condition			= Testaction3($a)
