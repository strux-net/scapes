VERSION	3.1
USAGE	html_tru [Options] [<file> ....]

	produces a html-file

	find details in
	    ~/strux/doc/html_tru.html
	or if you do not have the strux-tools installed
	    http://www.strux.net/strux_zip/strux/doc/html_tru.html

	per convention the input files have the extension .txtTR
READ
  return 0 if $injs and ($level >$injs); # skip whatever htmlREAD will do to this line (because we are in a javascript block)
  $injs = 0;
here text
  STYLE
	  documentStart			<!DOCTYPE html><html>
	  documentEnd			</html>
	  bodyStart			<body>
	  bodyEnd			</body>
	  sectionStart			<div>
	  sectionEnd			</div>
	  pictureStart			<br/>
	  pictureEnd			<br/>
	  tableStart			<table>
	  tableEnd			</table><br/>
	  codeStart			<br/><table summary="" class="statements">
	  codeEnd			</table><br/>
	  listStart			<ul>
	  listEnd			</ul>
	  definitionsStart		<dl>
	  definitionsEnd		</dl>
	  enumStart			<ol>
	  enumEnd			</ol>
	  verbatimStart			<pre>
	  verbatimEnd			</pre>
	  emptylistlineSimple		<br/>
	  emptytabrowSimple		<tr><td></td></tr>
	  emptyenumitemSimple		<br/>
	  enumitemStart			<li>
	  enumitemEnd			</li>
	  listlineStart			<li>
	  listlineEnd			</li>
	  tabRowStart			<tr>
	  tabRowEnd			</tr>
	  tabRowSep
	  urlStart			<img src="
	  urlEnd			"/><br/>
	  Precaption
	  Postcaption			<br/>

	  #
	  # These vars are unique to html_tru
	  #
	  # Hierarchy			generate hierarchy numbers
	  # TocHeader			put before the table of contents
	  # emptyfreetextlineSimple	starting from the 2nd empty line
	  # lineNumbersForCode		prefex codelines with linenumbers
	  # head			use for the head

	  Hierarchy
	  TocHeader			<h2><font color="maroon">Overview</font></h2>
	  emptyfreetextlineSimple	<br/>
	  lineNumbersForCode
	  head				<head>
actions
  DOC
    An html-file
      The created output is valid html.
      The simplest sequence of commands is:
          html_tru mydoc.txtTR >mydoc.html
      Another sequence may look like
          html_tru style intro chapter1 chapter2 chapter3 >mybook.html

      For use in a stylesheet these classes are defined
	  statements	for the whole table that contains the code
	  coderow	for a coderow (codeLineNr + code)
	  codeLineNr	for the linenumber
	  code		for the code-line
      Hint:
	use the style-var head to include stylesheet like in
	  style
	    head			<head><link rel="stylesheet" href="style.css"/>

    -
	$documentStart
	<!--
	  Autogenerated from html_tru using @F
	  do not edit this file, look for above mentioned and make your changes there.
	  or you may loose all your changes and probably choose the wrong method.
	-->
	$head
      setmark("mark_Meta");
	  <meta name="generator" content="html_tru (www.strux.net)"/>
      if ($Title) {
	  <title>$Title</title>
      }
	</head>
	$bodyStart
      if ($Toc) {
        if (@H) {
	$TocHeader
          for $h (sort {$$a[2] <=> $$b[2]} @H) {
            for (1..@$h[0]) {
	&nbsp; &nbsp;
            }
	  <a href="#@$h[3]">
	    @$h[1]
	  </a>
	<br/>
          }
	<hr/>
        }
      }
    <
	$bodyEnd
	$documentEnd
  emptyfreetextline
    continued
      The first empty line in a sequence of empty lines is ignored.
    >
      if ($rnr > 1)
	$emptyfreetextlineSimple
  tabrow
    continued
          1	emit style-var tabRowStart
          2	emit "<td>field</td>" for all fields
          3	emit style-var tabRowEnd
    >
	$tabRowStart
        for $c (@F) {
	  <td>$c</td>
        }
	$tabRowEnd
  freetextOrSection
    continued
        An anchor is set at the start, so you can refer to this chapter by naming it.
        The complete sequence is:
            1	<a name="internal representation of "whatever the section is"></a>
            2	<h1>whatever the section is</h1>
            3	sectionStart
            4	content of the section (chapter, paragraph or whatever)
            5	sectionEnd
        If the style-var Hierarchy is set then hierarchical numbers are generated and prepended to the section-title.
        In this case item 2 (table above) may look like
          <h3>2.1.3 whatever the section is</h3>
  section	unescaped
    >
      if ($Hierarchy) {
        $hyr=$O[0]+1;
        for (1..$level) {
          $hyr.=".".($O[$_]+1);
        }
        $section="$hyr&nbsp;&nbsp;&nbsp;$section";
      }
      push @H,[$level,$section,$.,$cleanText];
	<a name="$cleanText"></a>
	<h@{[1+$level]}>$section</h@{[1+$level]}>
	$sectionStart
    <
	$sectionEnd
      if ($Hierarchy) {
        $O[($level-1)>>1]++;
        $O[(($level-1)>>1)+1]=0;
      }

  coderow
    continued
      if style-var lineNumbersForCode is true, then line-numbers are generated.
      The coderow is output as <kbd>coderow</kbd>
    >
      local $indent="&nbsp;"x$rlevel;
	<tr class="coderow">
      if ($lineNumbersForCode) {
	  <td class="codeLineNr">$linenr</td>
      }
	  <td class="code"><kbd>$indent$_</kbd></td>
	</tr>
  metaname	content
    continued
      If the metaname is charset, then it results in
        <meta http-equiv="content-type" content="text/html; charset=content"/>
      Else it results in
        <meta name="metaname" content="content"/>
    >
      if ($metaname eq 'charset') {
	  <meta http-equiv="content-type" content="text/html; charset=$content"/>
      } else {
	  <meta name="$metaname" content="$content"/>
      }
  defitem	text
    continued
      the defitem is output as
        <dt>defitem</dt>
      the text is output as
        <dd>text</dd>
    >
	<dt>$defitem</dt>
	<dd>$text
    <
	</dd>
  style
    <
      $LD=($Pre?"<br/>":"");
  label	labelname
    continued
      it results in
        <a name="labelname"></a>
    >
	<a name="$labelname"></a>
  verbatimLine
    >
	@{[ " "x($rlevel)]}$_
  html code
    a block of native html-code which is copied unchanged
      Parameters :
        html code		indicator	.*
      Example :
        see	nativeLangCode
    >
  javascript	stmt
    >
      $injs = $level;
	<script type="text/javascript" language="JavaScript">
      if ($stmt ne "") {
        push @ATTIC,"$indent  $Funescaped[1]";
      }
    <
	</script>

structure
	html code			>>2	html code
	  nativeLangCode	*	>>*
	javascript	[stmt]		>>2	javascript
	  common			=g
	  js				=g
